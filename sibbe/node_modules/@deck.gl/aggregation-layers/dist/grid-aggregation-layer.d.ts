import { LayerContext, UpdateParameters, Accessor } from '@deck.gl/core';
import AggregationLayer, { AggregationLayerProps } from "./aggregation-layer.js";
import GPUGridAggregator from "./utils/gpu-grid-aggregation/gpu-grid-aggregator.js";
import BinSorter from "./utils/bin-sorter.js";
import type { Buffer } from '@luma.gl/core';
export type GridAggregationLayerProps<DataT> = AggregationLayerProps<DataT>;
export default abstract class GridAggregationLayer<DataT, ExtraPropsT extends {} = {}> extends AggregationLayer<DataT, ExtraPropsT> {
    static layerName: string;
    state: AggregationLayer<DataT>['state'] & {
        aggregationDataDirty?: boolean;
        aggregationWeightsDirty?: boolean;
        aggregationDirty?: boolean;
        gpuAggregation?: any;
        getValue?: () => any;
        sortedBins?: BinSorter;
        weights: {
            [key: string]: {
                aggregationBuffer?: Buffer;
                maxMinBuffer?: Buffer;
                aggregationData: Float32Array | null;
                maxMinData: Float32Array;
                maxData: Float32Array;
                minData: Float32Array;
                getWeight: Accessor<DataT, number>;
                operation: number;
            };
        };
        cpuGridAggregator?: Function;
        gpuGridAggregator?: GPUGridAggregator;
        layerData: any;
        numRow: number;
        numCol: number;
        gridOffset: {
            xOffset: number;
            yOffset: number;
        };
        posOffset: number[];
        gridOrigin: number[];
        translation: number[];
        scaling: number[];
        boundingBox: {
            xMin: number;
            yMin: number;
            xMax: number;
            yMax: number;
        };
        projectPoints?: (p: [number, number]) => [number, number];
    };
    initializeAggregationLayer({ dimensions }: {
        dimensions: any;
    }): void;
    updateState(opts: UpdateParameters<this>): void;
    finalizeState(context: LayerContext): void;
    updateShaders(shaders: any): void;
    updateAggregationState(opts: UpdateParameters<this>): void;
    allocateResources(numRow: any, numCol: any): void;
    updateResults({ aggregationData, maxMinData, maxData, minData }: {
        aggregationData: any;
        maxMinData: any;
        maxData: any;
        minData: any;
    }): void;
    _updateAggregation(opts: any): void;
    _updateWeightBins(): void;
    _uploadAggregationResults(): void;
}
//# sourceMappingURL=grid-aggregation-layer.d.ts.map