import { LayerExtension } from '@deck.gl/core';
import collision from "./shader-module.js";
import CollisionFilterEffect from "./collision-filter-effect.js";
const defaultProps = {
    getCollisionPriority: { type: 'accessor', value: 0 },
    collisionEnabled: true,
    collisionGroup: { type: 'string', value: 'default' },
    collisionTestProps: {}
};
/** Allows layers to hide overlapping objects. */
export default class CollisionFilterExtension extends LayerExtension {
    static { this.defaultProps = defaultProps; }
    static { this.extensionName = 'CollisionFilterExtension'; }
    getShaders() {
        return { modules: [collision] };
    }
    /* eslint-disable camelcase */
    draw({ uniforms, context, moduleParameters }) {
        const { collisionEnabled } = this.props;
        const { collisionFBO, drawToCollisionMap } = moduleParameters;
        const enabled = collisionEnabled && Boolean(collisionFBO);
        uniforms.collision_enabled = enabled;
        if (drawToCollisionMap) {
            // Override any props with those defined in collisionTestProps
            // @ts-ignore
            this.props = this.clone(this.props.collisionTestProps).props;
        }
    }
    initializeState(context, extension) {
        if (this.getAttributeManager() === null) {
            return;
        }
        this.context.deck?._addDefaultEffect(new CollisionFilterEffect());
        const attributeManager = this.getAttributeManager();
        attributeManager.add({
            collisionPriorities: {
                size: 1,
                accessor: 'getCollisionPriority',
                shaderAttributes: {
                    collisionPriorities: { divisor: 0 },
                    instanceCollisionPriorities: { divisor: 1 }
                }
            }
        });
    }
    getNeedsPickingBuffer() {
        return this.props.collisionEnabled;
    }
}
