import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
/* global document */
import { FlyToInterpolator } from '@deck.gl/core';
import { render } from 'preact';
import { ButtonGroup, GroupedIconButton } from "./components.js";
export class ZoomWidget {
    constructor(props) {
        this.id = 'zoom';
        this.placement = 'top-left';
        this.orientation = 'vertical';
        this.viewId = null;
        this.id = props.id || 'zoom';
        this.viewId = props.viewId || null;
        this.placement = props.placement || 'top-left';
        this.orientation = props.orientation || 'vertical';
        props.transitionDuration = props.transitionDuration || 200;
        props.zoomInLabel = props.zoomInLabel || 'Zoom In';
        props.zoomOutLabel = props.zoomOutLabel || 'Zoom Out';
        props.style = props.style || {};
        this.props = props;
    }
    onAdd({ deck }) {
        const { style, className } = this.props;
        const element = document.createElement('div');
        element.classList.add('deck-widget', 'deck-widget-zoom');
        if (className)
            element.classList.add(className);
        if (style) {
            Object.entries(style).map(([key, value]) => element.style.setProperty(key, value));
        }
        const ui = (_jsxs(ButtonGroup, { orientation: this.orientation, children: [_jsx(GroupedIconButton, { onClick: () => this.handleZoomIn(), label: this.props.zoomInLabel, className: "deck-widget-zoom-in" }), _jsx(GroupedIconButton, { onClick: () => this.handleZoomOut(), label: this.props.zoomOutLabel, className: "deck-widget-zoom-out" })] }));
        render(ui, element);
        this.deck = deck;
        this.element = element;
        return element;
    }
    onRemove() {
        this.deck = undefined;
        this.element = undefined;
    }
    setProps(props) {
        Object.assign(this.props, props);
    }
    onViewportChange(viewport) {
        this.viewport = viewport;
    }
    handleZoom(nextZoom) {
        const viewId = this.viewId || 'default-view';
        const nextViewState = {
            ...this.viewport,
            zoom: nextZoom,
            transitionDuration: this.props.transitionDuration,
            transitionInterpolator: new FlyToInterpolator()
        };
        // @ts-ignore Using private method temporary until there's a public one
        this.deck._onViewStateChange({ viewId, viewState: nextViewState, interactionState: {} });
    }
    handleZoomIn() {
        if (this.viewport) {
            this.handleZoom(this.viewport.zoom + 1);
        }
    }
    handleZoomOut() {
        if (this.viewport) {
            this.handleZoom(this.viewport.zoom - 1);
        }
    }
}
