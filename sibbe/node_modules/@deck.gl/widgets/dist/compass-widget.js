import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
/* global document */
import { FlyToInterpolator, WebMercatorViewport, _GlobeViewport } from '@deck.gl/core';
import { render } from 'preact';
export class CompassWidget {
    constructor(props) {
        this.id = 'compass';
        this.placement = 'top-left';
        this.viewId = null;
        this.id = props.id || 'compass';
        this.viewId = props.viewId || null;
        this.placement = props.placement || 'top-left';
        props.transitionDuration = props.transitionDuration || 200;
        props.label = props.label || 'Compass';
        props.style = props.style || {};
        this.props = props;
    }
    setProps(props) {
        Object.assign(this.props, props);
    }
    onViewportChange(viewport) {
        this.viewport = viewport;
        this.update();
    }
    onAdd({ deck }) {
        const { style, className } = this.props;
        const element = document.createElement('div');
        element.classList.add('deck-widget', 'deck-widget-compass');
        if (className)
            element.classList.add(className);
        if (style) {
            Object.entries(style).map(([key, value]) => element.style.setProperty(key, value));
        }
        this.deck = deck;
        this.element = element;
        this.update();
        return element;
    }
    getRotation() {
        if (this.viewport instanceof WebMercatorViewport) {
            return [-this.viewport.bearing, this.viewport.pitch];
        }
        else if (this.viewport instanceof _GlobeViewport) {
            return [0, Math.max(-80, Math.min(80, this.viewport.latitude))];
        }
        return [0, 0];
    }
    update() {
        const [rz, rx] = this.getRotation();
        const element = this.element;
        if (!element) {
            return;
        }
        const ui = (_jsx("div", { className: "deck-widget-button", style: { perspective: 100 }, children: _jsx("button", { type: "button", onClick: () => this.handleCompassReset(), label: this.props.label, style: { transform: `rotateX(${rx}deg)` }, children: _jsx("svg", { fill: "none", width: "100%", height: "100%", viewBox: "0 0 26 26", children: _jsxs("g", { transform: `rotate(${rz},13,13)`, children: [_jsx("path", { d: "M10 13.0001L12.9999 5L15.9997 13.0001H10Z", fill: "var(--icon-compass-north-color, #F05C44)" }), _jsx("path", { d: "M16.0002 12.9999L13.0004 21L10.0005 12.9999H16.0002Z", fill: "var(--icon-compass-south-color, #C2C2CC)" })] }) }) }) }));
        render(ui, element);
    }
    onRemove() {
        this.deck = undefined;
        this.element = undefined;
    }
    handleCompassReset() {
        const viewId = this.viewId || 'default-view';
        if (this.viewport instanceof WebMercatorViewport) {
            const nextViewState = {
                ...this.viewport,
                bearing: 0,
                ...(this.getRotation()[0] === 0 ? { pitch: 0 } : {}),
                transitionDuration: this.props.transitionDuration,
                transitionInterpolator: new FlyToInterpolator()
            };
            // @ts-ignore Using private method temporary until there's a public one
            this.deck._onViewStateChange({ viewId, viewState: nextViewState, interactionState: {} });
        }
    }
}
