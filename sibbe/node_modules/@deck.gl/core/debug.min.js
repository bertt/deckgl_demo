(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if (typeof define === 'function' && define.amd) define([], factory);
        else if (typeof exports === 'object') exports['deck.debug'] = factory();
  else root['deck.debug'] = factory();})(globalThis, function () {
"use strict";var __exports__=(()=>{var d=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var _=(a,t)=>{for(var e in t)d(a,e,{get:t[e],enumerable:!0})},C=(a,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of h(t))!m.call(a,s)&&s!==e&&d(a,s,{get:()=>t[s],enumerable:!(r=y(t,s))||r.enumerable});return a};var D=a=>C(d({},"__esModule",{value:!0}),a);var O={};_(O,{loggers:()=>L});var i={attributeUpdateStart:-1,attributeManagerUpdateStart:-1,attributeUpdateMessages:[]},g=1,n=2,u=3,l=4,w=2,b=a=>({"layer.changeFlag":(t,e,r)=>{a.log(u,`${t.id} ${e}: `,r[e])()},"layer.initialize":t=>{a.log(g,`Initializing ${t}`)()},"layer.update":(t,e)=>{if(e){let r=t.getChangeFlags();a.log(n,`Updating ${t} because: ${Object.keys(r).filter(s=>r[s]).join(", ")}`)()}else a.log(l,`${t} does not need update`)()},"layer.matched":(t,e)=>{e&&a.log(l,`Matched ${t}, state transfered`)()},"layer.finalize":t=>{a.log(g,`Finalizing ${t}`)()},"compositeLayer.renderLayers":(t,e,r)=>{e?a.log(n,`Composite layer rendered new subLayers ${t}`,r)():a.log(l,`Composite layer reused subLayers ${t}`,r)()},"layerManager.setLayers":(t,e,r)=>{e&&a.log(n,`Updating ${r.length} deck layers`)()},"layerManager.activateViewport":(t,e)=>{a.log(u,"Viewport changed",e)()},"attributeManager.invalidate":(t,e,r)=>{a.log(g,r?`invalidated attributes ${r} (${e}) for ${t.id}`:`invalidated all attributes for ${t.id}`)()},"attributeManager.updateStart":t=>{i.attributeUpdateMessages.length=0,i.attributeManagerUpdateStart=Date.now()},"attributeManager.updateEnd":(t,e)=>{let r=Math.round(Date.now()-i.attributeManagerUpdateStart);a.groupCollapsed(n,`Updated attributes for ${e} instances in ${t.id} in ${r}ms`)();for(let s of i.attributeUpdateMessages)a.log(u,s)();a.groupEnd(n)()},"attribute.updateStart":t=>{i.attributeUpdateStart=Date.now()},"attribute.allocate":(t,e)=>{let r=`${t.id} allocated ${e}`;i.attributeUpdateMessages.push(r)},"attribute.updateEnd":(t,e)=>{let r=Math.round(Date.now()-i.attributeUpdateStart),s=`${t.id} updated ${e} in ${r}ms`;i.attributeUpdateMessages.push(s)},"deckRenderer.renderLayers":(t,e,r)=>{let{pass:s,redrawReason:M,stats:p}=r;for(let E of e){let{totalCount:c,visibleCount:o,compositeCount:$,pickableCount:f}=E,U=c-$-o;a.log(w,`RENDER #${t.renderCount}   ${o} (of ${c} layers) to ${s} because ${M}   (${U} hidden, ${$} composite ${f} pickable)`)(),p&&p.get("Redraw Layers").add(o)}}});var L=b(globalThis.deck.log);globalThis.deck._registerLoggers(L);return D(O);})();
      return __exports__;
      });
