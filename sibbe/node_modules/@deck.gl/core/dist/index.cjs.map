{
  "version": 3,
  "sources": ["index.js", "lib/init.js", "utils/log.js", "debug/loggers.js", "debug/index.js", "utils/json-loader.js", "shaderlib/index.js", "shaderlib/project/project.js", "shaderlib/misc/geometry.js", "lib/constants.js", "shaderlib/project/project.glsl.js", "shaderlib/project/viewport-uniforms.js", "utils/memoize.js", "shaderlib/project32/project32.js", "shaderlib/shadow/shadow.js", "shaderlib/picking/picking.js", "effects/lighting/ambient-light.js", "effects/lighting/directional-light.js", "effects/lighting/lighting-effect.js", "passes/pass.js", "passes/layers-pass.js", "passes/shadow-pass.js", "utils/typed-array-manager.js", "utils/math-utils.js", "viewports/viewport.js", "viewports/web-mercator-viewport.js", "shaderlib/project/project-functions.js", "effects/lighting/point-light.js", "effects/lighting/camera-light.js", "effects/lighting/sun-light.js", "effects/post-process-effect.js", "passes/screen-pass.js", "passes/pick-layers-pass.js", "lib/layer-manager.js", "lifecycle/constants.js", "utils/flatten.js", "lib/resource/resource.js", "lib/resource/resource-manager.js", "utils/deep-equal.js", "lib/view-manager.js", "utils/positions.js", "views/view.js", "controllers/map-controller.js", "transitions/transition.js", "controllers/transition-manager.js", "transitions/transition-interpolator.js", "utils/assert.js", "transitions/linear-interpolator.js", "controllers/controller.js", "controllers/view-state.js", "views/map-view.js", "lib/effect-manager.js", "passes/draw-layers-pass.js", "lib/deck-renderer.js", "lib/picking/query-object.js", "lib/picking/pick-info.js", "lib/deck-picker.js", "lib/widget-manager.js", "lib/tooltip.js", "lib/deck.js", "lib/attribute/data-column.js", "lib/attribute/gl-utils.js", "utils/iterable-utils.js", "utils/range.js", "lib/attribute/transition-settings.js", "lib/attribute/attribute.js", "transitions/gpu-interpolation-transition.js", "utils/array-utils.js", "transitions/gpu-transition-utils.js", "transitions/gpu-transition.js", "transitions/gpu-spring-transition.js", "lib/attribute/attribute-transition-manager.js", "lib/attribute/attribute-manager.js", "lib/layer.js", "transitions/cpu-interpolation-transition.js", "transitions/cpu-spring-transition.js", "lib/uniform-transition-manager.js", "lifecycle/props.js", "utils/count.js", "utils/shader.js", "utils/texture.js", "lifecycle/prop-types.js", "lifecycle/create-props.js", "lifecycle/component.js", "lifecycle/component-state.js", "lib/layer-state.js", "lib/composite-layer.js", "viewports/globe-viewport.js", "viewports/orbit-viewport.js", "viewports/orthographic-viewport.js", "viewports/first-person-viewport.js", "controllers/first-person-controller.js", "views/first-person-view.js", "controllers/orbit-controller.js", "views/orbit-view.js", "controllers/orthographic-controller.js", "views/orthographic-view.js", "controllers/globe-controller.js", "views/globe-view.js", "lib/layer-extension.js", "transitions/fly-to-interpolator.js", "utils/tesselator.js"],
  "sourcesContent": ["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable max-len */\n// Intialize globals, extract version\nexport { VERSION } from \"./lib/init.js\";\n// Import shaderlib to make sure shader modules are initialized\nexport { getShaderAssembler } from \"./shaderlib/index.js\";\n// Core Library\nexport { COORDINATE_SYSTEM, OPERATION, UNIT } from \"./lib/constants.js\";\n// Effects\nexport { default as LightingEffect } from \"./effects/lighting/lighting-effect.js\";\nexport { AmbientLight } from \"./effects/lighting/ambient-light.js\";\nexport { DirectionalLight } from \"./effects/lighting/directional-light.js\";\nexport { PointLight } from \"./effects/lighting/point-light.js\";\nexport { default as _CameraLight } from \"./effects/lighting/camera-light.js\";\nexport { default as _SunLight } from \"./effects/lighting/sun-light.js\";\nexport { default as PostProcessEffect } from \"./effects/post-process-effect.js\";\n// Passes\nexport { default as _LayersPass } from \"./passes/layers-pass.js\";\nexport { default as _PickLayersPass } from \"./passes/pick-layers-pass.js\";\n// Experimental Pure JS (non-React) bindings\nexport { default as Deck } from \"./lib/deck.js\";\nexport { default as LayerManager } from \"./lib/layer-manager.js\";\nexport { default as Attribute } from \"./lib/attribute/attribute.js\";\nexport { default as AttributeManager } from \"./lib/attribute/attribute-manager.js\";\nexport { default as Layer } from \"./lib/layer.js\";\nexport { default as CompositeLayer } from \"./lib/composite-layer.js\";\nexport { default as DeckRenderer } from \"./lib/deck-renderer.js\";\n// Viewports\nexport { default as Viewport } from \"./viewports/viewport.js\";\nexport { default as WebMercatorViewport } from \"./viewports/web-mercator-viewport.js\";\nexport { default as _GlobeViewport } from \"./viewports/globe-viewport.js\";\nexport { default as OrbitViewport } from \"./viewports/orbit-viewport.js\";\nexport { default as OrthographicViewport } from \"./viewports/orthographic-viewport.js\";\nexport { default as FirstPersonViewport } from \"./viewports/first-person-viewport.js\";\n// Shader modules\nexport { picking, project, project32, gouraudLighting, phongLighting, shadow } from \"./shaderlib/index.js\";\nexport { default as View } from \"./views/view.js\";\nexport { default as MapView } from \"./views/map-view.js\";\nexport { default as FirstPersonView } from \"./views/first-person-view.js\";\nexport { default as OrbitView } from \"./views/orbit-view.js\";\nexport { default as OrthographicView } from \"./views/orthographic-view.js\";\nexport { default as _GlobeView } from \"./views/globe-view.js\";\n// Controllers\nexport { default as Controller } from \"./controllers/controller.js\";\nexport { default as MapController } from \"./controllers/map-controller.js\";\nexport { default as _GlobeController } from \"./controllers/globe-controller.js\";\nexport { default as FirstPersonController } from \"./controllers/first-person-controller.js\";\nexport { default as OrbitController } from \"./controllers/orbit-controller.js\";\nexport { default as OrthographicController } from \"./controllers/orthographic-controller.js\";\n// Extensions interface\nexport { default as LayerExtension } from \"./lib/layer-extension.js\";\n// Transitions\nexport { TRANSITION_EVENTS } from \"./controllers/transition-manager.js\";\nexport { default as TransitionInterpolator } from \"./transitions/transition-interpolator.js\";\nexport { default as LinearInterpolator } from \"./transitions/linear-interpolator.js\";\nexport { default as FlyToInterpolator } from \"./transitions/fly-to-interpolator.js\";\n// Layer utilities\nexport { default as log } from \"./utils/log.js\";\nexport { default as assert } from \"./utils/assert.js\";\nexport { createIterable } from \"./utils/iterable-utils.js\";\nexport { fp64LowPart } from \"./utils/math-utils.js\";\nexport { default as Tesselator } from \"./utils/tesselator.js\"; // Export? move to luma.gl or math.gl?\n// Experimental utilities\nexport { fillArray as _fillArray, flatten as _flatten } from \"./utils/flatten.js\"; // Export? move to luma.gl or math.gl?\nexport { count as _count } from \"./utils/count.js\";\nexport { deepEqual as _deepEqual } from \"./utils/deep-equal.js\";\nexport { default as _memoize } from \"./utils/memoize.js\";\nexport { mergeShaders as _mergeShaders } from \"./utils/shader.js\";\nexport { compareProps as _compareProps } from \"./lifecycle/props.js\";\n// INTERNAL, DO NOT USE\n// @deprecated internal do not use\nexport { default as _Component } from \"./lifecycle/component.js\";\n// @deprecated internal do not use\nexport { default as _ComponentState } from \"./lifecycle/component-state.js\";\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { registerLoaders } from '@loaders.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport log from \"../utils/log.js\";\nimport { register } from \"../debug/index.js\";\nimport jsonLoader from \"../utils/json-loader.js\";\nfunction checkVersion() {\n    // Version detection using babel plugin\n    // Fallback for tests and SSR since global variable is defined by Webpack.\n    const version = typeof \"9.0.6\" !== 'undefined'\n        ? \"9.0.6\" : globalThis.DECK_VERSION || 'untranspiled source';\n    // Note: a `deck` object not created by deck.gl may exist in the global scope\n    const existingVersion = globalThis.deck && globalThis.deck.VERSION;\n    if (existingVersion && existingVersion !== version) {\n        throw new Error(`deck.gl - multiple versions detected: ${existingVersion} vs ${version}`);\n    }\n    if (!existingVersion) {\n        log.log(1, `deck.gl ${version}`)();\n        globalThis.deck = {\n            ...globalThis.deck,\n            VERSION: version,\n            version,\n            log,\n            // experimental\n            _registerLoggers: register\n        };\n        registerLoaders([\n            jsonLoader,\n            // @ts-expect-error non-standard Loader format\n            [ImageLoader, { imagebitmap: { premultiplyAlpha: 'none' } }]\n        ]);\n    }\n    return version;\n}\nexport const VERSION = checkVersion();\n", "import { Log } from '@probe.gl/log';\nconst defaultLogger = new Log({ id: 'deck' });\nexport default defaultLogger;\n", "const logState = {\n    attributeUpdateStart: -1,\n    attributeManagerUpdateStart: -1,\n    attributeUpdateMessages: []\n};\nconst LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact\nconst LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\nexport const getLoggers = (log) => ({\n    /* Layer events */\n    'layer.changeFlag': (layer, key, flags) => {\n        log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();\n    },\n    'layer.initialize': layer => {\n        log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();\n    },\n    'layer.update': (layer, needsUpdate) => {\n        if (needsUpdate) {\n            const flags = layer.getChangeFlags();\n            log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layer} because: ${Object.keys(flags)\n                .filter(key => flags[key])\n                .join(', ')}`)();\n        }\n        else {\n            log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();\n        }\n    },\n    'layer.matched': (layer, changed) => {\n        if (changed) {\n            log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();\n        }\n    },\n    'layer.finalize': layer => {\n        log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();\n    },\n    /* CompositeLayer events */\n    'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n        if (updated) {\n            log.log(LOG_LEVEL_MINOR_UPDATE, `Composite layer rendered new subLayers ${layer}`, subLayers)();\n        }\n        else {\n            log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();\n        }\n    },\n    /* LayerManager events */\n    'layerManager.setLayers': (layerManager, updated, layers) => {\n        if (updated) {\n            log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();\n        }\n    },\n    'layerManager.activateViewport': (layerManager, viewport) => {\n        log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n    },\n    /* AttributeManager events */\n    'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n        log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames\n            ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}`\n            : `invalidated all attributes for ${attributeManager.id}`)();\n    },\n    'attributeManager.updateStart': attributeManager => {\n        logState.attributeUpdateMessages.length = 0;\n        logState.attributeManagerUpdateStart = Date.now();\n    },\n    'attributeManager.updateEnd': (attributeManager, numInstances) => {\n        const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n        log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`)();\n        for (const updateMessage of logState.attributeUpdateMessages) {\n            log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n        }\n        log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n    },\n    /* Attribute events */\n    'attribute.updateStart': attribute => {\n        logState.attributeUpdateStart = Date.now();\n    },\n    'attribute.allocate': (attribute, numInstances) => {\n        const message = `${attribute.id} allocated ${numInstances}`;\n        logState.attributeUpdateMessages.push(message);\n    },\n    'attribute.updateEnd': (attribute, numInstances) => {\n        const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n        const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;\n        logState.attributeUpdateMessages.push(message);\n    },\n    /* Render events */\n    'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n        const { pass, redrawReason, stats } = opts;\n        for (const status of renderStats) {\n            const { totalCount, visibleCount, compositeCount, pickableCount } = status;\n            const primitiveCount = totalCount - compositeCount;\n            const hiddenCount = primitiveCount - visibleCount;\n            log.log(LOG_LEVEL_DRAW, `RENDER #${deckRenderer.renderCount} \\\n  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \\\n  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`)();\n            if (stats) {\n                stats.get('Redraw Layers').add(visibleCount);\n            }\n        }\n    }\n});\n", "import deckLog from \"../utils/log.js\";\nimport { getLoggers } from \"./loggers.js\";\n/* debug utility */\nlet loggers = {};\n// Conditionally load default loggers in development mode\n// eslint-disable-next-line\nif (process.env.NODE_ENV !== 'production') {\n    loggers = getLoggers(deckLog);\n}\nexport function register(handlers) {\n    loggers = handlers;\n}\nexport default function debug(eventType, arg1, arg2, arg3) {\n    if (deckLog.level > 0 && loggers[eventType]) {\n        // Not using rest parameters to defeat perf hit from array construction\n        loggers[eventType].call(null, arg1, arg2, arg3);\n    }\n}\n", "function isJSON(text) {\n    const firstChar = text[0];\n    const lastChar = text[text.length - 1];\n    return (firstChar === '{' && lastChar === '}') || (firstChar === '[' && lastChar === ']');\n}\n// A light weight version instead of @loaders.gl/json (stream processing etc.)\nexport default {\n    id: 'JSON',\n    name: 'JSON',\n    module: '',\n    version: '',\n    options: {},\n    extensions: ['json', 'geojson'],\n    mimeTypes: ['application/json', 'application/geo+json'],\n    testText: isJSON,\n    parseTextSync: JSON.parse\n};\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { ShaderAssembler } from '@luma.gl/shadertools';\nimport { gouraudLighting, phongLighting } from '@luma.gl/shadertools';\nimport project from \"./project/project.js\";\nimport project32 from \"./project32/project32.js\";\nimport shadow from \"./shadow/shadow.js\";\nimport picking from \"./picking/picking.js\";\nconst DEFAULT_MODULES = [project];\nconst SHADER_HOOKS = [\n    'vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)',\n    'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)',\n    'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)',\n    'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'\n];\nexport function getShaderAssembler() {\n    const shaderAssembler = ShaderAssembler.getDefaultShaderAssembler();\n    for (const shaderModule of DEFAULT_MODULES) {\n        shaderAssembler.addDefaultModule(shaderModule);\n    }\n    for (const shaderHook of SHADER_HOOKS) {\n        shaderAssembler.addShaderHook(shaderHook);\n    }\n    return shaderAssembler;\n}\nexport { picking, project, project32, gouraudLighting, phongLighting, shadow };\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { fp32 } from '@luma.gl/shadertools';\nimport geometry from \"../misc/geometry.js\";\nimport projectShader from \"./project.glsl.js\";\nimport { getUniformsFromViewport } from \"./viewport-uniforms.js\";\nconst INITIAL_MODULE_OPTIONS = {};\nfunction getUniforms(opts = INITIAL_MODULE_OPTIONS) {\n    if ('viewport' in opts) {\n        return getUniformsFromViewport(opts);\n    }\n    return {};\n}\nexport default {\n    name: 'project',\n    dependencies: [fp32, geometry],\n    vs: projectShader,\n    getUniforms\n};\n", "const defines = '#define SMOOTH_EDGE_RADIUS 0.5';\nconst vs = `\n${defines}\n\nstruct VertexGeometry {\n  vec4 position;\n  vec3 worldPosition;\n  vec3 worldPositionAlt;\n  vec3 normal;\n  vec2 uv;\n  vec3 pickingColor;\n} geometry = VertexGeometry(\n  vec4(0.0, 0.0, 1.0, 0.0),\n  vec3(0.0),\n  vec3(0.0),\n  vec3(0.0),\n  vec2(0.0),\n  vec3(0.0)\n);\n`;\nconst fs = `\n${defines}\n\nstruct FragmentGeometry {\n  vec2 uv;\n} geometry;\n\nfloat smoothedge(float edge, float x) {\n  return smoothstep(edge - SMOOTH_EDGE_RADIUS, edge + SMOOTH_EDGE_RADIUS, x);\n}\n`;\nexport default { name: 'geometry', vs, fs };\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// Note: The numeric values here are matched by shader code in the\n// \"project\" and \"project64\" shader modules. Both places need to be\n// updated.\nimport log from \"../utils/log.js\";\n/**\n * The coordinate system that positions/dimensions are defined in.\n */\nexport const COORDINATE_SYSTEM = {\n    /**\n     * `LNGLAT` if rendering into a geospatial viewport, `CARTESIAN` otherwise\n     */\n    DEFAULT: -1,\n    /**\n     * Positions are interpreted as [longitude, latitude, elevation]\n     * longitude/latitude are in degrees, elevation is in meters.\n     * Dimensions are in meters.\n     */\n    LNGLAT: 1,\n    /**\n     * Positions are interpreted as [x, y, z] in meter offsets from the coordinate origin.\n     * Dimensions are in meters.\n     */\n    METER_OFFSETS: 2,\n    /**\n     * Positions are interpreted as [deltaLng, deltaLat, elevation] from the coordinate origin.\n     * deltaLng/deltaLat are in degrees, elevation is in meters.\n     * Dimensions are in meters.\n     */\n    LNGLAT_OFFSETS: 3,\n    /**\n     * Positions and dimensions are in the common units of the viewport.\n     */\n    CARTESIAN: 0\n};\n// Deprecated\n/* eslint-disable accessor-pairs */\nObject.defineProperty(COORDINATE_SYSTEM, 'IDENTITY', {\n    get: () => {\n        log.deprecated('COORDINATE_SYSTEM.IDENTITY', 'COORDINATE_SYSTEM.CARTESIAN')();\n        return 0;\n    }\n});\n/* eslint-enable accessor-pairs */\n/**\n * How coordinates are transformed from the world space into the common space.\n */\nexport const PROJECTION_MODE = {\n    /**\n     * Render geospatial data in Web Mercator projection\n     */\n    WEB_MERCATOR: 1,\n    /**\n     * Render geospatial data as a 3D globe\n     */\n    GLOBE: 2,\n    /**\n     * (Internal use only) Web Mercator projection at high zoom\n     */\n    WEB_MERCATOR_AUTO_OFFSET: 4,\n    /**\n     * No transformation\n     */\n    IDENTITY: 0\n};\nexport const UNIT = {\n    common: 0,\n    meters: 1,\n    pixels: 2\n};\nexport const EVENTS = {\n    click: { handler: 'onClick' },\n    panstart: { handler: 'onDragStart' },\n    panmove: { handler: 'onDrag' },\n    panend: { handler: 'onDragEnd' }\n};\n/**\n * @deprecated Use string constants directly\n */\nexport const OPERATION = {\n    DRAW: 'draw',\n    MASK: 'mask',\n    TERRAIN: 'terrain'\n};\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { COORDINATE_SYSTEM, PROJECTION_MODE, UNIT } from \"../../lib/constants.js\";\n// We are generating these from the js code in constants.js\nconst COORDINATE_SYSTEM_GLSL_CONSTANTS = Object.keys(COORDINATE_SYSTEM)\n    .map(key => `const int COORDINATE_SYSTEM_${key} = ${COORDINATE_SYSTEM[key]};`)\n    .join('');\nconst PROJECTION_MODE_GLSL_CONSTANTS = Object.keys(PROJECTION_MODE)\n    .map(key => `const int PROJECTION_MODE_${key} = ${PROJECTION_MODE[key]};`)\n    .join('');\nconst UNIT_GLSL_CONSTANTS = Object.keys(UNIT)\n    .map(key => `const int UNIT_${key.toUpperCase()} = ${UNIT[key]};`)\n    .join('');\nexport default `\\\n${COORDINATE_SYSTEM_GLSL_CONSTANTS}\n${PROJECTION_MODE_GLSL_CONSTANTS}\n${UNIT_GLSL_CONSTANTS}\nuniform int project_uCoordinateSystem;\nuniform int project_uProjectionMode;\nuniform float project_uScale;\nuniform bool project_uWrapLongitude;\nuniform vec3 project_uCommonUnitsPerMeter;\nuniform vec3 project_uCommonUnitsPerWorldUnit;\nuniform vec3 project_uCommonUnitsPerWorldUnit2;\nuniform vec4 project_uCenter;\nuniform mat4 project_uModelMatrix;\nuniform mat4 project_uViewProjectionMatrix;\nuniform vec2 project_uViewportSize;\nuniform float project_uDevicePixelRatio;\nuniform float project_uFocalDistance;\nuniform vec3 project_uCameraPosition;\nuniform vec3 project_uCoordinateOrigin;\nuniform vec3 project_uCommonOrigin;\nuniform bool project_uPseudoMeters;\nconst float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / (PI * 2.0);\nconst vec3 ZERO_64_LOW = vec3(0.0);\nconst float EARTH_RADIUS = 6370972.0;\nconst float GLOBE_RADIUS = 256.0;\nfloat project_size_at_latitude(float lat) {\nfloat y = clamp(lat, -89.9, 89.9);\nreturn 1.0 / cos(radians(y));\n}\nfloat project_size() {\nif (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR &&\nproject_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT &&\nproject_uPseudoMeters == false) {\nif (geometry.position.w == 0.0) {\nreturn project_size_at_latitude(geometry.worldPosition.y);\n}\nfloat y = geometry.position.y / TILE_SIZE * 2.0 - 1.0;\nfloat y2 = y * y;\nfloat y4 = y2 * y2;\nfloat y6 = y4 * y2;\nreturn 1.0 + 4.9348 * y2 + 4.0587 * y4 + 1.5642 * y6;\n}\nreturn 1.0;\n}\nfloat project_size_at_latitude(float meters, float lat) {\nreturn meters * project_uCommonUnitsPerMeter.z * project_size_at_latitude(lat);\n}\nfloat project_size(float meters) {\nreturn meters * project_uCommonUnitsPerMeter.z * project_size();\n}\nvec2 project_size(vec2 meters) {\nreturn meters * project_uCommonUnitsPerMeter.xy * project_size();\n}\nvec3 project_size(vec3 meters) {\nreturn meters * project_uCommonUnitsPerMeter * project_size();\n}\nvec4 project_size(vec4 meters) {\nreturn vec4(meters.xyz * project_uCommonUnitsPerMeter, meters.w);\n}\nmat3 project_get_orientation_matrix(vec3 up) {\nvec3 uz = normalize(up);\nvec3 ux = abs(uz.z) == 1.0 ? vec3(1.0, 0.0, 0.0) : normalize(vec3(uz.y, -uz.x, 0));\nvec3 uy = cross(uz, ux);\nreturn mat3(ux, uy, uz);\n}\nbool project_needs_rotation(vec3 commonPosition, out mat3 transform) {\nif (project_uProjectionMode == PROJECTION_MODE_GLOBE) {\ntransform = project_get_orientation_matrix(commonPosition);\nreturn true;\n}\nreturn false;\n}\nvec3 project_normal(vec3 vector) {\nvec4 normal_modelspace = project_uModelMatrix * vec4(vector, 0.0);\nvec3 n = normalize(normal_modelspace.xyz * project_uCommonUnitsPerMeter);\nmat3 rotation;\nif (project_needs_rotation(geometry.position.xyz, rotation)) {\nn = rotation * n;\n}\nreturn n;\n}\nvec4 project_offset_(vec4 offset) {\nfloat dy = offset.y;\nvec3 commonUnitsPerWorldUnit = project_uCommonUnitsPerWorldUnit + project_uCommonUnitsPerWorldUnit2 * dy;\nreturn vec4(offset.xyz * commonUnitsPerWorldUnit, offset.w);\n}\nvec2 project_mercator_(vec2 lnglat) {\nfloat x = lnglat.x;\nif (project_uWrapLongitude) {\nx = mod(x + 180., 360.0) - 180.;\n}\nfloat y = clamp(lnglat.y, -89.9, 89.9);\nreturn vec2(\nradians(x) + PI,\nPI + log(tan_fp32(PI * 0.25 + radians(y) * 0.5))\n) * WORLD_SCALE;\n}\nvec3 project_globe_(vec3 lnglatz) {\nfloat lambda = radians(lnglatz.x);\nfloat phi = radians(lnglatz.y);\nfloat cosPhi = cos(phi);\nfloat D = (lnglatz.z / EARTH_RADIUS + 1.0) * GLOBE_RADIUS;\nreturn vec3(\nsin(lambda) * cosPhi,\n-cos(lambda) * cosPhi,\nsin(phi)\n) * D;\n}\nvec4 project_position(vec4 position, vec3 position64Low) {\nvec4 position_world = project_uModelMatrix * position;\nif (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR) {\nif (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\nreturn vec4(\nproject_mercator_(position_world.xy),\nproject_size_at_latitude(position_world.z, position_world.y),\nposition_world.w\n);\n}\nif (project_uCoordinateSystem == COORDINATE_SYSTEM_CARTESIAN) {\nposition_world.xyz += project_uCoordinateOrigin;\n}\n}\nif (project_uProjectionMode == PROJECTION_MODE_GLOBE) {\nif (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\nreturn vec4(\nproject_globe_(position_world.xyz),\nposition_world.w\n);\n}\n}\nif (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {\nif (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\nif (abs(position_world.y - project_uCoordinateOrigin.y) > 0.25) {\nreturn vec4(\nproject_mercator_(position_world.xy) - project_uCommonOrigin.xy,\nproject_size(position_world.z),\nposition_world.w\n);\n}\n}\n}\nif (project_uProjectionMode == PROJECTION_MODE_IDENTITY ||\n(project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET &&\n(project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\nproject_uCoordinateSystem == COORDINATE_SYSTEM_CARTESIAN))) {\nposition_world.xyz -= project_uCoordinateOrigin;\n}\nreturn project_offset_(position_world) + project_offset_(project_uModelMatrix * vec4(position64Low, 0.0));\n}\nvec4 project_position(vec4 position) {\nreturn project_position(position, ZERO_64_LOW);\n}\nvec3 project_position(vec3 position, vec3 position64Low) {\nvec4 projected_position = project_position(vec4(position, 1.0), position64Low);\nreturn projected_position.xyz;\n}\nvec3 project_position(vec3 position) {\nvec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_LOW);\nreturn projected_position.xyz;\n}\nvec2 project_position(vec2 position) {\nvec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_LOW);\nreturn projected_position.xy;\n}\nvec4 project_common_position_to_clipspace(vec4 position, mat4 viewProjectionMatrix, vec4 center) {\nreturn viewProjectionMatrix * position + center;\n}\nvec4 project_common_position_to_clipspace(vec4 position) {\nreturn project_common_position_to_clipspace(position, project_uViewProjectionMatrix, project_uCenter);\n}\nvec2 project_pixel_size_to_clipspace(vec2 pixels) {\nvec2 offset = pixels / project_uViewportSize * project_uDevicePixelRatio * 2.0;\nreturn offset * project_uFocalDistance;\n}\nfloat project_size_to_pixel(float meters) {\nreturn project_size(meters) * project_uScale;\n}\nfloat project_size_to_pixel(float size, int unit) {\nif (unit == UNIT_METERS) return project_size_to_pixel(size);\nif (unit == UNIT_COMMON) return size * project_uScale;\nreturn size;\n}\nfloat project_pixel_size(float pixels) {\nreturn pixels / project_uScale;\n}\nvec2 project_pixel_size(vec2 pixels) {\nreturn pixels / project_uScale;\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable complexity, camelcase */\nimport { mat4, vec4 } from '@math.gl/core';\nimport { COORDINATE_SYSTEM, PROJECTION_MODE } from \"../../lib/constants.js\";\nimport memoize from \"../../utils/memoize.js\";\n// To quickly set a vector to zero\nconst ZERO_VECTOR = [0, 0, 0, 0];\n// 4x4 matrix that drops 4th component of vector\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\nconst getMemoizedViewportUniforms = memoize(calculateViewportUniforms);\nexport function getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN) {\n    if (coordinateOrigin.length < 3) {\n        coordinateOrigin = [coordinateOrigin[0], coordinateOrigin[1], 0];\n    }\n    let shaderCoordinateOrigin = coordinateOrigin;\n    let geospatialOrigin;\n    let offsetMode = true;\n    if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS) {\n        geospatialOrigin = coordinateOrigin;\n    }\n    else {\n        geospatialOrigin = viewport.isGeospatial\n            ? // @ts-expect-error longitude and latitude are not defined on the base Viewport, but is expected on geospatial viewports\n                [Math.fround(viewport.longitude), Math.fround(viewport.latitude), 0]\n            : null;\n    }\n    switch (viewport.projectionMode) {\n        case PROJECTION_MODE.WEB_MERCATOR:\n            if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n                coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {\n                geospatialOrigin = [0, 0, 0];\n                offsetMode = false;\n            }\n            break;\n        case PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET:\n            if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n                // viewport center in world space\n                // @ts-expect-error when using LNGLAT coordinates, we expect the viewport to be geospatial, in which case geospatialOrigin is defined\n                shaderCoordinateOrigin = geospatialOrigin;\n            }\n            else if (coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {\n                // viewport center in common space\n                shaderCoordinateOrigin = [\n                    Math.fround(viewport.center[0]),\n                    Math.fround(viewport.center[1]),\n                    0\n                ];\n                // Geospatial origin (wgs84) must match shaderCoordinateOrigin (common)\n                geospatialOrigin = viewport.unprojectPosition(shaderCoordinateOrigin);\n                shaderCoordinateOrigin[0] -= coordinateOrigin[0];\n                shaderCoordinateOrigin[1] -= coordinateOrigin[1];\n                shaderCoordinateOrigin[2] -= coordinateOrigin[2];\n            }\n            break;\n        case PROJECTION_MODE.IDENTITY:\n            shaderCoordinateOrigin = viewport.position.map(Math.fround);\n            shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;\n            break;\n        case PROJECTION_MODE.GLOBE:\n            offsetMode = false;\n            geospatialOrigin = null;\n            break;\n        default:\n            // Unknown projection mode\n            offsetMode = false;\n    }\n    return { geospatialOrigin, shaderCoordinateOrigin, offsetMode };\n}\n// The code that utilizes Matrix4 does the same calculation as their mat4 counterparts,\n// has lower performance but provides error checking.\nfunction calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin) {\n    const { viewMatrixUncentered, projectionMatrix } = viewport;\n    let { viewMatrix, viewProjectionMatrix } = viewport;\n    let projectionCenter = ZERO_VECTOR;\n    let originCommon = ZERO_VECTOR;\n    let cameraPosCommon = viewport.cameraPosition;\n    const { geospatialOrigin, shaderCoordinateOrigin, offsetMode } = getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin);\n    if (offsetMode) {\n        // Calculate transformed projectionCenter (using 64 bit precision JS)\n        // This is the key to offset mode precision\n        // (avoids doing this addition in 32 bit precision in GLSL)\n        // @ts-expect-error the 4th component is assigned below\n        originCommon = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);\n        cameraPosCommon = [\n            cameraPosCommon[0] - originCommon[0],\n            cameraPosCommon[1] - originCommon[1],\n            cameraPosCommon[2] - originCommon[2]\n        ];\n        originCommon[3] = 1;\n        // projectionCenter = new Matrix4(viewProjectionMatrix)\n        //   .transformVector([positionPixels[0], positionPixels[1], 0.0, 1.0]);\n        projectionCenter = vec4.transformMat4([], originCommon, viewProjectionMatrix);\n        // Always apply uncentered projection matrix if available (shader adds center)\n        viewMatrix = viewMatrixUncentered || viewMatrix;\n        // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n        // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)\n        //   .multiplyRight(VECTOR_TO_POINT_MATRIX);\n        viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n        viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n    }\n    return {\n        viewMatrix,\n        viewProjectionMatrix,\n        projectionCenter,\n        originCommon,\n        cameraPosCommon,\n        shaderCoordinateOrigin,\n        geospatialOrigin\n    };\n}\n/**\n * Returns uniforms for shaders based on current projection\n * includes: projection matrix suitable for shaders\n *\n * TODO - Ensure this works with any viewport, not just WebMercatorViewports\n *\n * @param {WebMercatorViewport} viewport -\n * @return {Float32Array} - 4x4 projection matrix that can be used in shaders\n */\nexport function getUniformsFromViewport({ viewport, devicePixelRatio = 1, modelMatrix = null, \n// Match Layer.defaultProps\ncoordinateSystem = COORDINATE_SYSTEM.DEFAULT, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN, autoWrapLongitude = false }) {\n    if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        coordinateSystem = viewport.isGeospatial\n            ? COORDINATE_SYSTEM.LNGLAT\n            : COORDINATE_SYSTEM.CARTESIAN;\n    }\n    const uniforms = getMemoizedViewportUniforms({\n        viewport,\n        devicePixelRatio,\n        coordinateSystem,\n        coordinateOrigin\n    });\n    uniforms.project_uWrapLongitude = autoWrapLongitude;\n    uniforms.project_uModelMatrix = modelMatrix || IDENTITY_MATRIX;\n    return uniforms;\n}\nfunction calculateViewportUniforms({ viewport, devicePixelRatio, coordinateSystem, coordinateOrigin }) {\n    const { projectionCenter, viewProjectionMatrix, originCommon, cameraPosCommon, shaderCoordinateOrigin, geospatialOrigin } = calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin);\n    // Calculate projection pixels per unit\n    const distanceScales = viewport.getDistanceScales();\n    const viewportSize = [\n        viewport.width * devicePixelRatio,\n        viewport.height * devicePixelRatio\n    ];\n    // Distance at which screen pixels are projected.\n    // Used to scale sizes in clipspace to match screen pixels.\n    // When using Viewport class's default projection matrix, this yields 1 for orthographic\n    // and `viewport.focalDistance` for perspective views\n    const focalDistance = vec4.transformMat4([], [0, 0, -viewport.focalDistance, 1], viewport.projectionMatrix)[3] || 1;\n    const uniforms = {\n        // Projection mode values\n        project_uCoordinateSystem: coordinateSystem,\n        project_uProjectionMode: viewport.projectionMode,\n        project_uCoordinateOrigin: shaderCoordinateOrigin,\n        project_uCommonOrigin: originCommon.slice(0, 3),\n        project_uCenter: projectionCenter,\n        // Backward compatibility\n        // TODO: remove in v9\n        // @ts-expect-error _pseudoMeters is only defined on WebMercator viewport\n        project_uPseudoMeters: Boolean(viewport._pseudoMeters),\n        // Screen size\n        project_uViewportSize: viewportSize,\n        project_uDevicePixelRatio: devicePixelRatio,\n        project_uFocalDistance: focalDistance,\n        project_uCommonUnitsPerMeter: distanceScales.unitsPerMeter,\n        project_uCommonUnitsPerWorldUnit: distanceScales.unitsPerMeter,\n        project_uCommonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,\n        project_uScale: viewport.scale, // This is the mercator scale (2 ** zoom)\n        project_uWrapLongitude: false,\n        project_uViewProjectionMatrix: viewProjectionMatrix,\n        project_uModelMatrix: IDENTITY_MATRIX,\n        // This is for lighting calculations\n        project_uCameraPosition: cameraPosCommon\n    };\n    if (geospatialOrigin) {\n        // Get high-precision DistanceScales from geospatial viewport\n        // TODO: stricter types in Viewport classes\n        const distanceScalesAtOrigin = viewport.getDistanceScales(geospatialOrigin);\n        switch (coordinateSystem) {\n            case COORDINATE_SYSTEM.METER_OFFSETS:\n                uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;\n                uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;\n                break;\n            case COORDINATE_SYSTEM.LNGLAT:\n            case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n                // @ts-expect-error _pseudoMeters only exists on WebMercatorView\n                if (!viewport._pseudoMeters) {\n                    uniforms.project_uCommonUnitsPerMeter = distanceScalesAtOrigin.unitsPerMeter;\n                }\n                uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;\n                uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;\n                break;\n            // a.k.a \"preprojected\" positions\n            case COORDINATE_SYSTEM.CARTESIAN:\n                uniforms.project_uCommonUnitsPerWorldUnit = [1, 1, distanceScalesAtOrigin.unitsPerMeter[2]];\n                uniforms.project_uCommonUnitsPerWorldUnit2 = [\n                    0,\n                    0,\n                    distanceScalesAtOrigin.unitsPerMeter2[2]\n                ];\n                break;\n            default:\n                break;\n        }\n    }\n    return uniforms;\n}\n", "function isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (Array.isArray(a)) {\n        // Special treatment for arrays: compare 1-level deep\n        // This is to support equality of matrix/coordinate props\n        const len = a.length;\n        if (!b || b.length !== len) {\n            return false;\n        }\n        for (let i = 0; i < len; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Speed up consecutive function calls by caching the result of calls with identical input\n * https://en.wikipedia.org/wiki/Memoization\n * @param {function} compute - the function to be memoized\n */\nexport default function memoize(compute) {\n    let cachedArgs = {};\n    let cachedResult;\n    return (args) => {\n        for (const key in args) {\n            if (!isEqual(args[key], cachedArgs[key])) {\n                cachedResult = compute(args);\n                cachedArgs = args;\n                break;\n            }\n        }\n        return cachedResult;\n    };\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport project from \"../project/project.js\";\nconst vs = `\nvec4 project_position_to_clipspace(\n  vec3 position, vec3 position64Low, vec3 offset, out vec4 commonPosition\n) {\n  vec3 projectedPosition = project_position(position, position64Low);\n  mat3 rotation;\n  if (project_needs_rotation(projectedPosition, rotation)) {\n    // offset is specified as ENU\n    // when in globe projection, rotate offset so that the ground alighs with the surface of the globe\n    offset = rotation * offset;\n  }\n  commonPosition = vec4(projectedPosition + offset, 1.0);\n  return project_common_position_to_clipspace(commonPosition);\n}\n\nvec4 project_position_to_clipspace(\n  vec3 position, vec3 position64Low, vec3 offset\n) {\n  vec4 commonPosition;\n  return project_position_to_clipspace(position, position64Low, offset, commonPosition);\n}\n`;\nexport default {\n    name: 'project32',\n    dependencies: [project],\n    vs\n};\n", "// Copyright (c) 2015-2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { COORDINATE_SYSTEM, PROJECTION_MODE } from \"../../lib/constants.js\";\nimport project from \"../project/project.js\";\nimport { Vector3, Matrix4 } from '@math.gl/core';\nimport memoize from \"../../utils/memoize.js\";\nimport { pixelsToWorld } from '@math.gl/web-mercator';\nconst vs = `\nconst int max_lights = 2;\nuniform mat4 shadow_uViewProjectionMatrices[max_lights];\nuniform vec4 shadow_uProjectCenters[max_lights];\nuniform bool shadow_uDrawShadowMap;\nuniform bool shadow_uUseShadowMap;\nuniform int shadow_uLightId;\nuniform float shadow_uLightCount;\n\nout vec3 shadow_vPosition[max_lights];\n\nvec4 shadow_setVertexPosition(vec4 position_commonspace) {\n  if (shadow_uDrawShadowMap) {\n    return project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[shadow_uLightId], shadow_uProjectCenters[shadow_uLightId]);\n  }\n  if (shadow_uUseShadowMap) {\n    for (int i = 0; i < max_lights; i++) {\n      if(i < int(shadow_uLightCount)) {\n        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[i], shadow_uProjectCenters[i]);\n        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;\n      }\n    }\n  }\n  return gl_Position;\n}\n`;\nconst fs = `\nconst int max_lights = 2;\nuniform bool shadow_uDrawShadowMap;\nuniform bool shadow_uUseShadowMap;\nuniform sampler2D shadow_uShadowMap0;\nuniform sampler2D shadow_uShadowMap1;\nuniform vec4 shadow_uColor;\nuniform float shadow_uLightCount;\n\nin vec3 shadow_vPosition[max_lights];\n\nconst vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);\nconst vec4 bitUnpackShift = 1.0 / bitPackShift;\nconst vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);\n\nfloat shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {\n  vec4 rgbaDepth = texture(shadowMap, position.xy);\n\n  float z = dot(rgbaDepth, bitUnpackShift);\n  return smoothstep(0.001, 0.01, position.z - z);\n}\n\nvec4 shadow_filterShadowColor(vec4 color) {\n  if (shadow_uDrawShadowMap) {\n    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);\n    rgbaDepth -= rgbaDepth.gbaa * bitMask;\n    return rgbaDepth;\n  }\n  if (shadow_uUseShadowMap) {\n    float shadowAlpha = 0.0;\n    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);\n    if(shadow_uLightCount > 1.0) {\n      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);\n    }\n    shadowAlpha *= shadow_uColor.a / shadow_uLightCount;\n    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);\n\n    return vec4(\n      mix(color.rgb, shadow_uColor.rgb, shadowAlpha / blendedAlpha),\n      blendedAlpha\n    );\n  }\n  return color;\n}\n`;\nconst getMemoizedViewportCenterPosition = memoize(getViewportCenterPosition);\nconst getMemoizedViewProjectionMatrices = memoize(getViewProjectionMatrices);\nconst DEFAULT_SHADOW_COLOR = [0, 0, 0, 1.0];\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nfunction screenToCommonSpace(xyz, pixelUnprojectionMatrix) {\n    const [x, y, z] = xyz;\n    const coord = pixelsToWorld([x, y, z], pixelUnprojectionMatrix);\n    if (Number.isFinite(z)) {\n        return coord;\n    }\n    return [coord[0], coord[1], 0];\n}\nfunction getViewportCenterPosition({ viewport, center }) {\n    return new Matrix4(viewport.viewProjectionMatrix).invert().transform(center);\n}\nfunction getViewProjectionMatrices({ viewport, shadowMatrices }) {\n    const projectionMatrices = [];\n    const pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;\n    const farZ = viewport.isGeospatial ? undefined : 1;\n    const corners = [\n        [0, 0, farZ], // top left ground\n        [viewport.width, 0, farZ], // top right ground\n        [0, viewport.height, farZ], // bottom left ground\n        [viewport.width, viewport.height, farZ], // bottom right ground\n        [0, 0, -1], // top left near\n        [viewport.width, 0, -1], // top right near\n        [0, viewport.height, -1], // bottom left near\n        [viewport.width, viewport.height, -1] // bottom right near\n    ].map(pixel => \n    // @ts-expect-error z may be undefined\n    screenToCommonSpace(pixel, pixelUnprojectionMatrix));\n    for (const shadowMatrix of shadowMatrices) {\n        const viewMatrix = shadowMatrix.clone().translate(new Vector3(viewport.center).negate());\n        const positions = corners.map(corner => viewMatrix.transform(corner));\n        const projectionMatrix = new Matrix4().ortho({\n            left: Math.min(...positions.map(position => position[0])),\n            right: Math.max(...positions.map(position => position[0])),\n            bottom: Math.min(...positions.map(position => position[1])),\n            top: Math.max(...positions.map(position => position[1])),\n            near: Math.min(...positions.map(position => -position[2])),\n            far: Math.max(...positions.map(position => -position[2]))\n        });\n        projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));\n    }\n    return projectionMatrices;\n}\n/* eslint-disable camelcase */\n// eslint-disable-next-line complexity\nfunction createShadowUniforms(opts, context) {\n    const { shadowEnabled = true } = opts;\n    if (!shadowEnabled || !opts.shadowMatrices || !opts.shadowMatrices.length) {\n        return {\n            shadow_uDrawShadowMap: false,\n            shadow_uUseShadowMap: false,\n            shadow_uShadowMap0: opts.dummyShadowMap,\n            shadow_uShadowMap1: opts.dummyShadowMap\n        };\n    }\n    const uniforms = {\n        shadow_uDrawShadowMap: Boolean(opts.drawToShadowMap),\n        shadow_uUseShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,\n        shadow_uColor: opts.shadowColor || DEFAULT_SHADOW_COLOR,\n        shadow_uLightId: opts.shadowLightId || 0,\n        shadow_uLightCount: opts.shadowMatrices.length\n    };\n    const center = getMemoizedViewportCenterPosition({\n        viewport: opts.viewport,\n        center: context.project_uCenter\n    });\n    const projectCenters = [];\n    const viewProjectionMatrices = getMemoizedViewProjectionMatrices({\n        shadowMatrices: opts.shadowMatrices,\n        viewport: opts.viewport\n    }).slice();\n    for (let i = 0; i < opts.shadowMatrices.length; i++) {\n        const viewProjectionMatrix = viewProjectionMatrices[i];\n        const viewProjectionMatrixCentered = viewProjectionMatrix\n            .clone()\n            .translate(new Vector3(opts.viewport.center).negate());\n        if (context.project_uCoordinateSystem === COORDINATE_SYSTEM.LNGLAT &&\n            context.project_uProjectionMode === PROJECTION_MODE.WEB_MERCATOR) {\n            viewProjectionMatrices[i] = viewProjectionMatrixCentered;\n            projectCenters[i] = center;\n        }\n        else {\n            viewProjectionMatrices[i] = viewProjectionMatrix\n                .clone()\n                .multiplyRight(VECTOR_TO_POINT_MATRIX);\n            projectCenters[i] = viewProjectionMatrixCentered.transform(center);\n        }\n    }\n    for (let i = 0; i < viewProjectionMatrices.length; i++) {\n        uniforms[`shadow_uViewProjectionMatrices[${i}]`] = viewProjectionMatrices[i];\n        uniforms[`shadow_uProjectCenters[${i}]`] = projectCenters[i];\n    }\n    for (let i = 0; i < 2; i++) {\n        uniforms[`shadow_uShadowMap${i}`] =\n            (opts.shadowMaps && opts.shadowMaps[i]) || opts.dummyShadowMap;\n    }\n    return uniforms;\n}\nexport default {\n    name: 'shadow',\n    dependencies: [project],\n    vs,\n    fs,\n    inject: {\n        'vs:DECKGL_FILTER_GL_POSITION': `\n    position = shadow_setVertexPosition(geometry.position);\n    `,\n        'fs:DECKGL_FILTER_COLOR': `\n    color = shadow_filterShadowColor(color);\n    `\n    },\n    getUniforms: (opts = {}, context = {}) => {\n        if ('viewport' in opts &&\n            (opts.drawToShadowMap || (opts.shadowMaps && opts.shadowMaps.length > 0))) {\n            // @ts-expect-error if opts.viewport is defined, context should contain the project module's uniforms\n            return createShadowUniforms(opts, context);\n        }\n        return {};\n    }\n};\n", "import { picking } from '@luma.gl/shadertools';\nexport default {\n    ...picking,\n    defaultUniforms: { ...picking.defaultUniforms, useFloatColors: false },\n    inject: {\n        'vs:DECKGL_FILTER_GL_POSITION': `\n    // for picking depth values\n    picking_setPickingAttribute(position.z / position.w);\n  `,\n        'vs:DECKGL_FILTER_COLOR': `\n  picking_setPickingColor(geometry.pickingColor);\n  `,\n        'fs:DECKGL_FILTER_COLOR': {\n            order: 99,\n            injection: `\n  // use highlight color if this fragment belongs to the selected object.\n  color = picking_filterHighlightColor(color);\n\n  // use picking color if rendering to picking FBO.\n  color = picking_filterPickingColor(color);\n    `\n        }\n    }\n};\n", "const DEFAULT_LIGHT_COLOR = [255, 255, 255];\nconst DEFAULT_LIGHT_INTENSITY = 1.0;\nlet idCount = 0;\nexport class AmbientLight {\n    constructor(props = {}) {\n        this.type = 'ambient';\n        const { color = DEFAULT_LIGHT_COLOR } = props;\n        const { intensity = DEFAULT_LIGHT_INTENSITY } = props;\n        this.id = props.id || `ambient-${idCount++}`;\n        this.color = color;\n        this.intensity = intensity;\n    }\n}\n", "import { Vector3 } from '@math.gl/core';\nconst DEFAULT_LIGHT_COLOR = [255, 255, 255];\nconst DEFAULT_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_LIGHT_DIRECTION = [0.0, 0.0, -1.0];\nlet idCount = 0;\nexport class DirectionalLight {\n    constructor(props = {}) {\n        this.type = 'directional';\n        const { color = DEFAULT_LIGHT_COLOR } = props;\n        const { intensity = DEFAULT_LIGHT_INTENSITY } = props;\n        const { direction = DEFAULT_LIGHT_DIRECTION } = props;\n        const { _shadow = false } = props;\n        this.id = props.id || `directional-${idCount++}`;\n        this.color = color;\n        this.intensity = intensity;\n        this.type = 'directional';\n        this.direction = new Vector3(direction).normalize().toArray();\n        this.shadow = _shadow;\n    }\n    getProjectedLight(opts) {\n        return this;\n    }\n}\n", "import { AmbientLight } from \"./ambient-light.js\";\nimport { DirectionalLight } from \"./directional-light.js\";\nimport { Matrix4, Vector3 } from '@math.gl/core';\nimport ShadowPass from \"../../passes/shadow-pass.js\";\nimport shadow from \"../../shaderlib/shadow/shadow.js\";\nconst DEFAULT_AMBIENT_LIGHT_PROPS = { color: [255, 255, 255], intensity: 1.0 };\nconst DEFAULT_DIRECTIONAL_LIGHT_PROPS = [\n    {\n        color: [255, 255, 255],\n        intensity: 1.0,\n        direction: [-1, 3, -1]\n    },\n    {\n        color: [255, 255, 255],\n        intensity: 0.9,\n        direction: [1, -8, -2.5]\n    }\n];\nconst DEFAULT_SHADOW_COLOR = [0, 0, 0, 200 / 255];\n// Class to manage ambient, point and directional light sources in deck\nexport default class LightingEffect {\n    constructor(props = {}) {\n        this.id = 'lighting-effect';\n        this.shadowColor = DEFAULT_SHADOW_COLOR;\n        this.shadow = false;\n        this.ambientLight = null;\n        this.directionalLights = [];\n        this.pointLights = [];\n        this.shadowPasses = [];\n        this.shadowMaps = [];\n        this.dummyShadowMap = null;\n        this.setProps(props);\n    }\n    setup(context) {\n        this.context = context;\n        const { device, deck } = context;\n        if (this.shadow && !this.dummyShadowMap) {\n            this._createShadowPasses(device);\n            deck._addDefaultShaderModule(shadow);\n            this.dummyShadowMap = device.createTexture({\n                width: 1,\n                height: 1\n            });\n        }\n    }\n    setProps(props) {\n        this.ambientLight = null;\n        this.directionalLights = [];\n        this.pointLights = [];\n        for (const key in props) {\n            const lightSource = props[key];\n            switch (lightSource.type) {\n                case 'ambient':\n                    this.ambientLight = lightSource;\n                    break;\n                case 'directional':\n                    this.directionalLights.push(lightSource);\n                    break;\n                case 'point':\n                    this.pointLights.push(lightSource);\n                    break;\n                default:\n            }\n        }\n        this._applyDefaultLights();\n        this.shadow = this.directionalLights.some(light => light.shadow);\n        if (this.context) {\n            // Create resources if necessary\n            this.setup(this.context);\n        }\n        this.props = props;\n    }\n    preRender({ layers, layerFilter, viewports, onViewportActive, views }) {\n        if (!this.shadow)\n            return;\n        // create light matrix every frame to make sure always updated from light source\n        this.shadowMatrices = this._calculateMatrices();\n        for (let i = 0; i < this.shadowPasses.length; i++) {\n            const shadowPass = this.shadowPasses[i];\n            shadowPass.render({\n                layers,\n                layerFilter,\n                viewports,\n                onViewportActive,\n                views,\n                moduleParameters: {\n                    shadowLightId: i,\n                    dummyShadowMap: this.dummyShadowMap,\n                    shadowMatrices: this.shadowMatrices\n                }\n            });\n        }\n    }\n    getModuleParameters(layer) {\n        const parameters = this.shadow\n            ? {\n                shadowMaps: this.shadowMaps,\n                dummyShadowMap: this.dummyShadowMap,\n                shadowColor: this.shadowColor,\n                shadowMatrices: this.shadowMatrices\n            }\n            : {};\n        // when not rendering to screen, turn off lighting by adding empty light source object\n        // lights shader module relies on the `lightSources` to turn on/off lighting\n        parameters.lightSources = {\n            ambientLight: this.ambientLight,\n            directionalLights: this.directionalLights.map(directionalLight => directionalLight.getProjectedLight({ layer })),\n            pointLights: this.pointLights.map(pointLight => pointLight.getProjectedLight({ layer }))\n        };\n        return parameters;\n    }\n    cleanup(context) {\n        for (const shadowPass of this.shadowPasses) {\n            shadowPass.delete();\n        }\n        this.shadowPasses.length = 0;\n        this.shadowMaps.length = 0;\n        if (this.dummyShadowMap) {\n            this.dummyShadowMap.destroy();\n            this.dummyShadowMap = null;\n            context.deck._removeDefaultShaderModule(shadow);\n        }\n    }\n    _calculateMatrices() {\n        const lightMatrices = [];\n        for (const light of this.directionalLights) {\n            const viewMatrix = new Matrix4().lookAt({\n                eye: new Vector3(light.direction).negate()\n            });\n            lightMatrices.push(viewMatrix);\n        }\n        return lightMatrices;\n    }\n    _createShadowPasses(device) {\n        for (let i = 0; i < this.directionalLights.length; i++) {\n            const shadowPass = new ShadowPass(device);\n            this.shadowPasses[i] = shadowPass;\n            this.shadowMaps[i] = shadowPass.shadowMap;\n        }\n    }\n    _applyDefaultLights() {\n        const { ambientLight, pointLights, directionalLights } = this;\n        if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {\n            this.ambientLight = new AmbientLight(DEFAULT_AMBIENT_LIGHT_PROPS);\n            this.directionalLights.push(new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]), new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1]));\n        }\n    }\n}\n", "/**\n * Base class for passes\n * @todo v9 - should the luma.gl RenderPass be owned by this class?\n * Currently owned by subclasses\n */\nexport default class Pass {\n    /** Create a new Pass instance */\n    constructor(device, props = { id: 'pass' }) {\n        const { id } = props;\n        this.id = id; // id of this pass\n        this.device = device;\n        this.props = { ...props };\n    }\n    setProps(props) {\n        Object.assign(this.props, props);\n    }\n    render(params) { } // eslint-disable-line @typescript-eslint/no-empty-function\n    cleanup() { } // eslint-disable-line @typescript-eslint/no-empty-function\n}\n", "import Pass from \"./pass.js\";\n/** A Pass that renders all layers */\nexport default class LayersPass extends Pass {\n    constructor() {\n        super(...arguments);\n        this._lastRenderIndex = -1;\n    }\n    render(options) {\n        // @ts-expect-error TODO - assuming WebGL context\n        const [width, height] = this.device.canvasContext.getDrawingBufferSize();\n        // Explicitly specify clearColor and clearDepth, overriding render pass defaults.\n        const clearCanvas = options.clearCanvas ?? true;\n        const clearColor = options.clearColor ?? (clearCanvas ? [0, 0, 0, 0] : false);\n        const clearDepth = clearCanvas ? 1 : false;\n        const colorMask = options.colorMask ?? 0xf;\n        const parameters = { viewport: [0, 0, width, height] };\n        if (options.colorMask) {\n            parameters.colorMask = colorMask;\n        }\n        if (options.scissorRect) {\n            parameters.scissorRect = options.scissorRect;\n        }\n        const renderPass = this.device.beginRenderPass({\n            framebuffer: options.target,\n            parameters,\n            clearColor,\n            clearDepth\n        });\n        try {\n            return this._drawLayers(renderPass, options);\n        }\n        finally {\n            renderPass.end();\n        }\n    }\n    /** Draw a list of layers in a list of viewports */\n    _drawLayers(renderPass, options) {\n        const { target, moduleParameters, viewports, views, onViewportActive, clearStack = true } = options;\n        options.pass = options.pass || 'unknown';\n        if (clearStack) {\n            this._lastRenderIndex = -1;\n        }\n        const renderStats = [];\n        for (const viewport of viewports) {\n            const view = views && views[viewport.id];\n            // Update context to point to this viewport\n            onViewportActive?.(viewport);\n            const drawLayerParams = this._getDrawLayerParams(viewport, options);\n            // render this viewport\n            const subViewports = viewport.subViewports || [viewport];\n            for (const subViewport of subViewports) {\n                const stats = this._drawLayersInViewport(renderPass, {\n                    target,\n                    moduleParameters,\n                    viewport: subViewport,\n                    view,\n                    pass: options.pass,\n                    layers: options.layers\n                }, drawLayerParams);\n                renderStats.push(stats);\n            }\n        }\n        return renderStats;\n    }\n    // When a viewport contains multiple subviewports (e.g. repeated web mercator map),\n    // this is only done once for the parent viewport\n    /* Resolve the parameters needed to draw each layer */\n    _getDrawLayerParams(viewport, { layers, pass, isPicking = false, layerFilter, cullRect, effects, moduleParameters }, \n    /** Internal flag, true if only used to determine whether each layer should be drawn */\n    evaluateShouldDrawOnly = false) {\n        const drawLayerParams = [];\n        const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);\n        const drawContext = {\n            layer: layers[0],\n            viewport,\n            isPicking,\n            renderPass: pass,\n            cullRect\n        };\n        const layerFilterCache = {};\n        for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n            const layer = layers[layerIndex];\n            // Check if we should draw layer\n            const shouldDrawLayer = this._shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache);\n            const layerParam = {\n                shouldDrawLayer\n            };\n            if (shouldDrawLayer && !evaluateShouldDrawOnly) {\n                // This is the \"logical\" index for ordering this layer in the stack\n                // used to calculate polygon offsets\n                // It can be the same as another layer\n                layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n                layerParam.moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);\n                layerParam.layerParameters = {\n                    ...layer.context.deck?.props.parameters,\n                    ...this.getLayerParameters(layer, layerIndex, viewport)\n                };\n            }\n            drawLayerParams[layerIndex] = layerParam;\n        }\n        return drawLayerParams;\n    }\n    // Draws a list of layers in one viewport\n    // TODO - when picking we could completely skip rendering viewports that dont\n    // intersect with the picking rect\n    /* eslint-disable max-depth, max-statements */\n    _drawLayersInViewport(renderPass, { layers, moduleParameters: globalModuleParameters, pass, target, viewport, view }, drawLayerParams) {\n        const glViewport = getGLViewport(this.device, {\n            moduleParameters: globalModuleParameters,\n            target,\n            viewport\n        });\n        // TODO v9 - remove WebGL specific logic\n        if (view && view.props.clear) {\n            const clearOpts = view.props.clear === true ? { color: true, depth: true } : view.props.clear;\n            this.device.withParametersWebGL({\n                scissorTest: true,\n                scissor: glViewport\n            }, () => this.device.clearWebGL(clearOpts));\n        }\n        // render layers in normal colors\n        const renderStatus = {\n            totalCount: layers.length,\n            visibleCount: 0,\n            compositeCount: 0,\n            pickableCount: 0\n        };\n        renderPass.setParameters({ viewport: glViewport });\n        // render layers in normal colors\n        for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n            const layer = layers[layerIndex];\n            const { shouldDrawLayer, layerRenderIndex, moduleParameters, layerParameters } = drawLayerParams[layerIndex];\n            // Calculate stats\n            if (shouldDrawLayer && layer.props.pickable) {\n                renderStatus.pickableCount++;\n            }\n            if (layer.isComposite) {\n                renderStatus.compositeCount++;\n            }\n            else if (shouldDrawLayer) {\n                // Draw the layer\n                renderStatus.visibleCount++;\n                this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);\n                // overwrite layer.context.viewport with the sub viewport\n                moduleParameters.viewport = viewport;\n                // TODO v9 - we are sending renderPass both as a parameter and through the context.\n                // Long-term, it is likely better not to have user defined layer methods have to access\n                // the \"global\" layer context.\n                layer.context.renderPass = renderPass;\n                try {\n                    layer._drawLayer({\n                        renderPass,\n                        moduleParameters,\n                        uniforms: { layerIndex: layerRenderIndex },\n                        parameters: layerParameters\n                    });\n                }\n                catch (err) {\n                    layer.raiseError(err, `drawing ${layer} to ${pass}`);\n                }\n            }\n        }\n        return renderStatus;\n    }\n    /* eslint-enable max-depth, max-statements */\n    /* Methods for subclass overrides */\n    shouldDrawLayer(layer) {\n        return true;\n    }\n    getModuleParameters(layer, effects) {\n        return null;\n    }\n    getLayerParameters(layer, layerIndex, viewport) {\n        return layer.props.parameters;\n    }\n    /* Private */\n    _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {\n        const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);\n        if (!shouldDrawLayer) {\n            return false;\n        }\n        drawContext.layer = layer;\n        let parent = layer.parent;\n        while (parent) {\n            // @ts-ignore\n            if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n                return false;\n            }\n            drawContext.layer = parent;\n            parent = parent.parent;\n        }\n        if (layerFilter) {\n            const rootLayerId = drawContext.layer.id;\n            if (!(rootLayerId in layerFilterCache)) {\n                layerFilterCache[rootLayerId] = layerFilter(drawContext);\n            }\n            if (!layerFilterCache[rootLayerId]) {\n                return false;\n            }\n        }\n        // If a layer is drawn, update its viewportChanged flag\n        layer.activateViewport(drawContext.viewport);\n        return true;\n    }\n    _getModuleParameters(layer, effects, pass, overrides) {\n        // @ts-expect-error TODO - assuming WebGL context\n        const devicePixelRatio = this.device.canvasContext.cssToDeviceRatio();\n        const moduleParameters = Object.assign(Object.create(layer.internalState?.propsInTransition || layer.props), {\n            autoWrapLongitude: layer.wrapLongitude,\n            viewport: layer.context.viewport,\n            mousePosition: layer.context.mousePosition,\n            picking: {\n                isActive: 0\n            },\n            devicePixelRatio\n        });\n        if (effects) {\n            for (const effect of effects) {\n                Object.assign(moduleParameters, effect.getModuleParameters?.(layer));\n            }\n        }\n        return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n    }\n}\n// If the _index prop is defined, return a layer index that's relative to its parent\n// Otherwise return the index of the layer among all rendered layers\n// This is done recursively, i.e. if the user overrides a layer's default index,\n// all its descendants will be resolved relative to that index.\n// This implementation assumes that parent layers always appear before its children\n// which is true if the layer array comes from the LayerManager\nexport function layerIndexResolver(startIndex = 0, layerIndices = {}) {\n    const resolvers = {};\n    const resolveLayerIndex = (layer, isDrawn) => {\n        const indexOverride = layer.props._offset;\n        const layerId = layer.id;\n        const parentId = layer.parent && layer.parent.id;\n        let index;\n        if (parentId && !(parentId in layerIndices)) {\n            // Populate layerIndices with the parent layer's index\n            resolveLayerIndex(layer.parent, false);\n        }\n        if (parentId in resolvers) {\n            const resolver = (resolvers[parentId] =\n                resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices));\n            index = resolver(layer, isDrawn);\n            resolvers[layerId] = resolver;\n        }\n        else if (Number.isFinite(indexOverride)) {\n            index = indexOverride + (layerIndices[parentId] || 0);\n            // Mark layer as needing its own resolver\n            // We don't actually create it until it's used for the first time\n            resolvers[layerId] = null;\n        }\n        else {\n            index = startIndex;\n        }\n        if (isDrawn && index >= startIndex) {\n            startIndex = index + 1;\n        }\n        layerIndices[layerId] = index;\n        return index;\n    };\n    return resolveLayerIndex;\n}\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(device, { moduleParameters, target, viewport }) {\n    const pixelRatio = (moduleParameters && moduleParameters.devicePixelRatio) ||\n        // @ts-expect-error TODO - assuming WebGL context\n        device.canvasContext.cssToDeviceRatio();\n    // Default framebuffer is used when writing to canvas\n    // @ts-expect-error TODO - assuming WebGL context\n    const [, drawingBufferHeight] = device.canvasContext.getDrawingBufferSize();\n    const height = target ? target.height : drawingBufferHeight;\n    // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n    const dimensions = viewport;\n    return [\n        dimensions.x * pixelRatio,\n        height - (dimensions.y + dimensions.height) * pixelRatio,\n        dimensions.width * pixelRatio,\n        dimensions.height * pixelRatio\n    ];\n}\n", "import LayersPass from \"./layers-pass.js\";\nexport default class ShadowPass extends LayersPass {\n    constructor(device, props) {\n        super(device, props);\n        // The shadowMap texture\n        this.shadowMap = device.createTexture({\n            width: 1,\n            height: 1,\n            sampler: {\n                minFilter: 'linear',\n                magFilter: 'linear',\n                addressModeU: 'clamp-to-edge',\n                addressModeV: 'clamp-to-edge'\n            }\n        });\n        // @ts-ignore\n        this.depthBuffer = device.createTexture({\n            format: 'depth16unorm',\n            width: 1,\n            height: 1,\n            mipmaps: false,\n            // TODO fix getWebGLTextureParameters() in luma to avoid passing deprecated parameters\n            dataFormat: 6402, // gl.DEPTH_COMPONENT\n            type: 5125 // gl.UNSIGNED_INT\n        });\n        this.fbo = device.createFramebuffer({\n            id: 'shadowmap',\n            width: 1,\n            height: 1,\n            colorAttachments: [this.shadowMap],\n            // Depth attachment has to be specified for depth test to work\n            depthStencilAttachment: this.depthBuffer\n        });\n    }\n    render(params) {\n        const target = this.fbo;\n        // @ts-expect-error TODO - assuming WebGL context\n        const pixelRatio = this.device.canvasContext.cssToDeviceRatio();\n        const viewport = params.viewports[0];\n        const width = viewport.width * pixelRatio;\n        const height = viewport.height * pixelRatio;\n        const clearColor = [1, 1, 1, 1];\n        if (width !== target.width || height !== target.height) {\n            target.resize({ width, height });\n        }\n        super.render({ ...params, clearColor, target, pass: 'shadow' });\n    }\n    getLayerParameters(layer, layerIndex, viewport) {\n        return { ...layer.props.parameters, blend: false, depthRange: [0, 1], depthTest: true };\n    }\n    shouldDrawLayer(layer) {\n        return layer.props.shadowEnabled !== false;\n    }\n    getModuleParameters() {\n        return {\n            drawToShadowMap: true\n        };\n    }\n    delete() {\n        if (this.fbo) {\n            this.fbo.destroy();\n            this.fbo = null;\n        }\n        if (this.shadowMap) {\n            this.shadowMap.destroy();\n            this.shadowMap = null;\n        }\n        if (this.depthBuffer) {\n            this.depthBuffer.destroy();\n            this.depthBuffer = null;\n        }\n    }\n}\n", "export class TypedArrayManager {\n    constructor(options = {}) {\n        this._pool = [];\n        this.opts = { overAlloc: 2, poolSize: 100 };\n        this.setOptions(options);\n    }\n    setOptions(options) {\n        Object.assign(this.opts, options);\n    }\n    allocate(typedArray, count, { size = 1, type, padding = 0, copy = false, initialize = false, maxCount }) {\n        const Type = type || (typedArray && typedArray.constructor) || Float32Array;\n        const newSize = count * size + padding;\n        if (ArrayBuffer.isView(typedArray)) {\n            if (newSize <= typedArray.length) {\n                return typedArray;\n            }\n            if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n                return new Type(typedArray.buffer, 0, newSize);\n            }\n        }\n        let maxSize = Infinity;\n        if (maxCount) {\n            maxSize = maxCount * size + padding;\n        }\n        const newArray = this._allocate(Type, newSize, initialize, maxSize);\n        if (typedArray && copy) {\n            newArray.set(typedArray);\n        }\n        else if (!initialize) {\n            // Hack - always initialize the first 4 elements. NaNs crash the Attribute validation\n            newArray.fill(0, 0, 4);\n        }\n        this._release(typedArray);\n        return newArray;\n    }\n    release(typedArray) {\n        this._release(typedArray);\n    }\n    _allocate(Type, size, initialize, maxSize) {\n        // Allocate at least one element to ensure a valid buffer\n        let sizeToAllocate = Math.max(Math.ceil(size * this.opts.overAlloc), 1);\n        // Don't over allocate after certain specified number of elements\n        if (sizeToAllocate > maxSize) {\n            sizeToAllocate = maxSize;\n        }\n        // Check if available in pool\n        const pool = this._pool;\n        const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;\n        const i = pool.findIndex(b => b.byteLength >= byteLength);\n        if (i >= 0) {\n            // Create a new array using an existing buffer\n            const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);\n            if (initialize) {\n                // Viewing a buffer with a different type may create NaNs\n                array.fill(0);\n            }\n            return array;\n        }\n        return new Type(sizeToAllocate);\n    }\n    _release(typedArray) {\n        if (!ArrayBuffer.isView(typedArray)) {\n            return;\n        }\n        const pool = this._pool;\n        const { buffer } = typedArray;\n        // Save the buffer of the released array into the pool\n        // Sort buffers by size\n        // TODO - implement binary search?\n        const { byteLength } = buffer;\n        const i = pool.findIndex(b => b.byteLength >= byteLength);\n        if (i < 0) {\n            pool.push(buffer);\n        }\n        else if (i > 0 || pool.length < this.opts.poolSize) {\n            pool.splice(i, 0, buffer);\n        }\n        if (pool.length > this.opts.poolSize) {\n            // Drop the smallest one\n            pool.shift();\n        }\n    }\n}\nexport default new TypedArrayManager();\n", "// Extensions to math.gl library. Intended to be folded back.\nimport typedArrayManager from \"./typed-array-manager.js\";\nimport { Vector3 } from '@math.gl/core';\n// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()\nexport function createMat4() {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\nexport function mod(value, divisor) {\n    const modulus = value % divisor;\n    return modulus < 0 ? divisor + modulus : modulus;\n}\n// Extract camera vectors (move to math library?)\nexport function getCameraPosition(viewMatrixInverse) {\n    // Read the translation from the inverse view matrix\n    return [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]];\n}\n// https://www.gamedevs.org/uploads/fast-extraction-viewing-frustum-planes-from-world-view-projection-matrix.pdf\nexport function getFrustumPlanes(viewProjectionMatrix) {\n    return {\n        left: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[0], viewProjectionMatrix[7] + viewProjectionMatrix[4], viewProjectionMatrix[11] + viewProjectionMatrix[8], viewProjectionMatrix[15] + viewProjectionMatrix[12]),\n        right: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[0], viewProjectionMatrix[7] - viewProjectionMatrix[4], viewProjectionMatrix[11] - viewProjectionMatrix[8], viewProjectionMatrix[15] - viewProjectionMatrix[12]),\n        bottom: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[1], viewProjectionMatrix[7] + viewProjectionMatrix[5], viewProjectionMatrix[11] + viewProjectionMatrix[9], viewProjectionMatrix[15] + viewProjectionMatrix[13]),\n        top: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[1], viewProjectionMatrix[7] - viewProjectionMatrix[5], viewProjectionMatrix[11] - viewProjectionMatrix[9], viewProjectionMatrix[15] - viewProjectionMatrix[13]),\n        near: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[2], viewProjectionMatrix[7] + viewProjectionMatrix[6], viewProjectionMatrix[11] + viewProjectionMatrix[10], viewProjectionMatrix[15] + viewProjectionMatrix[14]),\n        far: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[2], viewProjectionMatrix[7] - viewProjectionMatrix[6], viewProjectionMatrix[11] - viewProjectionMatrix[10], viewProjectionMatrix[15] - viewProjectionMatrix[14])\n    };\n}\nconst scratchVector = new Vector3();\nfunction getFrustumPlane(a, b, c, d) {\n    scratchVector.set(a, b, c);\n    const L = scratchVector.len();\n    return { distance: d / L, normal: new Vector3(-a / L, -b / L, -c / L) };\n}\n/**\n * Calculate the low part of a WebGL 64 bit float\n * @param x {number} - the input float number\n * @returns {number} - the lower 32 bit of the number\n */\nexport function fp64LowPart(x) {\n    return x - Math.fround(x);\n}\nlet scratchArray;\n/**\n * Split a Float64Array into a double-length Float32Array\n * @param typedArray\n * @param options\n * @param options.size  - per attribute size\n * @param options.startIndex - start index in the source array\n * @param options.endIndex  - end index in the source array\n * @returns {} - high part, low part for each attribute:\n    [1xHi, 1yHi, 1zHi, 1xLow, 1yLow, 1zLow, 2xHi, ...]\n */\nexport function toDoublePrecisionArray(typedArray, options) {\n    const { size = 1, startIndex = 0 } = options;\n    const endIndex = options.endIndex !== undefined ? options.endIndex : typedArray.length;\n    const count = (endIndex - startIndex) / size;\n    scratchArray = typedArrayManager.allocate(scratchArray, count, {\n        type: Float32Array,\n        size: size * 2\n    });\n    let sourceIndex = startIndex;\n    let targetIndex = 0;\n    while (sourceIndex < endIndex) {\n        for (let j = 0; j < size; j++) {\n            const value = typedArray[sourceIndex++];\n            scratchArray[targetIndex + j] = value;\n            scratchArray[targetIndex + j + size] = fp64LowPart(value);\n        }\n        targetIndex += size * 2;\n    }\n    return scratchArray.subarray(0, count * size * 2);\n}\nexport function mergeBounds(boundsList) {\n    let mergedBounds = null;\n    let isMerged = false;\n    for (const bounds of boundsList) {\n        /* eslint-disable-next-line no-continue */\n        if (!bounds)\n            continue;\n        if (!mergedBounds) {\n            mergedBounds = bounds;\n        }\n        else {\n            if (!isMerged) {\n                // Copy to avoid mutating input bounds\n                mergedBounds = [\n                    [mergedBounds[0][0], mergedBounds[0][1]],\n                    [mergedBounds[1][0], mergedBounds[1][1]]\n                ];\n                isMerged = true;\n            }\n            mergedBounds[0][0] = Math.min(mergedBounds[0][0], bounds[0][0]);\n            mergedBounds[0][1] = Math.min(mergedBounds[0][1], bounds[0][1]);\n            mergedBounds[1][0] = Math.max(mergedBounds[1][0], bounds[1][0]);\n            mergedBounds[1][1] = Math.max(mergedBounds[1][1], bounds[1][1]);\n        }\n    }\n    return mergedBounds;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport log from \"../utils/log.js\";\nimport { createMat4, getCameraPosition, getFrustumPlanes } from \"../utils/math-utils.js\";\nimport { Matrix4, Vector3, equals, clamp, mat4 } from '@math.gl/core';\nimport { getDistanceScales, getMeterZoom, lngLatToWorld, worldToLngLat, worldToPixels, pixelsToWorld } from '@math.gl/web-mercator';\nimport { PROJECTION_MODE } from \"../lib/constants.js\";\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst IDENTITY = createMat4();\nconst ZERO_VECTOR = [0, 0, 0];\nconst DEFAULT_DISTANCE_SCALES = {\n    unitsPerMeter: [1, 1, 1],\n    metersPerUnit: [1, 1, 1]\n};\n// / Helpers\nfunction createProjectionMatrix({ width, height, orthographic, fovyRadians, focalDistance, padding, near, far }) {\n    const aspect = width / height;\n    const matrix = orthographic\n        ? new Matrix4().orthographic({ fovy: fovyRadians, aspect, focalDistance, near, far })\n        : new Matrix4().perspective({ fovy: fovyRadians, aspect, near, far });\n    if (padding) {\n        const { left = 0, right = 0, top = 0, bottom = 0 } = padding;\n        const offsetX = clamp((left + width - right) / 2, 0, width) - width / 2;\n        const offsetY = clamp((top + height - bottom) / 2, 0, height) - height / 2;\n        // pixels to clip space\n        matrix[8] -= (offsetX * 2) / width;\n        matrix[9] += (offsetY * 2) / height;\n    }\n    return matrix;\n}\n/**\n * Manages coordinate system transformations.\n *\n * Note: The Viewport is immutable in the sense that it only has accessors.\n * A new viewport instance should be created if any parameters have changed.\n */\nexport default class Viewport {\n    static { this.displayName = 'Viewport'; }\n    // eslint-disable-next-line complexity\n    constructor(opts = {}) {\n        this._frustumPlanes = {};\n        // @ts-ignore\n        this.id = opts.id || this.constructor.displayName || 'viewport';\n        this.x = opts.x || 0;\n        this.y = opts.y || 0;\n        // Silently allow apps to send in w,h = 0,0\n        this.width = opts.width || 1;\n        this.height = opts.height || 1;\n        this.zoom = opts.zoom || 0;\n        this.padding = opts.padding;\n        this.distanceScales = opts.distanceScales || DEFAULT_DISTANCE_SCALES;\n        this.focalDistance = opts.focalDistance || 1;\n        this.position = opts.position || ZERO_VECTOR;\n        this.modelMatrix = opts.modelMatrix || null;\n        const { longitude, latitude } = opts;\n        this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n        this._initProps(opts);\n        this._initMatrices(opts);\n        // Bind methods for easy access\n        this.equals = this.equals.bind(this);\n        this.project = this.project.bind(this);\n        this.unproject = this.unproject.bind(this);\n        this.projectPosition = this.projectPosition.bind(this);\n        this.unprojectPosition = this.unprojectPosition.bind(this);\n        this.projectFlat = this.projectFlat.bind(this);\n        this.unprojectFlat = this.unprojectFlat.bind(this);\n    }\n    get subViewports() {\n        return null;\n    }\n    get metersPerPixel() {\n        return this.distanceScales.metersPerUnit[2] / this.scale;\n    }\n    get projectionMode() {\n        if (this.isGeospatial) {\n            return this.zoom < 12\n                ? PROJECTION_MODE.WEB_MERCATOR\n                : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n        }\n        return PROJECTION_MODE.IDENTITY;\n    }\n    // Two viewports are equal if width and height are identical, and if\n    // their view and projection matrices are (approximately) equal.\n    equals(viewport) {\n        if (!(viewport instanceof Viewport)) {\n            return false;\n        }\n        if (this === viewport) {\n            return true;\n        }\n        return (viewport.width === this.width &&\n            viewport.height === this.height &&\n            viewport.scale === this.scale &&\n            equals(viewport.projectionMatrix, this.projectionMatrix) &&\n            equals(viewport.viewMatrix, this.viewMatrix));\n        // TODO - check distance scales?\n    }\n    /**\n     * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n     * using viewport projection parameters\n     * - [longitude, latitude] to [x, y]\n     * - [longitude, latitude, Z] => [x, y, z]\n     * Note: By default, returns top-left coordinates for canvas/SVG type render\n     *\n     * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n     * @param {Object} opts - options\n     * @param {Object} opts.topLeft=true - Whether projected coords are top left\n     * @return {Array} - [x, y] or [x, y, z] in top left coords\n     */\n    project(xyz, { topLeft = true } = {}) {\n        const worldPosition = this.projectPosition(xyz);\n        const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n        const [x, y] = coord;\n        const y2 = topLeft ? y : this.height - y;\n        return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    }\n    /**\n     * Unproject pixel coordinates on screen onto world coordinates,\n     * (possibly [lon, lat]) on map.\n     * - [x, y] => [lng, lat]\n     * - [x, y, z] => [lng, lat, Z]\n     * @param {Array} xyz -\n     * @param {Object} opts - options\n     * @param {Object} opts.topLeft=true - Whether origin is top left\n     * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n     */\n    unproject(xyz, { topLeft = true, targetZ } = {}) {\n        const [x, y, z] = xyz;\n        const y2 = topLeft ? y : this.height - y;\n        const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n        const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n        const [X, Y, Z] = this.unprojectPosition(coord);\n        if (Number.isFinite(z)) {\n            return [X, Y, Z];\n        }\n        return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    }\n    // NON_LINEAR PROJECTION HOOKS\n    // Used for web meractor projection\n    projectPosition(xyz) {\n        const [X, Y] = this.projectFlat(xyz);\n        const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n        return [X, Y, Z];\n    }\n    unprojectPosition(xyz) {\n        const [X, Y] = this.unprojectFlat(xyz);\n        const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n        return [X, Y, Z];\n    }\n    /**\n     * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n     * Performs the nonlinear part of the web mercator projection.\n     * Remaining projection is done with 4x4 matrices which also handles\n     * perspective.\n     * @param {Array} lngLat - [lng, lat] coordinates\n     *   Specifies a point on the sphere to project onto the map.\n     * @return {Array} [x,y] coordinates.\n     */\n    projectFlat(xyz) {\n        if (this.isGeospatial) {\n            // Shader clamps latitude to +-89.9, see /shaderlib/project/project.glsl.js\n            // lngLatToWorld([0, -89.9])[1] = -317.9934163758329\n            // lngLatToWorld([0, 89.9])[1] = 829.9934163758271\n            const result = lngLatToWorld(xyz);\n            result[1] = clamp(result[1], -318, 830);\n            return result;\n        }\n        return xyz;\n    }\n    /**\n     * Unproject world point [x,y] on map onto {lat, lon} on sphere\n     * @param {object|Vector} xy - object with {x,y} members\n     *  representing point on projected map plane\n     * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n     *   Has toArray method if you need a GeoJSON Array.\n     *   Per cartographic tradition, lat and lon are specified as degrees.\n     */\n    unprojectFlat(xyz) {\n        if (this.isGeospatial) {\n            return worldToLngLat(xyz);\n        }\n        return xyz;\n    }\n    /**\n     * Get bounds of the current viewport\n     * @return {Array} - [minX, minY, maxX, maxY]\n     */\n    getBounds(options = {}) {\n        const unprojectOption = { targetZ: options.z || 0 };\n        const topLeft = this.unproject([0, 0], unprojectOption);\n        const topRight = this.unproject([this.width, 0], unprojectOption);\n        const bottomLeft = this.unproject([0, this.height], unprojectOption);\n        const bottomRight = this.unproject([this.width, this.height], unprojectOption);\n        return [\n            Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n            Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),\n            Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n            Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])\n        ];\n    }\n    getDistanceScales(coordinateOrigin) {\n        if (coordinateOrigin) {\n            return getDistanceScales({\n                longitude: coordinateOrigin[0],\n                latitude: coordinateOrigin[1],\n                highPrecision: true\n            });\n        }\n        return this.distanceScales;\n    }\n    containsPixel({ x, y, width = 1, height = 1 }) {\n        return (x < this.x + this.width &&\n            this.x < x + width &&\n            y < this.y + this.height &&\n            this.y < y + height);\n    }\n    // Extract frustum planes in common space\n    getFrustumPlanes() {\n        if (this._frustumPlanes.near) {\n            // @ts-ignore\n            return this._frustumPlanes;\n        }\n        Object.assign(this._frustumPlanes, getFrustumPlanes(this.viewProjectionMatrix));\n        // @ts-ignore\n        return this._frustumPlanes;\n    }\n    // EXPERIMENTAL METHODS\n    /**\n     * Needed by panning and linear transition\n     * Pan the viewport to place a given world coordinate at screen point [x, y]\n     *\n     * @param {Array} coords - world coordinates\n     * @param {Array} pixel - [x,y] coordinates on screen\n     * @return {Object} props of the new viewport\n     */\n    panByPosition(coords, pixel) {\n        return null;\n    }\n    // INTERNAL METHODS\n    /* eslint-disable complexity, max-statements */\n    _initProps(opts) {\n        const longitude = opts.longitude;\n        const latitude = opts.latitude;\n        if (this.isGeospatial) {\n            if (!Number.isFinite(opts.zoom)) {\n                this.zoom = getMeterZoom({ latitude }) + Math.log2(this.focalDistance);\n            }\n            this.distanceScales = opts.distanceScales || getDistanceScales({ latitude, longitude });\n        }\n        const scale = Math.pow(2, this.zoom);\n        this.scale = scale;\n        const { position, modelMatrix } = opts;\n        let meterOffset = ZERO_VECTOR;\n        if (position) {\n            meterOffset = modelMatrix\n                ? new Matrix4(modelMatrix).transformAsVector(position, [])\n                : position;\n        }\n        if (this.isGeospatial) {\n            // Determine camera center in common space\n            const center = this.projectPosition([longitude, latitude, 0]);\n            this.center = new Vector3(meterOffset)\n                // Convert to pixels in current zoom\n                .scale(this.distanceScales.unitsPerMeter)\n                .add(center);\n        }\n        else {\n            this.center = this.projectPosition(meterOffset);\n        }\n    }\n    /* eslint-enable complexity, max-statements */\n    _initMatrices(opts) {\n        const { \n        // View matrix\n        viewMatrix = IDENTITY, \n        // Projection matrix\n        projectionMatrix = null, \n        // Projection matrix parameters, used if projectionMatrix not supplied\n        orthographic = false, fovyRadians, fovy = 75, near = 0.1, // Distance of near clipping plane\n        far = 1000, // Distance of far clipping plane\n        padding = null, // Center offset in pixels\n        focalDistance = 1 } = opts;\n        this.viewMatrixUncentered = viewMatrix;\n        // Make a centered version of the matrix for projection modes without an offset\n        this.viewMatrix = new Matrix4()\n            // Apply the uncentered view matrix\n            .multiplyRight(viewMatrix)\n            // And center it\n            .translate(new Vector3(this.center).negate());\n        this.projectionMatrix =\n            projectionMatrix ||\n                createProjectionMatrix({\n                    width: this.width,\n                    height: this.height,\n                    orthographic,\n                    fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n                    focalDistance,\n                    padding,\n                    near,\n                    far\n                });\n        // Note: As usual, matrix operations should be applied in \"reverse\" order\n        // since vectors will be multiplied in from the right during transformation\n        const vpm = createMat4();\n        mat4.multiply(vpm, vpm, this.projectionMatrix);\n        mat4.multiply(vpm, vpm, this.viewMatrix);\n        this.viewProjectionMatrix = vpm;\n        // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n        // Calculate inverse view matrix\n        this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n        // Decompose camera parameters\n        this.cameraPosition = getCameraPosition(this.viewMatrixInverse);\n        /*\n         * Builds matrices that converts preprojected lngLats to screen pixels\n         * and vice versa.\n         * Note: Currently returns bottom-left coordinates!\n         * Note: Starts with the GL projection matrix and adds steps to the\n         *       scale and translate that matrix onto the window.\n         * Note: WebGL controls clip space to screen projection with gl.viewport\n         *       and does not need this step.\n         */\n        // matrix for conversion from world location to screen (pixel) coordinates\n        const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n        const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n        mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n        mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n        mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n        this.pixelProjectionMatrix = pixelProjectionMatrix;\n        this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n        if (!this.pixelUnprojectionMatrix) {\n            log.warn('Pixel project matrix not invertible')();\n            // throw new Error('Pixel project matrix not invertible');\n        }\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from \"./viewport.js\";\nimport { pixelsToWorld, getViewMatrix, addMetersToLngLat, unitsPerMeter, getProjectionParameters, altitudeToFovy, fovyToAltitude, fitBounds, getBounds } from '@math.gl/web-mercator';\nimport { Matrix4, clamp, vec2 } from '@math.gl/core';\n/**\n * Manages transformations to/from WGS84 coordinates using the Web Mercator Projection.\n */\nexport default class WebMercatorViewport extends Viewport {\n    static { this.displayName = 'WebMercatorViewport'; }\n    /* eslint-disable complexity, max-statements */\n    constructor(opts = {}) {\n        const { latitude = 0, longitude = 0, zoom = 0, pitch = 0, bearing = 0, nearZMultiplier = 0.1, farZMultiplier = 1.01, nearZ, farZ, orthographic = false, projectionMatrix, repeat = false, worldOffset = 0, position, padding, \n        // backward compatibility\n        // TODO: remove in v9\n        legacyMeterSizes = false } = opts;\n        let { width, height, altitude = 1.5 } = opts;\n        const scale = Math.pow(2, zoom);\n        // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n        width = width || 1;\n        height = height || 1;\n        let fovy;\n        let projectionParameters = null;\n        if (projectionMatrix) {\n            altitude = projectionMatrix[5] / 2;\n            fovy = altitudeToFovy(altitude);\n        }\n        else {\n            if (opts.fovy) {\n                fovy = opts.fovy;\n                altitude = fovyToAltitude(fovy);\n            }\n            else {\n                fovy = altitudeToFovy(altitude);\n            }\n            let offset;\n            if (padding) {\n                const { top = 0, bottom = 0 } = padding;\n                offset = [0, clamp((top + height - bottom) / 2, 0, height) - height / 2];\n            }\n            projectionParameters = getProjectionParameters({\n                width,\n                height,\n                scale,\n                center: position && [0, 0, position[2] * unitsPerMeter(latitude)],\n                offset,\n                pitch,\n                fovy,\n                nearZMultiplier,\n                farZMultiplier\n            });\n            if (Number.isFinite(nearZ)) {\n                projectionParameters.near = nearZ;\n            }\n            if (Number.isFinite(farZ)) {\n                projectionParameters.far = farZ;\n            }\n        }\n        // The uncentered matrix allows us two move the center addition to the\n        // shader (cheap) which gives a coordinate system that has its center in\n        // the layer's center position. This makes rotations and other modelMatrx\n        // transforms much more useful.\n        let viewMatrixUncentered = getViewMatrix({\n            height,\n            pitch,\n            bearing,\n            scale,\n            altitude\n        });\n        if (worldOffset) {\n            const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n            viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n        }\n        super({\n            ...opts,\n            // x, y,\n            width,\n            height,\n            // view matrix\n            viewMatrix: viewMatrixUncentered,\n            longitude,\n            latitude,\n            zoom,\n            // projection matrix parameters\n            ...projectionParameters,\n            fovy,\n            focalDistance: altitude\n        });\n        // Save parameters\n        this.latitude = latitude;\n        this.longitude = longitude;\n        this.zoom = zoom;\n        this.pitch = pitch;\n        this.bearing = bearing;\n        this.altitude = altitude;\n        this.fovy = fovy;\n        this.orthographic = orthographic;\n        this._subViewports = repeat ? [] : null;\n        this._pseudoMeters = legacyMeterSizes;\n        Object.freeze(this);\n    }\n    /* eslint-enable complexity, max-statements */\n    get subViewports() {\n        if (this._subViewports && !this._subViewports.length) {\n            // Cache sub viewports so that we only calculate them once\n            const bounds = this.getBounds();\n            const minOffset = Math.floor((bounds[0] + 180) / 360);\n            const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n            for (let x = minOffset; x <= maxOffset; x++) {\n                const offsetViewport = x\n                    ? new WebMercatorViewport({\n                        ...this,\n                        worldOffset: x\n                    })\n                    : this;\n                this._subViewports.push(offsetViewport);\n            }\n        }\n        return this._subViewports;\n    }\n    projectPosition(xyz) {\n        if (this._pseudoMeters) {\n            // Backward compatibility\n            return super.projectPosition(xyz);\n        }\n        const [X, Y] = this.projectFlat(xyz);\n        const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n        return [X, Y, Z];\n    }\n    unprojectPosition(xyz) {\n        if (this._pseudoMeters) {\n            // Backward compatibility\n            return super.unprojectPosition(xyz);\n        }\n        const [X, Y] = this.unprojectFlat(xyz);\n        const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n        return [X, Y, Z];\n    }\n    /**\n     * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n     *\n     * Note: Uses simple linear approximation around the viewport center\n     * Error increases with size of offset (roughly 1% per 100km)\n     *\n     * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n     * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n     * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n     */\n    addMetersToLngLat(lngLatZ, xyz) {\n        return addMetersToLngLat(lngLatZ, xyz);\n    }\n    panByPosition(coords, pixel) {\n        const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n        const toLocation = this.projectFlat(coords);\n        const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n        const newCenter = vec2.add([], this.center, translate);\n        const [longitude, latitude] = this.unprojectFlat(newCenter);\n        return { longitude, latitude };\n    }\n    getBounds(options = {}) {\n        // @ts-ignore\n        const corners = getBounds(this, options.z || 0);\n        return [\n            Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n            Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n            Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n            Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n        ];\n    }\n    /**\n     * Returns a new viewport that fit around the given rectangle.\n     * Only supports non-perspective mode.\n     */\n    fitBounds(\n    /** [[lon, lat], [lon, lat]] */\n    bounds, options = {}) {\n        const { width, height } = this;\n        const { longitude, latitude, zoom } = fitBounds({ width, height, bounds, ...options });\n        return new WebMercatorViewport({ width, height, longitude, latitude, zoom });\n    }\n}\n", "/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport { COORDINATE_SYSTEM } from \"../../lib/constants.js\";\nimport { getOffsetOrigin } from \"./viewport-uniforms.js\";\nimport WebMercatorViewport from \"../../viewports/web-mercator-viewport.js\";\nimport { vec3, vec4 } from '@math.gl/core';\nimport { addMetersToLngLat } from '@math.gl/web-mercator';\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (unitsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {\n    const p = viewport.projectPosition(lngLatZ);\n    // TODO - avoid using instanceof\n    if (offsetMode && viewport instanceof WebMercatorViewport) {\n        const [longitude, latitude, z = 0] = lngLatZ;\n        const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n        p[2] = z * distanceScales.unitsPerMeter[2];\n    }\n    return p;\n}\nfunction normalizeParameters(opts) {\n    const { viewport, modelMatrix, coordinateOrigin } = opts;\n    let { coordinateSystem, fromCoordinateSystem, fromCoordinateOrigin } = opts;\n    if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        coordinateSystem = viewport.isGeospatial\n            ? COORDINATE_SYSTEM.LNGLAT\n            : COORDINATE_SYSTEM.CARTESIAN;\n    }\n    if (fromCoordinateSystem === undefined) {\n        fromCoordinateSystem = coordinateSystem;\n    }\n    if (fromCoordinateOrigin === undefined) {\n        fromCoordinateOrigin = coordinateOrigin;\n    }\n    return {\n        viewport,\n        coordinateSystem,\n        coordinateOrigin,\n        modelMatrix,\n        fromCoordinateSystem,\n        fromCoordinateOrigin\n    };\n}\n/** Get the common space position from world coordinates in the given coordinate system */\nexport function getWorldPosition(position, { viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode }) {\n    let [x, y, z = 0] = position;\n    if (modelMatrix) {\n        [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n    }\n    switch (coordinateSystem) {\n        case COORDINATE_SYSTEM.LNGLAT:\n            return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n        case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n            return lngLatZToWorldPosition([x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)], viewport, offsetMode);\n        case COORDINATE_SYSTEM.METER_OFFSETS:\n            return lngLatZToWorldPosition(addMetersToLngLat(coordinateOrigin, [x, y, z]), viewport, offsetMode);\n        case COORDINATE_SYSTEM.CARTESIAN:\n        default:\n            return viewport.isGeospatial\n                ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]]\n                : viewport.projectPosition([x, y, z]);\n    }\n}\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n */\nexport function projectPosition(position, params) {\n    const { viewport, coordinateSystem, coordinateOrigin, modelMatrix, fromCoordinateSystem, fromCoordinateOrigin } = normalizeParameters(params);\n    const { autoOffset = true } = params;\n    const { geospatialOrigin = DEFAULT_COORDINATE_ORIGIN, shaderCoordinateOrigin = DEFAULT_COORDINATE_ORIGIN, offsetMode = false } = autoOffset ? getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin) : {};\n    const worldPosition = getWorldPosition(position, {\n        viewport,\n        modelMatrix,\n        coordinateSystem: fromCoordinateSystem,\n        coordinateOrigin: fromCoordinateOrigin,\n        offsetMode\n    });\n    if (offsetMode) {\n        const positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);\n        vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n    }\n    return worldPosition;\n}\n", "import { projectPosition } from \"../../shaderlib/project/project-functions.js\";\nimport { COORDINATE_SYSTEM } from \"../../lib/constants.js\";\nconst DEFAULT_LIGHT_COLOR = [255, 255, 255];\nconst DEFAULT_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_ATTENUATION = [0, 0, 1];\nconst DEFAULT_LIGHT_POSITION = [0.0, 0.0, 1.0];\nlet idCount = 0;\nexport class PointLight {\n    constructor(props = {}) {\n        this.type = 'point';\n        const { color = DEFAULT_LIGHT_COLOR } = props;\n        const { intensity = DEFAULT_LIGHT_INTENSITY } = props;\n        const { position = DEFAULT_LIGHT_POSITION } = props;\n        this.id = props.id || `point-${idCount++}`;\n        this.color = color;\n        this.intensity = intensity;\n        this.type = 'point';\n        this.position = position;\n        this.attenuation = getAttenuation(props);\n        this.projectedLight = { ...this };\n    }\n    getProjectedLight({ layer }) {\n        const { projectedLight } = this;\n        const viewport = layer.context.viewport;\n        const { coordinateSystem, coordinateOrigin } = layer.props;\n        const position = projectPosition(this.position, {\n            viewport,\n            coordinateSystem,\n            coordinateOrigin,\n            fromCoordinateSystem: viewport.isGeospatial\n                ? COORDINATE_SYSTEM.LNGLAT\n                : COORDINATE_SYSTEM.CARTESIAN,\n            fromCoordinateOrigin: [0, 0, 0]\n        });\n        projectedLight.color = this.color;\n        projectedLight.intensity = this.intensity;\n        projectedLight.position = position;\n        return projectedLight;\n    }\n}\nfunction getAttenuation(props) {\n    if (props.attenuation) {\n        return props.attenuation;\n    }\n    if ('intensity' in props) {\n        return [0, 0, props.intensity || 0];\n    }\n    return DEFAULT_ATTENUATION;\n}\n", "/* eslint-disable camelcase */\nimport { PointLight } from \"./point-light.js\";\nimport { getUniformsFromViewport } from \"../../shaderlib/project/viewport-uniforms.js\";\nexport default class CameraLight extends PointLight {\n    getProjectedLight({ layer }) {\n        const { projectedLight } = this;\n        const viewport = layer.context.viewport;\n        const { coordinateSystem, coordinateOrigin, modelMatrix } = layer.props;\n        const { project_uCameraPosition } = getUniformsFromViewport({\n            viewport,\n            modelMatrix,\n            coordinateSystem,\n            coordinateOrigin\n        });\n        projectedLight.color = this.color;\n        projectedLight.intensity = this.intensity;\n        projectedLight.position = project_uCameraPosition;\n        return projectedLight;\n    }\n}\n", "import { DirectionalLight } from \"./directional-light.js\";\nimport { getSunDirection } from '@math.gl/sun';\nexport default class SunLight extends DirectionalLight {\n    constructor(opts) {\n        super(opts);\n        this.timestamp = opts.timestamp;\n    }\n    getProjectedLight({ layer }) {\n        const { viewport } = layer.context;\n        const isGlobe = viewport.resolution && viewport.resolution > 0;\n        if (isGlobe) {\n            // Rotate vector to align with the direction of the globe projection (up at lon:0,lat:0 is [0, -1, 0])\n            const [x, y, z] = getSunDirection(this.timestamp, 0, 0);\n            this.direction = [x, -z, y];\n        }\n        else {\n            // @ts-expect-error longitude and latitude are not defined on all viewports\n            const { latitude, longitude } = viewport;\n            this.direction = getSunDirection(this.timestamp, latitude, longitude);\n        }\n        return this;\n    }\n}\n", "import { normalizeShaderModule } from '@luma.gl/shadertools';\nimport ScreenPass from \"../passes/screen-pass.js\";\nexport default class PostProcessEffect {\n    constructor(module, props) {\n        this.id = `${module.name}-pass`;\n        this.props = props;\n        normalizeShaderModule(module);\n        this.module = module;\n    }\n    setup({ device }) {\n        this.passes = createPasses(device, this.module, this.id);\n    }\n    setProps(props) {\n        this.props = props;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    preRender() { }\n    postRender(params) {\n        const passes = this.passes;\n        const { target } = params;\n        let inputBuffer = params.inputBuffer;\n        let outputBuffer = params.swapBuffer;\n        for (let index = 0; index < passes.length; index++) {\n            const isLastPass = index === passes.length - 1;\n            const renderToTarget = target !== undefined && isLastPass;\n            if (renderToTarget) {\n                outputBuffer = target;\n            }\n            const clearCanvas = !renderToTarget || Boolean(params.clearCanvas);\n            const moduleSettings = {};\n            moduleSettings[this.module.name] = this.props;\n            passes[index].render({ clearCanvas, inputBuffer, outputBuffer, moduleSettings });\n            const switchBuffer = outputBuffer;\n            outputBuffer = inputBuffer;\n            inputBuffer = switchBuffer;\n        }\n        return inputBuffer;\n    }\n    cleanup() {\n        if (this.passes) {\n            for (const pass of this.passes) {\n                pass.delete();\n            }\n            this.passes = undefined;\n        }\n    }\n}\nfunction createPasses(device, module, id) {\n    return module.passes.map((pass, index) => {\n        const fs = getFragmentShaderForRenderPass(module, pass);\n        const idn = `${id}-${index}`;\n        return new ScreenPass(device, { id: idn, module, fs });\n    });\n}\nconst FS_TEMPLATE_INPUTS = `\\\n#version 300 es\nuniform sampler2D texSrc;\nuniform vec2 texSize;\n\nin vec2 position;\nin vec2 coordinate;\nin vec2 uv;\n\nout vec4 fragColor;\n`;\nconst FILTER_FS_TEMPLATE = (func) => `\\\n${FS_TEMPLATE_INPUTS}\nvoid main() {\n  fragColor = texture(texSrc, coordinate);\n  fragColor = ${func}(fragColor, texSize, coordinate);\n}\n`;\nconst SAMPLER_FS_TEMPLATE = (func) => `\\\n${FS_TEMPLATE_INPUTS}\nvoid main() {\n  fragColor = ${func}(texSrc, texSize, coordinate);\n}\n`;\nfunction getFragmentShaderForRenderPass(module, pass) {\n    if (pass.filter) {\n        const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor`;\n        return FILTER_FS_TEMPLATE(func);\n    }\n    if (pass.sampler) {\n        const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n        return SAMPLER_FS_TEMPLATE(func);\n    }\n    // console.error(`${module.name} no fragment shader generated`);\n    return '';\n}\n", "// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\nimport { ClipSpace } from '@luma.gl/engine';\nimport Pass from \"./pass.js\";\n/** A base render pass. */\nexport default class ScreenPass extends Pass {\n    constructor(device, props) {\n        super(device, props);\n        const { module, fs, id } = props;\n        const parameters = { depthWriteEnabled: false, depthCompare: 'always' };\n        this.model = new ClipSpace(device, { id, fs, modules: [module], parameters });\n    }\n    render(params) {\n        this._renderPass(this.device, params);\n    }\n    delete() {\n        this.model.destroy();\n        this.model = null;\n    }\n    // Private methods\n    /**\n     * Renders the pass.\n     * This is an abstract method that should be overridden.\n     * @param inputBuffer - Frame buffer that contains the result of the previous pass\n     * @param outputBuffer - Frame buffer that serves as the output render target\n     */\n    _renderPass(device, options) {\n        const { clearCanvas, inputBuffer, outputBuffer } = options;\n        const texSize = [inputBuffer.width, inputBuffer.height];\n        this.model.shaderInputs.setProps(options.moduleSettings);\n        this.model.setBindings({ texSrc: inputBuffer.colorAttachments[0] });\n        this.model.setUniforms({ texSize });\n        const renderPass = this.device.beginRenderPass({\n            framebuffer: outputBuffer,\n            parameters: { viewport: [0, 0, ...texSize] },\n            clearColor: clearCanvas ? [0, 0, 0, 0] : false,\n            clearDepth: 1\n        });\n        this.model.draw(renderPass);\n        renderPass.end();\n    }\n}\n", "import LayersPass from \"./layers-pass.js\";\nimport log from \"../utils/log.js\";\nconst PICKING_BLENDING = {\n    blendColorOperation: 'add',\n    blendColorSrcFactor: 'one',\n    blendColorDstFactor: 'zero',\n    blendAlphaOperation: 'add',\n    blendAlphaSrcFactor: 'constant-alpha',\n    blendAlphaDstFactor: 'zero'\n};\nexport default class PickLayersPass extends LayersPass {\n    constructor() {\n        super(...arguments);\n        this._colorEncoderState = null;\n    }\n    render(props) {\n        if ('pickingFBO' in props) {\n            // When drawing into an off-screen buffer, use the alpha channel to encode layer index\n            return this._drawPickingBuffer(props);\n        }\n        // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible\n        return super.render(props);\n    }\n    // Private\n    // Draws list of layers and viewports into the picking buffer\n    // Note: does not sample the buffer, that has to be done by the caller\n    _drawPickingBuffer({ layers, layerFilter, views, viewports, onViewportActive, pickingFBO, deviceRect: { x, y, width, height }, cullRect, effects, pass = 'picking', pickZ, moduleParameters }) {\n        this.pickZ = pickZ;\n        const colorEncoderState = this._resetColorEncoder(pickZ);\n        const scissorRect = [x, y, width, height];\n        // Make sure we clear scissor test and fbo bindings in case of exceptions\n        // We are only interested in one pixel, no need to render anything else\n        // Note that the callback here is called synchronously.\n        // Set blend mode for picking\n        // always overwrite existing pixel with [r,g,b,layerIndex]\n        const renderStatus = super.render({\n            target: pickingFBO,\n            layers,\n            layerFilter,\n            views,\n            viewports,\n            onViewportActive,\n            cullRect,\n            effects: effects?.filter(e => e.useInPicking),\n            pass,\n            isPicking: true,\n            moduleParameters,\n            clearColor: [0, 0, 0, 0],\n            colorMask: 0xf,\n            scissorRect\n        });\n        // Clear the temp field\n        this._colorEncoderState = null;\n        const decodePickingColor = colorEncoderState && decodeColor.bind(null, colorEncoderState);\n        return { decodePickingColor, stats: renderStatus };\n    }\n    shouldDrawLayer(layer) {\n        const { pickable, operation } = layer.props;\n        return ((pickable && operation.includes('draw')) ||\n            operation.includes('terrain') ||\n            operation.includes('mask'));\n    }\n    getModuleParameters() {\n        return {\n            picking: {\n                isActive: 1,\n                isAttribute: this.pickZ\n            },\n            // turn off lighting by adding empty light source object\n            // lights shader module relies on the `lightSources` to turn on/off lighting\n            lightSources: {}\n        };\n    }\n    getLayerParameters(layer, layerIndex, viewport) {\n        const pickParameters = {\n            // TODO - When used as a custom layer in older Mapbox versions, context\n            // state was dirty. Mapbox fixed that; we should test and remove the workaround.\n            // https://github.com/mapbox/mapbox-gl-js/issues/7801\n            depthMask: true,\n            depthTest: true,\n            depthRange: [0, 1],\n            ...layer.props.parameters\n        };\n        const { pickable, operation } = layer.props;\n        if (!this._colorEncoderState || operation.includes('terrain')) {\n            pickParameters.blend = false;\n        }\n        else if (pickable && operation.includes('draw')) {\n            Object.assign(pickParameters, PICKING_BLENDING);\n            pickParameters.blend = true;\n            pickParameters.blendColor = encodeColor(this._colorEncoderState, layer, viewport);\n        }\n        return pickParameters;\n    }\n    _resetColorEncoder(pickZ) {\n        // Track encoded layer indices\n        this._colorEncoderState = pickZ\n            ? null\n            : {\n                byLayer: new Map(),\n                byAlpha: []\n            };\n        // Temporarily store it on the instance so that it can be accessed by this.getLayerParameters\n        return this._colorEncoderState;\n    }\n}\n// Assign an unique alpha value for each pickable layer and track the encoding in the cache object\n// Returns normalized blend color\nfunction encodeColor(encoded, layer, viewport) {\n    const { byLayer, byAlpha } = encoded;\n    let a;\n    // Encode layerIndex in the alpha channel\n    // TODO - combine small layers to better utilize the picking color space\n    let entry = byLayer.get(layer);\n    if (entry) {\n        entry.viewports.push(viewport);\n        a = entry.a;\n    }\n    else {\n        a = byLayer.size + 1;\n        if (a <= 255) {\n            entry = { a, layer, viewports: [viewport] };\n            byLayer.set(layer, entry);\n            byAlpha[a] = entry;\n        }\n        else {\n            log.warn('Too many pickable layers, only picking the first 255')();\n            a = 0;\n        }\n    }\n    return [0, 0, 0, a / 255];\n}\n// Given a picked color, retrieve the corresponding layer and viewports from cache\nfunction decodeColor(encoded, pickedColor) {\n    const entry = encoded.byAlpha[pickedColor[3]];\n    return (entry && {\n        pickedLayer: entry.layer,\n        pickedViewports: entry.viewports,\n        pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)\n    });\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { Timeline } from '@luma.gl/engine';\nimport { getShaderAssembler } from \"../shaderlib/index.js\";\nimport { LIFECYCLE } from \"../lifecycle/constants.js\";\nimport log from \"../utils/log.js\";\nimport debug from \"../debug/index.js\";\nimport { flatten } from \"../utils/flatten.js\";\nimport { Stats } from '@probe.gl/stats';\nimport ResourceManager from \"./resource/resource-manager.js\";\nimport Viewport from \"../viewports/viewport.js\";\nconst TRACE_SET_LAYERS = 'layerManager.setLayers';\nconst TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\nexport default class LayerManager {\n    /**\n     * @param device\n     * @param param1\n     */\n    // eslint-disable-next-line\n    constructor(device, props) {\n        this._lastRenderedLayers = [];\n        this._needsRedraw = false;\n        this._needsUpdate = false;\n        this._nextLayers = null;\n        this._debug = false;\n        // This flag is separate from _needsUpdate because it can be set during an update and should trigger another full update\n        this._defaultShaderModulesChanged = false;\n        //\n        // INTERNAL METHODS\n        //\n        /** Make a viewport \"current\" in layer context, updating viewportChanged flags */\n        this.activateViewport = (viewport) => {\n            debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n            if (viewport) {\n                this.context.viewport = viewport;\n            }\n        };\n        const { deck, stats, viewport, timeline } = props || {};\n        // Currently deck.gl expects the DeckGL.layers array to be different\n        // whenever React rerenders. If the same layers array is used, the\n        // LayerManager's diffing algorithm will generate a fatal error and\n        // break the rendering.\n        // `this._lastRenderedLayers` stores the UNFILTERED layers sent\n        // down to LayerManager, so that `layers` reference can be compared.\n        // If it's the same across two React render calls, the diffing logic\n        // will be skipped.\n        this.layers = [];\n        this.resourceManager = new ResourceManager({ device, protocol: 'deck://' });\n        this.context = {\n            mousePosition: null,\n            userData: {},\n            layerManager: this,\n            device,\n            // @ts-expect-error\n            gl: device?.gl,\n            deck,\n            shaderAssembler: getShaderAssembler(),\n            defaultShaderModules: [],\n            renderPass: undefined,\n            stats: stats || new Stats({ id: 'deck.gl' }),\n            // Make sure context.viewport is not empty on the first layer initialization\n            viewport: viewport || new Viewport({ id: 'DEFAULT-INITIAL-VIEWPORT' }), // Current viewport, exposed to layers for project* function\n            timeline: timeline || new Timeline(),\n            resourceManager: this.resourceManager,\n            onError: undefined\n        };\n        Object.seal(this);\n    }\n    /** Method to call when the layer manager is not needed anymore. */\n    finalize() {\n        this.resourceManager.finalize();\n        // Finalize all layers\n        for (const layer of this.layers) {\n            this._finalizeLayer(layer);\n        }\n    }\n    /** Check if a redraw is needed */\n    needsRedraw(opts = { clearRedrawFlags: false }) {\n        let redraw = this._needsRedraw;\n        if (opts.clearRedrawFlags) {\n            this._needsRedraw = false;\n        }\n        // This layers list doesn't include sublayers, relying on composite layers\n        for (const layer of this.layers) {\n            // Call every layer to clear their flags\n            const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n            redraw = redraw || layerNeedsRedraw;\n        }\n        return redraw;\n    }\n    /** Check if a deep update of all layers is needed */\n    needsUpdate() {\n        if (this._nextLayers && this._nextLayers !== this._lastRenderedLayers) {\n            // New layers array may be the same as the old one if `setProps` is called by React\n            return 'layers changed';\n        }\n        if (this._defaultShaderModulesChanged) {\n            return 'shader modules changed';\n        }\n        return this._needsUpdate;\n    }\n    /** Layers will be redrawn (in next animation frame) */\n    setNeedsRedraw(reason) {\n        this._needsRedraw = this._needsRedraw || reason;\n    }\n    /** Layers will be updated deeply (in next animation frame)\n      Potentially regenerating attributes and sub layers */\n    setNeedsUpdate(reason) {\n        this._needsUpdate = this._needsUpdate || reason;\n    }\n    /** Gets a list of currently rendered layers. Optionally filter by id. */\n    getLayers({ layerIds } = {}) {\n        // Filtering by layerId compares beginning of strings, so that sublayers will be included\n        // Dependes on the convention of adding suffixes to the parent's layer name\n        return layerIds\n            ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n            : this.layers;\n    }\n    /** Set props needed for layer rendering and picking. */\n    setProps(props) {\n        if ('debug' in props) {\n            this._debug = props.debug;\n        }\n        // A way for apps to add data to context that can be accessed in layers\n        if ('userData' in props) {\n            this.context.userData = props.userData;\n        }\n        // New layers will be processed in `updateLayers` in the next update cycle\n        if ('layers' in props) {\n            this._nextLayers = props.layers;\n        }\n        if ('onError' in props) {\n            this.context.onError = props.onError;\n        }\n    }\n    /** Supply a new layer list, initiating sublayer generation and layer matching */\n    setLayers(newLayers, reason) {\n        debug(TRACE_SET_LAYERS, this, reason, newLayers);\n        this._lastRenderedLayers = newLayers;\n        const flatLayers = flatten(newLayers, Boolean);\n        for (const layer of flatLayers) {\n            layer.context = this.context;\n        }\n        this._updateLayers(this.layers, flatLayers);\n    }\n    /** Update layers from last cycle if `setNeedsUpdate()` has been called */\n    updateLayers() {\n        // NOTE: For now, even if only some layer has changed, we update all layers\n        // to ensure that layer id maps etc remain consistent even if different\n        // sublayers are rendered\n        const reason = this.needsUpdate();\n        if (reason) {\n            this.setNeedsRedraw(`updating layers: ${reason}`);\n            // Force a full update\n            this.setLayers(this._nextLayers || this._lastRenderedLayers, reason);\n        }\n        // Updated, clear the backlog\n        this._nextLayers = null;\n    }\n    /** Register a default shader module */\n    addDefaultShaderModule(module) {\n        const { defaultShaderModules } = this.context;\n        if (!defaultShaderModules.find(m => m.name === module.name)) {\n            defaultShaderModules.push(module);\n            this._defaultShaderModulesChanged = true;\n        }\n    }\n    /** Deregister a default shader module */\n    removeDefaultShaderModule(module) {\n        const { defaultShaderModules } = this.context;\n        const i = defaultShaderModules.findIndex(m => m.name === module.name);\n        if (i >= 0) {\n            defaultShaderModules.splice(i, 1);\n            this._defaultShaderModulesChanged = true;\n        }\n    }\n    _handleError(stage, error, layer) {\n        layer.raiseError(error, `${stage} of ${layer}`);\n    }\n    // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n    /** Match all layers, checking for caught errors\n      to avoid having an exception in one layer disrupt other layers */\n    _updateLayers(oldLayers, newLayers) {\n        // Create old layer map\n        const oldLayerMap = {};\n        for (const oldLayer of oldLayers) {\n            if (oldLayerMap[oldLayer.id]) {\n                log.warn(`Multiple old layers with same id ${oldLayer.id}`)();\n            }\n            else {\n                oldLayerMap[oldLayer.id] = oldLayer;\n            }\n        }\n        if (this._defaultShaderModulesChanged) {\n            for (const layer of oldLayers) {\n                layer.setNeedsUpdate();\n                layer.setChangeFlags({ extensionsChanged: true });\n            }\n            this._defaultShaderModulesChanged = false;\n        }\n        // Allocate array for generated layers\n        const generatedLayers = [];\n        // Match sublayers\n        this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n        // Finalize unmatched layers\n        this._finalizeOldLayers(oldLayerMap);\n        let needsUpdate = false;\n        for (const layer of generatedLayers) {\n            if (layer.hasUniformTransition()) {\n                needsUpdate = `Uniform transition in ${layer}`;\n                break;\n            }\n        }\n        this._needsUpdate = needsUpdate;\n        this.layers = generatedLayers;\n    }\n    /* eslint-disable complexity,max-statements */\n    // Note: adds generated layers to `generatedLayers` array parameter\n    _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n        for (const newLayer of newLayers) {\n            newLayer.context = this.context;\n            // Given a new coming layer, find its matching old layer (if any)\n            const oldLayer = oldLayerMap[newLayer.id];\n            if (oldLayer === null) {\n                // null, rather than undefined, means this id was originally there\n                log.warn(`Multiple new layers with same id ${newLayer.id}`)();\n            }\n            // Remove the old layer from candidates, as it has been matched with this layer\n            oldLayerMap[newLayer.id] = null;\n            let sublayers = null;\n            // We must not generate exceptions until after layer matching is complete\n            try {\n                if (this._debug && oldLayer !== newLayer) {\n                    newLayer.validateProps();\n                }\n                if (!oldLayer) {\n                    this._initializeLayer(newLayer);\n                }\n                else {\n                    this._transferLayerState(oldLayer, newLayer);\n                    this._updateLayer(newLayer);\n                }\n                generatedLayers.push(newLayer);\n                // Call layer lifecycle method: render sublayers\n                sublayers = newLayer.isComposite ? newLayer.getSubLayers() : null;\n                // End layer lifecycle method: render sublayers\n            }\n            catch (err) {\n                this._handleError('matching', err, newLayer); // Record first exception\n            }\n            if (sublayers) {\n                this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n            }\n        }\n    }\n    /* eslint-enable complexity,max-statements */\n    // Finalize any old layers that were not matched\n    _finalizeOldLayers(oldLayerMap) {\n        for (const layerId in oldLayerMap) {\n            const layer = oldLayerMap[layerId];\n            if (layer) {\n                this._finalizeLayer(layer);\n            }\n        }\n    }\n    // / EXCEPTION SAFE LAYER ACCESS\n    /** Safely initializes a single layer, calling layer methods */\n    _initializeLayer(layer) {\n        try {\n            layer._initialize();\n            layer.lifecycle = LIFECYCLE.INITIALIZED;\n        }\n        catch (err) {\n            this._handleError('initialization', err, layer);\n            // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n        }\n    }\n    /** Transfer state from one layer to a newer version */\n    _transferLayerState(oldLayer, newLayer) {\n        newLayer._transferState(oldLayer);\n        newLayer.lifecycle = LIFECYCLE.MATCHED;\n        if (newLayer !== oldLayer) {\n            oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n        }\n    }\n    /** Safely updates a single layer, cleaning all flags */\n    _updateLayer(layer) {\n        try {\n            layer._update();\n        }\n        catch (err) {\n            this._handleError('update', err, layer);\n        }\n    }\n    /** Safely finalizes a single layer, removing all resources */\n    _finalizeLayer(layer) {\n        this._needsRedraw = this._needsRedraw || `finalized ${layer}`;\n        layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n        try {\n            layer._finalize();\n            layer.lifecycle = LIFECYCLE.FINALIZED;\n        }\n        catch (err) {\n            this._handleError('finalization', err, layer);\n        }\n    }\n}\n", "export const LIFECYCLE = {\n    NO_STATE: 'Awaiting state',\n    MATCHED: 'Matched. State transferred from previous layer',\n    INITIALIZED: 'Initialized',\n    AWAITING_GC: 'Discarded. Awaiting garbage collection',\n    AWAITING_FINALIZATION: 'No longer matched. Awaiting garbage collection',\n    FINALIZED: 'Finalized! Awaiting garbage collection'\n};\n/* Secret props keys */\n// Symbols are non-enumerable by default, does not show in for...in or Object.keys\n// but are copied with Object.assign \u00AF\\_(\u30C4)_/\u00AF\n// Supported everywhere except IE11, can be polyfilled with core-js\nexport const COMPONENT_SYMBOL = Symbol.for('component');\nexport const PROP_TYPES_SYMBOL = Symbol.for('propTypes');\nexport const DEPRECATED_PROPS_SYMBOL = Symbol.for('deprecatedProps');\nexport const ASYNC_DEFAULTS_SYMBOL = Symbol.for('asyncPropDefaults');\nexport const ASYNC_ORIGINAL_SYMBOL = Symbol.for('asyncPropOriginal');\nexport const ASYNC_RESOLVED_SYMBOL = Symbol.for('asyncPropResolved');\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/**\n * Flattens a nested array into a single level array,\n * or a single value into an array with one value\n * @example flatten([[1, [2]], [3], 4]) => [1, 2, 3, 4]\n * @example flatten(1) => [1]\n * @param array The array to flatten.\n * @param filter= - Optional predicate called on each `value` to\n *   determine if it should be included (pushed onto) the resulting array.\n * @return Returns the new flattened array (new array or `result` if provided)\n */\nexport function flatten(array, filter = () => true) {\n    // Wrap single object in array\n    if (!Array.isArray(array)) {\n        return filter(array) ? [array] : [];\n    }\n    // Deep flatten and filter the array\n    return flattenArray(array, filter, []);\n}\n/** Deep flattens an array. Helper to `flatten`, see its parameters */\nfunction flattenArray(array, filter, result) {\n    let index = -1;\n    while (++index < array.length) {\n        const value = array[index];\n        if (Array.isArray(value)) {\n            flattenArray(value, filter, result);\n        }\n        else if (filter(value)) {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Uses copyWithin to significantly speed up typed array value filling */\nexport function fillArray({ target, source, start = 0, count = 1 }) {\n    const length = source.length;\n    const total = count * length;\n    let copied = 0;\n    for (let i = start; copied < length; copied++) {\n        target[i++] = source[copied];\n    }\n    while (copied < total) {\n        // If we have copied less than half, copy everything we got\n        // else copy remaining in one operation\n        if (copied < total - copied) {\n            target.copyWithin(start + copied, start, start + copied);\n            copied *= 2;\n        }\n        else {\n            target.copyWithin(start + copied, start, start + total - copied);\n            copied = total;\n        }\n    }\n    return target;\n}\n", "import { load } from '@loaders.gl/core';\nexport default class Resource {\n    constructor(id, data, context) {\n        this._loadCount = 0;\n        this._subscribers = new Set();\n        this.id = id;\n        this.context = context;\n        this.setData(data);\n    }\n    // consumer: {onChange: Function}\n    subscribe(consumer) {\n        this._subscribers.add(consumer);\n    }\n    unsubscribe(consumer) {\n        this._subscribers.delete(consumer);\n    }\n    inUse() {\n        return this._subscribers.size > 0;\n    }\n    delete() {\n        // Remove any resources created\n    }\n    getData() {\n        return this.isLoaded\n            ? this._error\n                ? Promise.reject(this._error)\n                : this._content\n            : this._loader.then(() => this.getData());\n    }\n    setData(data, forceUpdate) {\n        if (data === this._data && !forceUpdate) {\n            return;\n        }\n        this._data = data;\n        const loadCount = ++this._loadCount;\n        let loader = data;\n        if (typeof data === 'string') {\n            loader = load(data);\n        }\n        if (loader instanceof Promise) {\n            this.isLoaded = false;\n            this._loader = loader\n                .then(result => {\n                // check if source has changed\n                if (this._loadCount === loadCount) {\n                    this.isLoaded = true;\n                    this._error = undefined;\n                    this._content = result;\n                }\n            })\n                .catch(error => {\n                if (this._loadCount === loadCount) {\n                    this.isLoaded = true;\n                    this._error = error || true;\n                }\n            });\n        }\n        else {\n            this.isLoaded = true;\n            this._error = undefined;\n            this._content = data;\n        }\n        for (const subscriber of this._subscribers) {\n            subscriber.onChange(this.getData());\n        }\n    }\n}\n", "import Resource from \"./resource.js\";\nexport default class ResourceManager {\n    constructor(props) {\n        this.protocol = props.protocol || 'resource://';\n        this._context = {\n            device: props.device,\n            // @ts-expect-error\n            gl: props.device?.gl,\n            resourceManager: this\n        };\n        this._resources = {};\n        this._consumers = {};\n        this._pruneRequest = null;\n    }\n    contains(resourceId) {\n        if (resourceId.startsWith(this.protocol)) {\n            return true;\n        }\n        return resourceId in this._resources;\n    }\n    add({ resourceId, data, forceUpdate = false, persistent = true }) {\n        let res = this._resources[resourceId];\n        if (res) {\n            res.setData(data, forceUpdate);\n        }\n        else {\n            res = new Resource(resourceId, data, this._context);\n            this._resources[resourceId] = res;\n        }\n        // persistent resources can only be removed by calling `remove`\n        // non-persistent resources may be released when there are no more consumers\n        res.persistent = persistent;\n    }\n    remove(resourceId) {\n        const res = this._resources[resourceId];\n        if (res) {\n            res.delete();\n            delete this._resources[resourceId];\n        }\n    }\n    unsubscribe({ consumerId }) {\n        const consumer = this._consumers[consumerId];\n        if (consumer) {\n            for (const requestId in consumer) {\n                const request = consumer[requestId];\n                const resource = this._resources[request.resourceId];\n                if (resource) {\n                    resource.unsubscribe(request);\n                }\n            }\n            delete this._consumers[consumerId];\n            this.prune();\n        }\n    }\n    subscribe({ resourceId, onChange, consumerId, requestId = 'default' }) {\n        const { _resources: resources, protocol } = this;\n        if (resourceId.startsWith(protocol)) {\n            resourceId = resourceId.replace(protocol, '');\n            if (!resources[resourceId]) {\n                // Add placeholder. When this resource becomes available, the consumer will be notified.\n                this.add({ resourceId, data: null, persistent: false });\n            }\n        }\n        const res = resources[resourceId];\n        this._track(consumerId, requestId, res, onChange);\n        if (res) {\n            return res.getData();\n        }\n        return undefined;\n    }\n    prune() {\n        if (!this._pruneRequest) {\n            // prune() may be called multiple times in the same animation frame.\n            // Batch multiple requests together\n            // @ts-ignore setTimeout returns NodeJS.Timeout in node\n            this._pruneRequest = setTimeout(() => this._prune(), 0);\n        }\n    }\n    finalize() {\n        for (const key in this._resources) {\n            this._resources[key].delete();\n        }\n    }\n    _track(consumerId, requestId, resource, onChange) {\n        const consumers = this._consumers;\n        const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n        let request = consumer[requestId];\n        const oldResource = request && request.resourceId && this._resources[request.resourceId];\n        if (oldResource) {\n            oldResource.unsubscribe(request);\n            this.prune();\n        }\n        if (resource) {\n            if (request) {\n                request.onChange = onChange;\n                request.resourceId = resource.id;\n            }\n            else {\n                request = {\n                    onChange,\n                    resourceId: resource.id\n                };\n            }\n            consumer[requestId] = request;\n            resource.subscribe(request);\n        }\n    }\n    _prune() {\n        this._pruneRequest = null;\n        for (const key of Object.keys(this._resources)) {\n            const res = this._resources[key];\n            if (!res.persistent && !res.inUse()) {\n                res.delete();\n                delete this._resources[key];\n            }\n        }\n    }\n}\n", "/**\n * Fast partial deep equal for prop.\n *\n * @param a Prop\n * @param b Prop to compare against `a`\n * @param depth Depth to which to recurse in nested Objects/Arrays. Use 0 (default) for shallow comparison, -1 for infinite depth\n */\n/* eslint-disable complexity */\nexport function deepEqual(a, b, depth) {\n    if (a === b) {\n        return true;\n    }\n    if (!depth || !a || !b) {\n        return false;\n    }\n    if (Array.isArray(a)) {\n        if (!Array.isArray(b) || a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (!deepEqual(a[i], b[i], depth - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (Array.isArray(b)) {\n        return false;\n    }\n    if (typeof a === 'object' && typeof b === 'object') {\n        const aKeys = Object.keys(a);\n        const bKeys = Object.keys(b);\n        if (aKeys.length !== bKeys.length) {\n            return false;\n        }\n        for (const key of aKeys) {\n            if (!b.hasOwnProperty(key)) {\n                return false;\n            }\n            if (!deepEqual(a[key], b[key], depth - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { deepEqual } from \"../utils/deep-equal.js\";\nimport log from \"../utils/log.js\";\nimport { flatten } from \"../utils/flatten.js\";\nexport default class ViewManager {\n    constructor(props) {\n        // List of view descriptors, gets re-evaluated when width/height changes\n        this.views = [];\n        this.width = 100;\n        this.height = 100;\n        this.viewState = {};\n        this.controllers = {};\n        this.timeline = props.timeline;\n        this._viewports = []; // Generated viewports\n        this._viewportMap = {};\n        this._isUpdating = false;\n        this._needsRedraw = 'First render';\n        this._needsUpdate = 'Initialize';\n        this._eventManager = props.eventManager;\n        this._eventCallbacks = {\n            onViewStateChange: props.onViewStateChange,\n            onInteractionStateChange: props.onInteractionStateChange\n        };\n        Object.seal(this);\n        // Init with default map viewport\n        this.setProps(props);\n    }\n    /** Remove all resources and event listeners */\n    finalize() {\n        for (const key in this.controllers) {\n            const controller = this.controllers[key];\n            if (controller) {\n                controller.finalize();\n            }\n        }\n        this.controllers = {};\n    }\n    /** Check if a redraw is needed */\n    needsRedraw(opts = { clearRedrawFlags: false }) {\n        const redraw = this._needsRedraw;\n        if (opts.clearRedrawFlags) {\n            this._needsRedraw = false;\n        }\n        return redraw;\n    }\n    /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */\n    setNeedsUpdate(reason) {\n        this._needsUpdate = this._needsUpdate || reason;\n        this._needsRedraw = this._needsRedraw || reason;\n    }\n    /** Checks each viewport for transition updates */\n    updateViewStates() {\n        for (const viewId in this.controllers) {\n            const controller = this.controllers[viewId];\n            if (controller) {\n                controller.updateTransition();\n            }\n        }\n    }\n    /** Get a set of viewports for a given width and height\n     * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n     * @param rect (object, optional) - filter the viewports\n     *   + not provided - return all viewports\n     *   + {x, y} - only return viewports that contain this pixel\n     *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n     */\n    getViewports(rect) {\n        if (rect) {\n            return this._viewports.filter(viewport => viewport.containsPixel(rect));\n        }\n        return this._viewports;\n    }\n    /** Get a map of all views */\n    getViews() {\n        const viewMap = {};\n        this.views.forEach(view => {\n            viewMap[view.id] = view;\n        });\n        return viewMap;\n    }\n    /** Resolves a viewId string to a View */\n    getView(viewId) {\n        return this.views.find(view => view.id === viewId);\n    }\n    /** Returns the viewState for a specific viewId. Matches the viewState by\n      1. view.viewStateId\n      2. view.id\n      3. root viewState\n      then applies the view's filter if any */\n    getViewState(viewOrViewId) {\n        const view = typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n        // Backward compatibility: view state for single view\n        const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n        return view ? view.filterViewState(viewState) : viewState;\n    }\n    getViewport(viewId) {\n        return this._viewportMap[viewId];\n    }\n    /**\n     * Unproject pixel coordinates on screen onto world coordinates,\n     * (possibly [lon, lat]) on map.\n     * - [x, y] => [lng, lat]\n     * - [x, y, z] => [lng, lat, Z]\n     * @param {Array} xyz -\n     * @param {Object} opts - options\n     * @param {Object} opts.topLeft=true - Whether origin is top left\n     * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n     */\n    unproject(xyz, opts) {\n        const viewports = this.getViewports();\n        const pixel = { x: xyz[0], y: xyz[1] };\n        for (let i = viewports.length - 1; i >= 0; --i) {\n            const viewport = viewports[i];\n            if (viewport.containsPixel(pixel)) {\n                const p = xyz.slice();\n                p[0] -= viewport.x;\n                p[1] -= viewport.y;\n                return viewport.unproject(p, opts);\n            }\n        }\n        return null;\n    }\n    /** Update the manager with new Deck props */\n    setProps(props) {\n        if (props.views) {\n            this._setViews(props.views);\n        }\n        if (props.viewState) {\n            this._setViewState(props.viewState);\n        }\n        if ('width' in props || 'height' in props) {\n            this._setSize(props.width, props.height);\n        }\n        // Important: avoid invoking _update() inside itself\n        // Nested updates result in unexpected side effects inside _rebuildViewports()\n        // when using auto control in pure-js\n        if (!this._isUpdating) {\n            this._update();\n        }\n    }\n    //\n    // PRIVATE METHODS\n    //\n    _update() {\n        this._isUpdating = true;\n        // Only rebuild viewports if the update flag is set\n        if (this._needsUpdate) {\n            this._needsUpdate = false;\n            this._rebuildViewports();\n        }\n        // If viewport transition(s) are triggered during viewports update, controller(s)\n        // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n        if (this._needsUpdate) {\n            this._needsUpdate = false;\n            this._rebuildViewports();\n        }\n        this._isUpdating = false;\n    }\n    _setSize(width, height) {\n        if (width !== this.width || height !== this.height) {\n            this.width = width;\n            this.height = height;\n            this.setNeedsUpdate('Size changed');\n        }\n    }\n    // Update the view descriptor list and set change flag if needed\n    // Does not actually rebuild the `Viewport`s until `getViewports` is called\n    _setViews(views) {\n        views = flatten(views, Boolean);\n        const viewsChanged = this._diffViews(views, this.views);\n        if (viewsChanged) {\n            this.setNeedsUpdate('views changed');\n        }\n        this.views = views;\n    }\n    _setViewState(viewState) {\n        if (viewState) {\n            // depth = 3 when comparing viewStates: viewId.position.0\n            const viewStateChanged = !deepEqual(viewState, this.viewState, 3);\n            if (viewStateChanged) {\n                this.setNeedsUpdate('viewState changed');\n            }\n            this.viewState = viewState;\n        }\n        else {\n            log.warn('missing `viewState` or `initialViewState`')();\n        }\n    }\n    _createController(view, props) {\n        const Controller = props.type;\n        const controller = new Controller({\n            timeline: this.timeline,\n            eventManager: this._eventManager,\n            // Set an internal callback that calls the prop callback if provided\n            onViewStateChange: this._eventCallbacks.onViewStateChange,\n            onStateChange: this._eventCallbacks.onInteractionStateChange,\n            makeViewport: viewState => this.getView(view.id)?.makeViewport({\n                viewState,\n                width: this.width,\n                height: this.height\n            })\n        });\n        return controller;\n    }\n    _updateController(view, viewState, viewport, controller) {\n        const controllerProps = view.controller;\n        if (controllerProps && viewport) {\n            const resolvedProps = {\n                ...viewState,\n                ...controllerProps,\n                id: view.id,\n                x: viewport.x,\n                y: viewport.y,\n                width: viewport.width,\n                height: viewport.height\n            };\n            // Create controller if not already existing or if the type of the\n            // controller has changed.\n            if (!controller || controller.constructor !== controllerProps.type) {\n                controller = this._createController(view, resolvedProps);\n            }\n            if (controller) {\n                controller.setProps(resolvedProps);\n            }\n            return controller;\n        }\n        return null;\n    }\n    // Rebuilds viewports from descriptors towards a certain window size\n    _rebuildViewports() {\n        const { views } = this;\n        const oldControllers = this.controllers;\n        this._viewports = [];\n        this.controllers = {};\n        let invalidateControllers = false;\n        // Create controllers in reverse order, so that views on top receive events first\n        for (let i = views.length; i--;) {\n            const view = views[i];\n            const viewState = this.getViewState(view);\n            const viewport = view.makeViewport({ viewState, width: this.width, height: this.height });\n            let oldController = oldControllers[view.id];\n            const hasController = Boolean(view.controller);\n            if (hasController && !oldController) {\n                // When a new controller is added, invalidate all controllers below it so that\n                // events are registered in the correct order\n                invalidateControllers = true;\n            }\n            if ((invalidateControllers || !hasController) && oldController) {\n                // Remove and reattach invalidated controller\n                oldController.finalize();\n                oldController = null;\n            }\n            // Update the controller\n            this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n            if (viewport) {\n                this._viewports.unshift(viewport);\n            }\n        }\n        // Remove unused controllers\n        for (const id in oldControllers) {\n            const oldController = oldControllers[id];\n            if (oldController && !this.controllers[id]) {\n                oldController.finalize();\n            }\n        }\n        this._buildViewportMap();\n    }\n    _buildViewportMap() {\n        // Build a view id to view index\n        this._viewportMap = {};\n        this._viewports.forEach(viewport => {\n            if (viewport.id) {\n                // TODO - issue warning if multiple viewports use same id\n                this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n            }\n        });\n    }\n    // Check if viewport array has changed, returns true if any change\n    // Note that descriptors can be the same\n    _diffViews(newViews, oldViews) {\n        if (newViews.length !== oldViews.length) {\n            return true;\n        }\n        return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n    }\n}\n", "const PERCENT_OR_PIXELS_REGEX = /([0-9]+\\.?[0-9]*)(%|px)/;\n// Takes a number or a string of formats `50%`, `33.3%` or `200px`\nexport function parsePosition(value) {\n    switch (typeof value) {\n        case 'number':\n            return {\n                position: value,\n                relative: false\n            };\n        case 'string':\n            const match = PERCENT_OR_PIXELS_REGEX.exec(value);\n            if (match && match.length >= 3) {\n                const relative = match[2] === '%';\n                const position = parseFloat(match[1]);\n                return {\n                    position: relative ? position / 100 : position,\n                    relative\n                };\n            }\n        // fallthrough\n        default:\n            // eslint-disable-line\n            throw new Error(`Could not parse position string ${value}`);\n    }\n}\nexport function getPosition(position, extent) {\n    return position.relative ? Math.round(position.position * extent) : position.position;\n}\n", "import { parsePosition, getPosition } from \"../utils/positions.js\";\nimport { deepEqual } from \"../utils/deep-equal.js\";\nexport default class View {\n    constructor(props) {\n        const { id, x = 0, y = 0, width = '100%', height = '100%', padding = null } = props;\n        // @ts-ignore\n        this.id = id || this.constructor.displayName || 'view';\n        this.props = { ...props, id: this.id };\n        // Extents\n        this._x = parsePosition(x);\n        this._y = parsePosition(y);\n        this._width = parsePosition(width);\n        this._height = parsePosition(height);\n        this._padding = padding && {\n            left: parsePosition(padding.left || 0),\n            right: parsePosition(padding.right || 0),\n            top: parsePosition(padding.top || 0),\n            bottom: parsePosition(padding.bottom || 0)\n        };\n        // Bind methods for easy access\n        this.equals = this.equals.bind(this);\n        Object.seal(this);\n    }\n    equals(view) {\n        if (this === view) {\n            return true;\n        }\n        // To correctly compare padding use depth=2\n        return this.ViewportType === view.ViewportType && deepEqual(this.props, view.props, 2);\n    }\n    /** Make viewport from canvas dimensions and view state */\n    makeViewport({ width, height, viewState }) {\n        viewState = this.filterViewState(viewState);\n        // Resolve relative viewport dimensions\n        const viewportDimensions = this.getDimensions({ width, height });\n        if (!viewportDimensions.height || !viewportDimensions.width) {\n            return null;\n        }\n        return new this.ViewportType({ ...viewState, ...this.props, ...viewportDimensions });\n    }\n    getViewStateId() {\n        const { viewState } = this.props;\n        if (typeof viewState === 'string') {\n            // if View.viewState is a string, return it\n            return viewState;\n        }\n        return viewState?.id || this.id;\n    }\n    // Allows view to override (or completely define) viewState\n    filterViewState(viewState) {\n        if (this.props.viewState && typeof this.props.viewState === 'object') {\n            // If we have specified an id, then intent is to override,\n            // If not, completely specify the view state\n            if (!this.props.viewState.id) {\n                return this.props.viewState;\n            }\n            // Merge in all props from View's viewState, except id\n            const newViewState = { ...viewState };\n            for (const key in this.props.viewState) {\n                if (key !== 'id') {\n                    newViewState[key] = this.props.viewState[key];\n                }\n            }\n            return newViewState;\n        }\n        return viewState;\n    }\n    /** Resolve the dimensions of the view from overall canvas dimensions */\n    getDimensions({ width, height }) {\n        const dimensions = {\n            x: getPosition(this._x, width),\n            y: getPosition(this._y, height),\n            width: getPosition(this._width, width),\n            height: getPosition(this._height, height)\n        };\n        if (this._padding) {\n            dimensions.padding = {\n                left: getPosition(this._padding.left, width),\n                top: getPosition(this._padding.top, height),\n                right: getPosition(this._padding.right, width),\n                bottom: getPosition(this._padding.bottom, height)\n            };\n        }\n        return dimensions;\n    }\n    // Used by sub classes to resolve controller props\n    get controller() {\n        const opts = this.props.controller;\n        if (!opts) {\n            return null;\n        }\n        if (opts === true) {\n            return { type: this.ControllerType };\n        }\n        if (typeof opts === 'function') {\n            return { type: opts };\n        }\n        return { type: this.ControllerType, ...opts };\n    }\n}\n", "import { clamp } from '@math.gl/core';\nimport Controller from \"./controller.js\";\nimport ViewState from \"./view-state.js\";\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from \"../utils/assert.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n/* Utils */\nexport class MapState extends ViewState {\n    constructor(options) {\n        const { \n        /** Mapbox viewport properties */\n        /** The width of the viewport */\n        width, \n        /** The height of the viewport */\n        height, \n        /** The latitude at the center of the viewport */\n        latitude, \n        /** The longitude at the center of the viewport */\n        longitude, \n        /** The tile zoom level of the map. */\n        zoom, \n        /** The bearing of the viewport in degrees */\n        bearing = 0, \n        /** The pitch of the viewport in degrees */\n        pitch = 0, \n        /**\n         * Specify the altitude of the viewport camera\n         * Unit: map heights, default 1.5\n         * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n         */\n        altitude = 1.5, \n        /** Viewport position */\n        position = [0, 0, 0], \n        /** Viewport constraints */\n        maxZoom = 20, minZoom = 0, maxPitch = 60, minPitch = 0, \n        /** Interaction states, required to calculate change during transform */\n        /* The point on map being grabbed when the operation first started */\n        startPanLngLat, \n        /* Center of the zoom when the operation first started */\n        startZoomLngLat, \n        /* Pointer position when rotation started */\n        startRotatePos, \n        /** Bearing when current perspective rotate operation started */\n        startBearing, \n        /** Pitch when current perspective rotate operation started */\n        startPitch, \n        /** Zoom when current zoom operation started */\n        startZoom, \n        /** Normalize viewport props to fit map height into viewport */\n        normalize = true } = options;\n        assert(Number.isFinite(longitude)); // `longitude` must be supplied\n        assert(Number.isFinite(latitude)); // `latitude` must be supplied\n        assert(Number.isFinite(zoom)); // `zoom` must be supplied\n        super({\n            width,\n            height,\n            latitude,\n            longitude,\n            zoom,\n            bearing,\n            pitch,\n            altitude,\n            maxZoom,\n            minZoom,\n            maxPitch,\n            minPitch,\n            normalize,\n            position\n        }, {\n            startPanLngLat,\n            startZoomLngLat,\n            startRotatePos,\n            startBearing,\n            startPitch,\n            startZoom\n        });\n        this.makeViewport = options.makeViewport;\n    }\n    /**\n     * Start panning\n     * @param {[Number, Number]} pos - position on screen where the pointer grabs\n     */\n    panStart({ pos }) {\n        return this._getUpdatedState({\n            startPanLngLat: this._unproject(pos)\n        });\n    }\n    /**\n     * Pan\n     * @param {[Number, Number]} pos - position on screen where the pointer is\n     * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n     *   the start of the operation. Must be supplied of `panStart()` was not called\n     */\n    pan({ pos, startPos }) {\n        const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n        if (!startPanLngLat) {\n            return this;\n        }\n        const viewport = this.makeViewport(this.getViewportProps());\n        const newProps = viewport.panByPosition(startPanLngLat, pos);\n        return this._getUpdatedState(newProps);\n    }\n    /**\n     * End panning\n     * Must call if `panStart()` was called\n     */\n    panEnd() {\n        return this._getUpdatedState({\n            startPanLngLat: null\n        });\n    }\n    /**\n     * Start rotating\n     * @param {[Number, Number]} pos - position on screen where the center is\n     */\n    rotateStart({ pos }) {\n        return this._getUpdatedState({\n            startRotatePos: pos,\n            startBearing: this.getViewportProps().bearing,\n            startPitch: this.getViewportProps().pitch\n        });\n    }\n    /**\n     * Rotate\n     * @param {[Number, Number]} pos - position on screen where the center is\n     */\n    rotate({ pos, deltaAngleX = 0, deltaAngleY = 0 }) {\n        const { startRotatePos, startBearing, startPitch } = this.getState();\n        if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n            return this;\n        }\n        let newRotation;\n        if (pos) {\n            newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n        }\n        else {\n            newRotation = {\n                bearing: startBearing + deltaAngleX,\n                pitch: startPitch + deltaAngleY\n            };\n        }\n        return this._getUpdatedState(newRotation);\n    }\n    /**\n     * End rotating\n     * Must call if `rotateStart()` was called\n     */\n    rotateEnd() {\n        return this._getUpdatedState({\n            startBearing: null,\n            startPitch: null\n        });\n    }\n    /**\n     * Start zooming\n     * @param {[Number, Number]} pos - position on screen where the center is\n     */\n    zoomStart({ pos }) {\n        return this._getUpdatedState({\n            startZoomLngLat: this._unproject(pos),\n            startZoom: this.getViewportProps().zoom\n        });\n    }\n    /**\n     * Zoom\n     * @param {[Number, Number]} pos - position on screen where the current center is\n     * @param {[Number, Number]} startPos - the center position at\n     *   the start of the operation. Must be supplied of `zoomStart()` was not called\n     * @param {Number} scale - a number between [0, 1] specifying the accumulated\n     *   relative scale.\n     */\n    zoom({ pos, startPos, scale }) {\n        // Make sure we zoom around the current mouse position rather than map center\n        let { startZoom, startZoomLngLat } = this.getState();\n        if (!startZoomLngLat) {\n            // We have two modes of zoom:\n            // scroll zoom that are discrete events (transform from the current zoom level),\n            // and pinch zoom that are continuous events (transform from the zoom level when\n            // pinch started).\n            // If startZoom state is defined, then use the startZoom state;\n            // otherwise assume discrete zooming\n            startZoom = this.getViewportProps().zoom;\n            startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n        }\n        if (!startZoomLngLat) {\n            return this;\n        }\n        const { maxZoom, minZoom } = this.getViewportProps();\n        let zoom = startZoom + Math.log2(scale);\n        zoom = clamp(zoom, minZoom, maxZoom);\n        const zoomedViewport = this.makeViewport({ ...this.getViewportProps(), zoom });\n        return this._getUpdatedState({\n            zoom,\n            ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n        });\n    }\n    /**\n     * End zooming\n     * Must call if `zoomStart()` was called\n     */\n    zoomEnd() {\n        return this._getUpdatedState({\n            startZoomLngLat: null,\n            startZoom: null\n        });\n    }\n    zoomIn(speed = 2) {\n        return this._zoomFromCenter(speed);\n    }\n    zoomOut(speed = 2) {\n        return this._zoomFromCenter(1 / speed);\n    }\n    moveLeft(speed = 100) {\n        return this._panFromCenter([speed, 0]);\n    }\n    moveRight(speed = 100) {\n        return this._panFromCenter([-speed, 0]);\n    }\n    moveUp(speed = 100) {\n        return this._panFromCenter([0, speed]);\n    }\n    moveDown(speed = 100) {\n        return this._panFromCenter([0, -speed]);\n    }\n    rotateLeft(speed = 15) {\n        return this._getUpdatedState({\n            bearing: this.getViewportProps().bearing - speed\n        });\n    }\n    rotateRight(speed = 15) {\n        return this._getUpdatedState({\n            bearing: this.getViewportProps().bearing + speed\n        });\n    }\n    rotateUp(speed = 10) {\n        return this._getUpdatedState({\n            pitch: this.getViewportProps().pitch + speed\n        });\n    }\n    rotateDown(speed = 10) {\n        return this._getUpdatedState({\n            pitch: this.getViewportProps().pitch - speed\n        });\n    }\n    shortestPathFrom(viewState) {\n        // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n        const fromProps = viewState.getViewportProps();\n        const props = { ...this.getViewportProps() };\n        const { bearing, longitude } = props;\n        if (Math.abs(bearing - fromProps.bearing) > 180) {\n            props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n        }\n        if (Math.abs(longitude - fromProps.longitude) > 180) {\n            props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n        }\n        return props;\n    }\n    // Apply any constraints (mathematical or defined by _viewportProps) to map state\n    applyConstraints(props) {\n        // Ensure zoom is within specified range\n        const { maxZoom, minZoom, zoom } = props;\n        props.zoom = clamp(zoom, minZoom, maxZoom);\n        // Ensure pitch is within specified range\n        const { maxPitch, minPitch, pitch } = props;\n        props.pitch = clamp(pitch, minPitch, maxPitch);\n        // Normalize viewport props to fit map height into viewport\n        const { normalize = true } = props;\n        if (normalize) {\n            Object.assign(props, normalizeViewportProps(props));\n        }\n        return props;\n    }\n    /* Private methods */\n    _zoomFromCenter(scale) {\n        const { width, height } = this.getViewportProps();\n        return this.zoom({\n            pos: [width / 2, height / 2],\n            scale\n        });\n    }\n    _panFromCenter(offset) {\n        const { width, height } = this.getViewportProps();\n        return this.pan({\n            startPos: [width / 2, height / 2],\n            pos: [width / 2 + offset[0], height / 2 + offset[1]]\n        });\n    }\n    _getUpdatedState(newProps) {\n        // @ts-ignore\n        return new this.constructor({\n            makeViewport: this.makeViewport,\n            ...this.getViewportProps(),\n            ...this.getState(),\n            ...newProps\n        });\n    }\n    _unproject(pos) {\n        const viewport = this.makeViewport(this.getViewportProps());\n        // @ts-ignore\n        return pos && viewport.unproject(pos);\n    }\n    _getNewRotation(pos, startPos, startPitch, startBearing) {\n        const deltaX = pos[0] - startPos[0];\n        const deltaY = pos[1] - startPos[1];\n        const centerY = pos[1];\n        const startY = startPos[1];\n        const { width, height } = this.getViewportProps();\n        const deltaScaleX = deltaX / width;\n        let deltaScaleY = 0;\n        if (deltaY > 0) {\n            if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n                // Move from 0 to -1 as we drag upwards\n                deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n            }\n        }\n        else if (deltaY < 0) {\n            if (startY > PITCH_MOUSE_THRESHOLD) {\n                // Move from 0 to 1 as we drag upwards\n                deltaScaleY = 1 - centerY / startY;\n            }\n        }\n        // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n        // deltaScaleX does not need to be clamped as bearing does not have constraints.\n        deltaScaleY = clamp(deltaScaleY, -1, 1);\n        const { minPitch, maxPitch } = this.getViewportProps();\n        const bearing = startBearing + 180 * deltaScaleX;\n        let pitch = startPitch;\n        if (deltaScaleY > 0) {\n            // Gradually increase pitch\n            pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n        }\n        else if (deltaScaleY < 0) {\n            // Gradually decrease pitch\n            pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n        }\n        return {\n            pitch,\n            bearing\n        };\n    }\n}\nexport default class MapController extends Controller {\n    constructor() {\n        super(...arguments);\n        this.ControllerState = MapState;\n        this.transition = {\n            transitionDuration: 300,\n            transitionInterpolator: new LinearInterpolator({\n                transitionProps: {\n                    compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n                    required: ['longitude', 'latitude', 'zoom']\n                }\n            })\n        };\n        this.dragMode = 'pan';\n    }\n    setProps(props) {\n        props.position = props.position || [0, 0, 0];\n        const oldProps = this.props;\n        super.setProps(props);\n        const dimensionChanged = !oldProps || oldProps.height !== props.height;\n        if (dimensionChanged) {\n            // Dimensions changed, normalize the props\n            this.updateViewport(new this.ControllerState({\n                makeViewport: this.makeViewport,\n                ...props,\n                ...this.state\n            }));\n        }\n    }\n}\n", "export default class Transition {\n    /**\n     * @params timeline {Timeline}\n     */\n    constructor(timeline) {\n        this._inProgress = false;\n        this._handle = null;\n        this.time = 0;\n        // @ts-expect-error\n        this.settings = {\n            duration: 0\n        };\n        this._timeline = timeline;\n    }\n    /* Public API */\n    get inProgress() {\n        return this._inProgress;\n    }\n    /**\n     * (re)start this transition.\n     * @params props {object} - optional overriding props. see constructor\n     */\n    start(settings) {\n        this.cancel();\n        // @ts-expect-error\n        this.settings = settings;\n        this._inProgress = true;\n        this.settings.onStart?.(this);\n    }\n    /**\n     * end this transition if it is in progress.\n     */\n    end() {\n        if (this._inProgress) {\n            this._timeline.removeChannel(this._handle);\n            this._handle = null;\n            this._inProgress = false;\n            this.settings.onEnd?.(this);\n        }\n    }\n    /**\n     * cancel this transition if it is in progress.\n     */\n    cancel() {\n        if (this._inProgress) {\n            this.settings.onInterrupt?.(this);\n            this._timeline.removeChannel(this._handle);\n            this._handle = null;\n            this._inProgress = false;\n        }\n    }\n    /**\n     * update this transition. Returns `true` if updated.\n     */\n    update() {\n        if (!this._inProgress) {\n            return false;\n        }\n        // It is important to initialize the handle during `update` instead of `start`.\n        // The CPU time that the `start` frame takes should not be counted towards the duration.\n        // On the other hand, `update` always happens during a render cycle. The clock starts when the\n        // transition is rendered for the first time.\n        if (this._handle === null) {\n            const { _timeline: timeline, settings } = this;\n            this._handle = timeline.addChannel({\n                delay: timeline.getTime(),\n                duration: settings.duration\n            });\n        }\n        this.time = this._timeline.getTime(this._handle);\n        // Call subclass method\n        this._onUpdate();\n        // Call user callback\n        this.settings.onUpdate?.(this);\n        // This only works if `settings.duration` is set\n        // Spring transition must call `end` manually\n        if (this._timeline.isFinished(this._handle)) {\n            this.end();\n        }\n        return true;\n    }\n    /* Private API */\n    _onUpdate() {\n        // for subclass override\n    }\n}\n", "import Transition from \"../transitions/transition.js\";\nconst noop = () => { };\n// Enums cannot be directly exported as they are not transpiled correctly into ES5, see https://github.com/visgl/deck.gl/issues/7130\nexport const TRANSITION_EVENTS = {\n    BREAK: 1,\n    SNAP_TO_END: 2,\n    IGNORE: 3\n};\nconst DEFAULT_EASING = t => t;\nconst DEFAULT_INTERRUPTION = TRANSITION_EVENTS.BREAK;\nexport default class TransitionManager {\n    constructor(opts) {\n        this._onTransitionUpdate = transition => {\n            // NOTE: Be cautious re-ordering statements in this function.\n            const { time, settings: { interpolator, startProps, endProps, duration, easing } } = transition;\n            const t = easing(time / duration);\n            const viewport = interpolator.interpolateProps(startProps, endProps, t);\n            // This gurantees all props (e.g. bearing, longitude) are normalized\n            // So when viewports are compared they are in same range.\n            this.propsInTransition = this.getControllerState({\n                ...this.props,\n                ...viewport\n            }).getViewportProps();\n            this.onViewStateChange({\n                viewState: this.propsInTransition,\n                oldViewState: this.props\n            });\n        };\n        this.getControllerState = opts.getControllerState;\n        this.propsInTransition = null;\n        this.transition = new Transition(opts.timeline);\n        this.onViewStateChange = opts.onViewStateChange || noop;\n        this.onStateChange = opts.onStateChange || noop;\n    }\n    finalize() {\n        this.transition.cancel();\n    }\n    // Returns current transitioned viewport.\n    getViewportInTransition() {\n        return this.propsInTransition;\n    }\n    // Process the vewiport change, either ignore or trigger a new transition.\n    // Return true if a new transition is triggered, false otherwise.\n    processViewStateChange(nextProps) {\n        let transitionTriggered = false;\n        const currentProps = this.props;\n        // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n        this.props = nextProps;\n        // NOTE: Be cautious re-ordering statements in this function.\n        if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n            return false;\n        }\n        if (this._isTransitionEnabled(nextProps)) {\n            let startProps = currentProps;\n            if (this.transition.inProgress) {\n                // @ts-expect-error\n                const { interruption, endProps } = this.transition.settings;\n                startProps = {\n                    ...currentProps,\n                    ...(interruption === TRANSITION_EVENTS.SNAP_TO_END\n                        ? endProps\n                        : this.propsInTransition || currentProps)\n                };\n            }\n            this._triggerTransition(startProps, nextProps);\n            transitionTriggered = true;\n        }\n        else {\n            this.transition.cancel();\n        }\n        return transitionTriggered;\n    }\n    updateTransition() {\n        this.transition.update();\n    }\n    // Helper methods\n    _isTransitionEnabled(props) {\n        const { transitionDuration, transitionInterpolator } = props;\n        return ((transitionDuration > 0 || transitionDuration === 'auto') &&\n            Boolean(transitionInterpolator));\n    }\n    _isUpdateDueToCurrentTransition(props) {\n        if (this.transition.inProgress && this.propsInTransition) {\n            // @ts-expect-error\n            return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n        }\n        return false;\n    }\n    _shouldIgnoreViewportChange(currentProps, nextProps) {\n        if (this.transition.inProgress) {\n            // @ts-expect-error\n            const transitionSettings = this.transition.settings;\n            // Ignore update if it is requested to be ignored\n            return (transitionSettings.interruption === TRANSITION_EVENTS.IGNORE ||\n                // Ignore update if it is due to current active transition.\n                this._isUpdateDueToCurrentTransition(nextProps));\n        }\n        if (this._isTransitionEnabled(nextProps)) {\n            // Ignore if none of the viewport props changed.\n            return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n        }\n        return true;\n    }\n    _triggerTransition(startProps, endProps) {\n        const startViewstate = this.getControllerState(startProps);\n        const endViewStateProps = this.getControllerState(endProps).shortestPathFrom(startViewstate);\n        // update transitionDuration for 'auto' mode\n        const transitionInterpolator = endProps.transitionInterpolator;\n        const duration = transitionInterpolator.getDuration\n            ? transitionInterpolator.getDuration(startProps, endProps)\n            : endProps.transitionDuration;\n        if (duration === 0) {\n            return;\n        }\n        const initialProps = transitionInterpolator.initializeProps(startProps, endViewStateProps);\n        this.propsInTransition = {};\n        const transitionSettings = {\n            duration,\n            easing: endProps.transitionEasing || DEFAULT_EASING,\n            interpolator: transitionInterpolator,\n            interruption: endProps.transitionInterruption || DEFAULT_INTERRUPTION,\n            startProps: initialProps.start,\n            endProps: initialProps.end,\n            onStart: endProps.onTransitionStart,\n            onUpdate: this._onTransitionUpdate,\n            onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n            onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n        };\n        this.transition.start(transitionSettings);\n        this.onStateChange({ inTransition: true });\n        this.updateTransition();\n    }\n    _onTransitionEnd(callback) {\n        return transition => {\n            this.propsInTransition = null;\n            this.onStateChange({\n                inTransition: false,\n                isZooming: false,\n                isPanning: false,\n                isRotating: false\n            });\n            callback?.(transition);\n        };\n    }\n}\n", "import { equals } from '@math.gl/core';\nimport assert from \"../utils/assert.js\";\nexport default class TransitionInterpolator {\n    /**\n     * @param opts {array|object}\n     * @param opts.compare {array} - prop names used in equality check\n     * @param opts.extract {array} - prop names needed for interpolation\n     * @param opts.required {array} - prop names that must be supplied\n     * alternatively, supply one list of prop names as `opts` if all of the above are the same.\n     */\n    constructor(opts) {\n        const { compare, extract, required } = opts;\n        this._propsToCompare = compare;\n        this._propsToExtract = extract || compare;\n        this._requiredProps = required;\n    }\n    /**\n     * Checks if two sets of props need transition in between\n     * @param currentProps {object} - a list of viewport props\n     * @param nextProps {object} - a list of viewport props\n     * @returns {bool} - true if two props are equivalent\n     */\n    arePropsEqual(currentProps, nextProps) {\n        for (const key of this._propsToCompare) {\n            if (!(key in currentProps) ||\n                !(key in nextProps) ||\n                !equals(currentProps[key], nextProps[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Called before transition starts to validate/pre-process start and end props\n     * @param startProps {object} - a list of starting viewport props\n     * @param endProps {object} - a list of target viewport props\n     * @returns {Object} {start, end} - start and end props to be passed\n     *   to `interpolateProps`\n     */\n    initializeProps(startProps, endProps) {\n        const startViewStateProps = {};\n        const endViewStateProps = {};\n        for (const key of this._propsToExtract) {\n            if (key in startProps || key in endProps) {\n                startViewStateProps[key] = startProps[key];\n                endViewStateProps[key] = endProps[key];\n            }\n        }\n        this._checkRequiredProps(startViewStateProps);\n        this._checkRequiredProps(endViewStateProps);\n        return { start: startViewStateProps, end: endViewStateProps };\n    }\n    /**\n     * Returns transition duration\n     * @param startProps {object} - a list of starting viewport props\n     * @param endProps {object} - a list of target viewport props\n     * @returns {Number} - transition duration in milliseconds\n     */\n    getDuration(startProps, endProps) {\n        return endProps.transitionDuration;\n    }\n    _checkRequiredProps(props) {\n        if (!this._requiredProps) {\n            return;\n        }\n        this._requiredProps.forEach(propName => {\n            const value = props[propName];\n            assert(Number.isFinite(value) || Array.isArray(value), `${propName} is required for transition`);\n        });\n    }\n}\n", "// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\nexport default function assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || 'deck.gl: assertion failed.');\n    }\n}\n", "import TransitionInterpolator from \"./transition-interpolator.js\";\nimport { lerp } from '@math.gl/core';\nconst DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];\n/**\n * Performs linear interpolation of two view states.\n */\nexport default class LinearInterpolator extends TransitionInterpolator {\n    /**\n     * @param {Object} opts\n     * @param {Array} opts.transitionProps - list of props to apply linear transition to.\n     * @param {Array} opts.around - a screen point to zoom/rotate around.\n     * @param {Function} opts.makeViewport - construct a viewport instance with given props.\n     */\n    constructor(opts = {}) {\n        // Backward compatibility\n        const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;\n        const normalizedOpts = Array.isArray(opts) ? {} : opts;\n        normalizedOpts.transitionProps = Array.isArray(transitionProps)\n            ? {\n                compare: transitionProps,\n                required: transitionProps\n            }\n            : transitionProps || {\n                compare: DEFAULT_PROPS,\n                required: DEFAULT_REQUIRED_PROPS\n            };\n        super(normalizedOpts.transitionProps);\n        this.opts = normalizedOpts;\n    }\n    initializeProps(startProps, endProps) {\n        const result = super.initializeProps(startProps, endProps);\n        const { makeViewport, around } = this.opts;\n        if (makeViewport && around) {\n            const startViewport = makeViewport(startProps);\n            const endViewport = makeViewport(endProps);\n            const aroundPosition = startViewport.unproject(around);\n            result.start.around = around;\n            Object.assign(result.end, {\n                around: endViewport.project(aroundPosition),\n                aroundPosition,\n                width: endProps.width,\n                height: endProps.height\n            });\n        }\n        return result;\n    }\n    interpolateProps(startProps, endProps, t) {\n        const propsInTransition = {};\n        for (const key of this._propsToExtract) {\n            propsInTransition[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n        }\n        if (endProps.aroundPosition && this.opts.makeViewport) {\n            // Linear transition should be performed in common space\n            const viewport = this.opts.makeViewport({ ...endProps, ...propsInTransition });\n            Object.assign(propsInTransition, viewport.panByPosition(endProps.aroundPosition, \n            // anchor point in current screen coordinates\n            lerp(startProps.around, endProps.around, t)));\n        }\n        return propsInTransition;\n    }\n}\n", "// Copyright (c) 2015 Uber Technologies, Inc.\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable max-statements, complexity */\nimport TransitionManager from \"./transition-manager.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nconst NO_TRANSITION_PROPS = {\n    transitionDuration: 0\n};\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\nconst EVENT_TYPES = {\n    WHEEL: ['wheel'],\n    PAN: ['panstart', 'panmove', 'panend'],\n    PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n    TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n    DOUBLE_TAP: ['doubletap'],\n    KEYBOARD: ['keydown']\n};\nconst pinchEventWorkaround = {};\nexport default class Controller {\n    constructor(opts) {\n        this.state = {};\n        this._events = {};\n        this._interactionState = {\n            isDragging: false\n        };\n        this._customEvents = [];\n        this._eventStartBlocked = null;\n        this._panMove = false;\n        this.invertPan = false;\n        this.dragMode = 'rotate';\n        this.inertia = 0;\n        this.scrollZoom = true;\n        this.dragPan = true;\n        this.dragRotate = true;\n        this.doubleClickZoom = true;\n        this.touchZoom = true;\n        this.touchRotate = false;\n        this.keyboard = true;\n        this.transitionManager = new TransitionManager({\n            ...opts,\n            getControllerState: props => new this.ControllerState(props),\n            onViewStateChange: this._onTransition.bind(this),\n            onStateChange: this._setInteractionState.bind(this)\n        });\n        this.handleEvent = this.handleEvent.bind(this);\n        this.eventManager = opts.eventManager;\n        this.onViewStateChange = opts.onViewStateChange || (() => { });\n        this.onStateChange = opts.onStateChange || (() => { });\n        this.makeViewport = opts.makeViewport;\n    }\n    set events(customEvents) {\n        this.toggleEvents(this._customEvents, false);\n        this.toggleEvents(customEvents, true);\n        this._customEvents = customEvents;\n        // Make sure default events are not overwritten\n        if (this.props) {\n            this.setProps(this.props);\n        }\n    }\n    finalize() {\n        for (const eventName in this._events) {\n            if (this._events[eventName]) {\n                // @ts-ignore (2345) event type string cannot be assifned to enum\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                this.eventManager?.off(eventName, this.handleEvent);\n            }\n        }\n        this.transitionManager.finalize();\n    }\n    /**\n     * Callback for events\n     */\n    handleEvent(event) {\n        // Force recalculate controller state\n        this._controllerState = undefined;\n        const eventStartBlocked = this._eventStartBlocked;\n        switch (event.type) {\n            case 'panstart':\n                return eventStartBlocked ? false : this._onPanStart(event);\n            case 'panmove':\n                return this._onPan(event);\n            case 'panend':\n                return this._onPanEnd(event);\n            case 'pinchstart':\n                return eventStartBlocked ? false : this._onPinchStart(event);\n            case 'pinchmove':\n                return this._onPinch(event);\n            case 'pinchend':\n                return this._onPinchEnd(event);\n            case 'tripanstart':\n                return eventStartBlocked ? false : this._onTriplePanStart(event);\n            case 'tripanmove':\n                return this._onTriplePan(event);\n            case 'tripanend':\n                return this._onTriplePanEnd(event);\n            case 'doubletap':\n                return this._onDoubleTap(event);\n            case 'wheel':\n                return this._onWheel(event);\n            case 'keydown':\n                return this._onKeyDown(event);\n            default:\n                return false;\n        }\n    }\n    /* Event utils */\n    // Event object: http://hammerjs.github.io/api/#event-object\n    get controllerState() {\n        this._controllerState = this._controllerState || new this.ControllerState({\n            makeViewport: this.makeViewport,\n            ...this.props,\n            ...this.state\n        });\n        return this._controllerState;\n    }\n    getCenter(event) {\n        const { x, y } = this.props;\n        const { offsetCenter } = event;\n        return [offsetCenter.x - x, offsetCenter.y - y];\n    }\n    isPointInBounds(pos, event) {\n        const { width, height } = this.props;\n        if (event && event.handled) {\n            return false;\n        }\n        const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n        if (inside && event) {\n            event.stopPropagation();\n        }\n        return inside;\n    }\n    isFunctionKeyPressed(event) {\n        const { srcEvent } = event;\n        return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n    isDragging() {\n        return this._interactionState.isDragging || false;\n    }\n    // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n    // This triggers a brief `pan` event.\n    // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n    blockEvents(timeout) {\n        /* global setTimeout */\n        const timer = setTimeout(() => {\n            if (this._eventStartBlocked === timer) {\n                this._eventStartBlocked = null;\n            }\n        }, timeout);\n        this._eventStartBlocked = timer;\n    }\n    /**\n     * Extract interactivity options\n     */\n    setProps(props) {\n        if (props.dragMode) {\n            this.dragMode = props.dragMode;\n        }\n        this.props = props;\n        if (!('transitionInterpolator' in props)) {\n            // Add default transition interpolator\n            props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n        }\n        this.transitionManager.processViewStateChange(props);\n        const { inertia } = props;\n        this.inertia = Number.isFinite(inertia) ? inertia : (inertia === true ? DEFAULT_INERTIA : 0);\n        // TODO - make sure these are not reset on every setProps\n        const { scrollZoom = true, dragPan = true, dragRotate = true, doubleClickZoom = true, touchZoom = true, touchRotate = false, keyboard = true } = props;\n        // Register/unregister events\n        const isInteractive = Boolean(this.onViewStateChange);\n        this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n        // We always need the pan events to set the correct isDragging state, even if dragPan & dragRotate are both false\n        this.toggleEvents(EVENT_TYPES.PAN, isInteractive);\n        this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n        this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n        this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n        this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n        // Interaction toggles\n        this.scrollZoom = scrollZoom;\n        this.dragPan = dragPan;\n        this.dragRotate = dragRotate;\n        this.doubleClickZoom = doubleClickZoom;\n        this.touchZoom = touchZoom;\n        this.touchRotate = touchRotate;\n        this.keyboard = keyboard;\n    }\n    updateTransition() {\n        this.transitionManager.updateTransition();\n    }\n    toggleEvents(eventNames, enabled) {\n        if (this.eventManager) {\n            eventNames.forEach(eventName => {\n                if (this._events[eventName] !== enabled) {\n                    this._events[eventName] = enabled;\n                    if (enabled) {\n                        // eslint-disable-next-line @typescript-eslint/unbound-method\n                        this.eventManager.on(eventName, this.handleEvent);\n                    }\n                    else {\n                        // eslint-disable-next-line @typescript-eslint/unbound-method\n                        this.eventManager.off(eventName, this.handleEvent);\n                    }\n                }\n            });\n        }\n    }\n    // Private Methods\n    /* Callback util */\n    // formats map state and invokes callback function\n    updateViewport(newControllerState, extraProps = null, interactionState = {}) {\n        const viewState = { ...newControllerState.getViewportProps(), ...extraProps };\n        // TODO - to restore diffing, we need to include interactionState\n        const changed = this.controllerState !== newControllerState;\n        // const oldViewState = this.controllerState.getViewportProps();\n        // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n        this.state = newControllerState.getState();\n        this._setInteractionState(interactionState);\n        if (changed) {\n            const oldViewState = this.controllerState && this.controllerState.getViewportProps();\n            if (this.onViewStateChange) {\n                this.onViewStateChange({ viewState, interactionState: this._interactionState, oldViewState, viewId: this.props.id });\n            }\n        }\n    }\n    _onTransition(params) {\n        this.onViewStateChange({ ...params, interactionState: this._interactionState, viewId: this.props.id });\n    }\n    _setInteractionState(newStates) {\n        Object.assign(this._interactionState, newStates);\n        this.onStateChange(this._interactionState);\n    }\n    /* Event handlers */\n    // Default handler for the `panstart` event.\n    _onPanStart(event) {\n        const pos = this.getCenter(event);\n        if (!this.isPointInBounds(pos, event)) {\n            return false;\n        }\n        let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;\n        if (this.invertPan || this.dragMode === 'pan') {\n            // invertPan is replaced by props.dragMode, keeping for backward compatibility\n            alternateMode = !alternateMode;\n        }\n        const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n            pos\n        });\n        this._panMove = alternateMode;\n        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });\n        return true;\n    }\n    // Default handler for the `panmove` and `panend` event.\n    _onPan(event) {\n        if (!this.isDragging()) {\n            return false;\n        }\n        return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n    }\n    _onPanEnd(event) {\n        if (!this.isDragging()) {\n            return false;\n        }\n        return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n    }\n    // Default handler for panning to move.\n    // Called by `_onPan` when panning without function key pressed.\n    _onPanMove(event) {\n        if (!this.dragPan) {\n            return false;\n        }\n        const pos = this.getCenter(event);\n        const newControllerState = this.controllerState.pan({ pos });\n        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n            isDragging: true,\n            isPanning: true\n        });\n        return true;\n    }\n    _onPanMoveEnd(event) {\n        const { inertia } = this;\n        if (this.dragPan && inertia && event.velocity) {\n            const pos = this.getCenter(event);\n            const endPos = [\n                pos[0] + (event.velocityX * inertia) / 2,\n                pos[1] + (event.velocityY * inertia) / 2\n            ];\n            const newControllerState = this.controllerState.pan({ pos: endPos }).panEnd();\n            this.updateViewport(newControllerState, {\n                ...this._getTransitionProps(),\n                transitionDuration: inertia,\n                transitionEasing: INERTIA_EASING\n            }, {\n                isDragging: false,\n                isPanning: true\n            });\n        }\n        else {\n            const newControllerState = this.controllerState.panEnd();\n            this.updateViewport(newControllerState, null, {\n                isDragging: false,\n                isPanning: false\n            });\n        }\n        return true;\n    }\n    // Default handler for panning to rotate.\n    // Called by `_onPan` when panning with function key pressed.\n    _onPanRotate(event) {\n        if (!this.dragRotate) {\n            return false;\n        }\n        const pos = this.getCenter(event);\n        const newControllerState = this.controllerState.rotate({ pos });\n        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n            isDragging: true,\n            isRotating: true\n        });\n        return true;\n    }\n    _onPanRotateEnd(event) {\n        const { inertia } = this;\n        if (this.dragRotate && inertia && event.velocity) {\n            const pos = this.getCenter(event);\n            const endPos = [\n                pos[0] + (event.velocityX * inertia) / 2,\n                pos[1] + (event.velocityY * inertia) / 2\n            ];\n            const newControllerState = this.controllerState.rotate({ pos: endPos }).rotateEnd();\n            this.updateViewport(newControllerState, {\n                ...this._getTransitionProps(),\n                transitionDuration: inertia,\n                transitionEasing: INERTIA_EASING\n            }, {\n                isDragging: false,\n                isRotating: true\n            });\n        }\n        else {\n            const newControllerState = this.controllerState.rotateEnd();\n            this.updateViewport(newControllerState, null, {\n                isDragging: false,\n                isRotating: false\n            });\n        }\n        return true;\n    }\n    // Default handler for the `wheel` event.\n    _onWheel(event) {\n        if (!this.scrollZoom) {\n            return false;\n        }\n        const pos = this.getCenter(event);\n        if (!this.isPointInBounds(pos, event)) {\n            return false;\n        }\n        event.srcEvent.preventDefault();\n        const { speed = 0.01, smooth = false } = this.scrollZoom === true ? {} : this.scrollZoom;\n        const { delta } = event;\n        // Map wheel delta to relative scale\n        let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n        if (delta < 0 && scale !== 0) {\n            scale = 1 / scale;\n        }\n        const newControllerState = this.controllerState.zoom({ pos, scale });\n        this.updateViewport(newControllerState, { ...this._getTransitionProps({ around: pos }), transitionDuration: smooth ? 250 : 1 }, {\n            isZooming: true,\n            isPanning: true\n        });\n        return true;\n    }\n    _onTriplePanStart(event) {\n        const pos = this.getCenter(event);\n        if (!this.isPointInBounds(pos, event)) {\n            return false;\n        }\n        const newControllerState = this.controllerState.rotateStart({ pos });\n        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });\n        return true;\n    }\n    _onTriplePan(event) {\n        if (!this.touchRotate) {\n            return false;\n        }\n        if (!this.isDragging()) {\n            return false;\n        }\n        const pos = this.getCenter(event);\n        pos[0] -= event.deltaX;\n        const newControllerState = this.controllerState.rotate({ pos });\n        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n            isDragging: true,\n            isRotating: true\n        });\n        return true;\n    }\n    _onTriplePanEnd(event) {\n        if (!this.isDragging()) {\n            return false;\n        }\n        const { inertia } = this;\n        if (this.touchRotate && inertia && event.velocityY) {\n            const pos = this.getCenter(event);\n            const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n            const newControllerState = this.controllerState.rotate({ pos: endPos });\n            this.updateViewport(newControllerState, {\n                ...this._getTransitionProps(),\n                transitionDuration: inertia,\n                transitionEasing: INERTIA_EASING\n            }, {\n                isDragging: false,\n                isRotating: true\n            });\n            this.blockEvents(inertia);\n        }\n        else {\n            const newControllerState = this.controllerState.rotateEnd();\n            this.updateViewport(newControllerState, null, {\n                isDragging: false,\n                isRotating: false\n            });\n        }\n        return true;\n    }\n    // Default handler for the `pinchstart` event.\n    _onPinchStart(event) {\n        const pos = this.getCenter(event);\n        if (!this.isPointInBounds(pos, event)) {\n            return false;\n        }\n        const newControllerState = this.controllerState.zoomStart({ pos }).rotateStart({ pos });\n        // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n        pinchEventWorkaround._startPinchRotation = event.rotation;\n        pinchEventWorkaround._lastPinchEvent = event;\n        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });\n        return true;\n    }\n    // Default handler for the `pinchmove` and `pinchend` events.\n    _onPinch(event) {\n        if (!this.touchZoom && !this.touchRotate) {\n            return false;\n        }\n        if (!this.isDragging()) {\n            return false;\n        }\n        let newControllerState = this.controllerState;\n        if (this.touchZoom) {\n            const { scale } = event;\n            const pos = this.getCenter(event);\n            newControllerState = newControllerState.zoom({ pos, scale });\n        }\n        if (this.touchRotate) {\n            const { rotation } = event;\n            newControllerState = newControllerState.rotate({\n                deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation\n            });\n        }\n        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n            isDragging: true,\n            isPanning: this.touchZoom,\n            isZooming: this.touchZoom,\n            isRotating: this.touchRotate\n        });\n        pinchEventWorkaround._lastPinchEvent = event;\n        return true;\n    }\n    _onPinchEnd(event) {\n        if (!this.isDragging()) {\n            return false;\n        }\n        const { inertia } = this;\n        const { _lastPinchEvent } = pinchEventWorkaround;\n        if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n            const pos = this.getCenter(event);\n            let newControllerState = this.controllerState.rotateEnd();\n            const z = Math.log2(event.scale);\n            const velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n            const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n            newControllerState = newControllerState.zoom({ pos, scale: endScale }).zoomEnd();\n            this.updateViewport(newControllerState, {\n                ...this._getTransitionProps({ around: pos }),\n                transitionDuration: inertia,\n                transitionEasing: INERTIA_EASING\n            }, {\n                isDragging: false,\n                isPanning: this.touchZoom,\n                isZooming: this.touchZoom,\n                isRotating: false\n            });\n            this.blockEvents(inertia);\n        }\n        else {\n            const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n            this.updateViewport(newControllerState, null, {\n                isDragging: false,\n                isPanning: false,\n                isZooming: false,\n                isRotating: false\n            });\n        }\n        pinchEventWorkaround._startPinchRotation = null;\n        pinchEventWorkaround._lastPinchEvent = null;\n        return true;\n    }\n    // Default handler for the `doubletap` event.\n    _onDoubleTap(event) {\n        if (!this.doubleClickZoom) {\n            return false;\n        }\n        const pos = this.getCenter(event);\n        if (!this.isPointInBounds(pos, event)) {\n            return false;\n        }\n        const isZoomOut = this.isFunctionKeyPressed(event);\n        const newControllerState = this.controllerState.zoom({ pos, scale: isZoomOut ? 0.5 : 2 });\n        this.updateViewport(newControllerState, this._getTransitionProps({ around: pos }), {\n            isZooming: true,\n            isPanning: true\n        });\n        this.blockEvents(100);\n        return true;\n    }\n    // Default handler for the `keydown` event\n    _onKeyDown(event) {\n        if (!this.keyboard) {\n            return false;\n        }\n        const funcKey = this.isFunctionKeyPressed(event);\n        // @ts-ignore\n        const { zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY } = this.keyboard === true ? {} : this.keyboard;\n        const { controllerState } = this;\n        let newControllerState;\n        const interactionState = {};\n        switch (event.srcEvent.code) {\n            case 'Minus':\n                newControllerState = funcKey\n                    ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n                    : controllerState.zoomOut(zoomSpeed);\n                interactionState.isZooming = true;\n                break;\n            case 'Equal':\n                newControllerState = funcKey\n                    ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n                    : controllerState.zoomIn(zoomSpeed);\n                interactionState.isZooming = true;\n                break;\n            case 'ArrowLeft':\n                if (funcKey) {\n                    newControllerState = controllerState.rotateLeft(rotateSpeedX);\n                    interactionState.isRotating = true;\n                }\n                else {\n                    newControllerState = controllerState.moveLeft(moveSpeed);\n                    interactionState.isPanning = true;\n                }\n                break;\n            case 'ArrowRight':\n                if (funcKey) {\n                    newControllerState = controllerState.rotateRight(rotateSpeedX);\n                    interactionState.isRotating = true;\n                }\n                else {\n                    newControllerState = controllerState.moveRight(moveSpeed);\n                    interactionState.isPanning = true;\n                }\n                break;\n            case 'ArrowUp':\n                if (funcKey) {\n                    newControllerState = controllerState.rotateUp(rotateSpeedY);\n                    interactionState.isRotating = true;\n                }\n                else {\n                    newControllerState = controllerState.moveUp(moveSpeed);\n                    interactionState.isPanning = true;\n                }\n                break;\n            case 'ArrowDown':\n                if (funcKey) {\n                    newControllerState = controllerState.rotateDown(rotateSpeedY);\n                    interactionState.isRotating = true;\n                }\n                else {\n                    newControllerState = controllerState.moveDown(moveSpeed);\n                    interactionState.isPanning = true;\n                }\n                break;\n            default:\n                return false;\n        }\n        this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n        return true;\n    }\n    _getTransitionProps(opts) {\n        const { transition } = this;\n        if (!transition || !transition.transitionInterpolator) {\n            return NO_TRANSITION_PROPS;\n        }\n        // Enables Transitions on double-tap and key-down events.\n        return opts\n            ? {\n                ...transition,\n                transitionInterpolator: new LinearInterpolator({\n                    ...opts,\n                    ...transition.transitionInterpolator.opts,\n                    makeViewport: this.controllerState.makeViewport\n                })\n            }\n            : transition;\n    }\n}\n", "export default class ViewState {\n    constructor(props, state) {\n        this._viewportProps = this.applyConstraints(props);\n        this._state = state;\n    }\n    getViewportProps() {\n        return this._viewportProps;\n    }\n    getState() {\n        return this._state;\n    }\n}\n", "import View from \"./view.js\";\nimport WebMercatorViewport from \"../viewports/web-mercator-viewport.js\";\nimport MapController from \"../controllers/map-controller.js\";\nexport default class MapView extends View {\n    static { this.displayName = 'MapView'; }\n    constructor(props = {}) {\n        super(props);\n    }\n    get ViewportType() {\n        return WebMercatorViewport;\n    }\n    get ControllerType() {\n        return MapController;\n    }\n}\n", "import { deepEqual } from \"../utils/deep-equal.js\";\nimport LightingEffect from \"../effects/lighting/lighting-effect.js\";\nconst DEFAULT_LIGHTING_EFFECT = new LightingEffect();\n/** Sort two effects. Returns 0 if equal, negative if e1 < e2, positive if e1 > e2 */\nfunction compareEffects(e1, e2) {\n    const o1 = e1.order ?? Infinity;\n    const o2 = e2.order ?? Infinity;\n    return o1 - o2;\n}\nexport default class EffectManager {\n    constructor(context) {\n        this._resolvedEffects = [];\n        /** Effect instances and order preference pairs, sorted by order */\n        this._defaultEffects = [];\n        this.effects = [];\n        this._context = context;\n        this._needsRedraw = 'Initial render';\n        this._setEffects([]);\n    }\n    /**\n     * Register a new default effect, i.e. an effect presents regardless of user supplied props.effects\n     */\n    addDefaultEffect(effect) {\n        const defaultEffects = this._defaultEffects;\n        if (!defaultEffects.find(e => e.id === effect.id)) {\n            const index = defaultEffects.findIndex(e => compareEffects(e, effect) > 0);\n            if (index < 0) {\n                defaultEffects.push(effect);\n            }\n            else {\n                defaultEffects.splice(index, 0, effect);\n            }\n            effect.setup(this._context);\n            this._setEffects(this.effects);\n        }\n    }\n    setProps(props) {\n        if ('effects' in props) {\n            // Compare effects against each other shallowly\n            if (!deepEqual(props.effects, this.effects, 1)) {\n                this._setEffects(props.effects);\n            }\n        }\n    }\n    needsRedraw(opts = { clearRedrawFlags: false }) {\n        const redraw = this._needsRedraw;\n        if (opts.clearRedrawFlags) {\n            this._needsRedraw = false;\n        }\n        return redraw;\n    }\n    getEffects() {\n        return this._resolvedEffects;\n    }\n    _setEffects(effects) {\n        const oldEffectsMap = {};\n        for (const effect of this.effects) {\n            oldEffectsMap[effect.id] = effect;\n        }\n        const nextEffects = [];\n        for (const effect of effects) {\n            const oldEffect = oldEffectsMap[effect.id];\n            let effectToAdd = effect;\n            if (oldEffect && oldEffect !== effect) {\n                if (oldEffect.setProps) {\n                    oldEffect.setProps(effect.props);\n                    effectToAdd = oldEffect;\n                }\n                else {\n                    oldEffect.cleanup(this._context);\n                }\n            }\n            else if (!oldEffect) {\n                effect.setup(this._context);\n            }\n            nextEffects.push(effectToAdd);\n            delete oldEffectsMap[effect.id];\n        }\n        for (const removedEffectId in oldEffectsMap) {\n            oldEffectsMap[removedEffectId].cleanup(this._context);\n        }\n        this.effects = nextEffects;\n        this._resolvedEffects = nextEffects.concat(this._defaultEffects);\n        // Special case for lighting: only add default instance if no LightingEffect is specified\n        if (!effects.some(effect => effect instanceof LightingEffect)) {\n            this._resolvedEffects.push(DEFAULT_LIGHTING_EFFECT);\n        }\n        this._needsRedraw = 'effects changed';\n    }\n    finalize() {\n        for (const effect of this._resolvedEffects) {\n            effect.cleanup(this._context);\n        }\n        this.effects.length = 0;\n        this._resolvedEffects.length = 0;\n        this._defaultEffects.length = 0;\n    }\n}\n", "import LayersPass from \"./layers-pass.js\";\nexport default class DrawLayersPass extends LayersPass {\n    shouldDrawLayer(layer) {\n        const { operation } = layer.props;\n        return operation.includes('draw') || operation.includes('terrain');\n    }\n}\n", "import debug from \"../debug/index.js\";\nimport DrawLayersPass from \"../passes/draw-layers-pass.js\";\nimport PickLayersPass from \"../passes/pick-layers-pass.js\";\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\nexport default class DeckRenderer {\n    constructor(device) {\n        this.device = device;\n        // @ts-expect-error\n        this.gl = device.gl;\n        this.layerFilter = null;\n        this.drawPickingColors = false;\n        this.drawLayersPass = new DrawLayersPass(device);\n        this.pickLayersPass = new PickLayersPass(device);\n        this.renderCount = 0;\n        this._needsRedraw = 'Initial render';\n        this.renderBuffers = [];\n        this.lastPostProcessEffect = null;\n    }\n    setProps(props) {\n        if (this.layerFilter !== props.layerFilter) {\n            this.layerFilter = props.layerFilter;\n            this._needsRedraw = 'layerFilter changed';\n        }\n        if (this.drawPickingColors !== props.drawPickingColors) {\n            this.drawPickingColors = props.drawPickingColors;\n            this._needsRedraw = 'drawPickingColors changed';\n        }\n    }\n    renderLayers(opts) {\n        if (!opts.viewports.length) {\n            return;\n        }\n        const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n        const renderOpts = {\n            layerFilter: this.layerFilter,\n            isPicking: this.drawPickingColors,\n            ...opts\n        };\n        if (renderOpts.effects) {\n            this._preRender(renderOpts.effects, renderOpts);\n        }\n        const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;\n        if (this.lastPostProcessEffect) {\n            renderOpts.clearColor = [0, 0, 0, 0];\n            renderOpts.clearCanvas = true;\n        }\n        const renderStats = layerPass.render({ ...renderOpts, target: outputBuffer });\n        if (renderOpts.effects) {\n            this._postRender(renderOpts.effects, renderOpts);\n        }\n        this.renderCount++;\n        debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n    }\n    needsRedraw(opts = { clearRedrawFlags: false }) {\n        const redraw = this._needsRedraw;\n        if (opts.clearRedrawFlags) {\n            this._needsRedraw = false;\n        }\n        return redraw;\n    }\n    finalize() {\n        const { renderBuffers } = this;\n        for (const buffer of renderBuffers) {\n            buffer.delete();\n        }\n        renderBuffers.length = 0;\n    }\n    _preRender(effects, opts) {\n        this.lastPostProcessEffect = null;\n        opts.preRenderStats = opts.preRenderStats || {};\n        for (const effect of effects) {\n            opts.preRenderStats[effect.id] = effect.preRender(opts);\n            if (effect.postRender) {\n                this.lastPostProcessEffect = effect.id;\n            }\n        }\n        if (this.lastPostProcessEffect) {\n            this._resizeRenderBuffers();\n        }\n    }\n    _resizeRenderBuffers() {\n        const { renderBuffers } = this;\n        const size = this.device.canvasContext.getDrawingBufferSize();\n        if (renderBuffers.length === 0) {\n            [0, 1].map(i => {\n                const texture = this.device.createTexture({\n                    sampler: { minFilter: 'linear', magFilter: 'linear' }\n                });\n                renderBuffers.push(this.device.createFramebuffer({\n                    id: `deck-renderbuffer-${i}`,\n                    colorAttachments: [texture]\n                }));\n            });\n        }\n        for (const buffer of renderBuffers) {\n            buffer.resize(size);\n        }\n    }\n    _postRender(effects, opts) {\n        const { renderBuffers } = this;\n        const params = {\n            ...opts,\n            inputBuffer: renderBuffers[0],\n            swapBuffer: renderBuffers[1]\n        };\n        for (const effect of effects) {\n            if (effect.postRender) {\n                // If not the last post processing effect, unset the target so that\n                // it only renders between the swap buffers\n                params.target = effect.id === this.lastPostProcessEffect ? opts.target : undefined;\n                const buffer = effect.postRender(params);\n                // Buffer cannot be null if target is unset\n                params.inputBuffer = buffer;\n                params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n            }\n        }\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport log from \"../../utils/log.js\";\nconst NO_PICKED_OBJECT = {\n    pickedColor: null,\n    pickedObjectIndex: -1\n};\n/* eslint-disable max-depth, max-statements */\n/**\n * Pick at a specified pixel with a tolerance radius\n * Returns the closest object to the pixel in shape `{pickedColor, pickedLayer, pickedObjectIndex}`\n */\nexport function getClosestObject({ pickedColors, decodePickingColor, deviceX, deviceY, deviceRadius, deviceRect }) {\n    // Traverse all pixels in picking results and find the one closest to the supplied\n    // [deviceX, deviceY]\n    const { x, y, width, height } = deviceRect;\n    let minSquareDistanceToCenter = deviceRadius * deviceRadius;\n    let closestPixelIndex = -1;\n    let i = 0;\n    for (let row = 0; row < height; row++) {\n        const dy = row + y - deviceY;\n        const dy2 = dy * dy;\n        if (dy2 > minSquareDistanceToCenter) {\n            // skip this row\n            i += 4 * width;\n        }\n        else {\n            for (let col = 0; col < width; col++) {\n                // Decode picked layer from color\n                const pickedLayerIndex = pickedColors[i + 3] - 1;\n                if (pickedLayerIndex >= 0) {\n                    const dx = col + x - deviceX;\n                    const d2 = dx * dx + dy2;\n                    if (d2 <= minSquareDistanceToCenter) {\n                        minSquareDistanceToCenter = d2;\n                        closestPixelIndex = i;\n                    }\n                }\n                i += 4;\n            }\n        }\n    }\n    if (closestPixelIndex >= 0) {\n        // Decode picked object index from color\n        const pickedColor = pickedColors.slice(closestPixelIndex, closestPixelIndex + 4);\n        const pickedObject = decodePickingColor(pickedColor);\n        if (pickedObject) {\n            const dy = Math.floor(closestPixelIndex / 4 / width);\n            const dx = closestPixelIndex / 4 - dy * width;\n            return {\n                ...pickedObject,\n                pickedColor,\n                pickedX: x + dx,\n                pickedY: y + dy\n            };\n        }\n        log.error('Picked non-existent layer. Is picking buffer corrupt?')();\n    }\n    return NO_PICKED_OBJECT;\n}\n/**\n * Examines a picking buffer for unique colors\n * Returns array of unique objects in shape `{x, y, pickedColor, pickedLayer, pickedObjectIndex}`\n */\nexport function getUniqueObjects({ pickedColors, decodePickingColor }) {\n    const uniqueColors = new Map();\n    // Traverse all pixels in picking results and get unique colors\n    if (pickedColors) {\n        for (let i = 0; i < pickedColors.length; i += 4) {\n            // Decode picked layer from color\n            const pickedLayerIndex = pickedColors[i + 3] - 1;\n            if (pickedLayerIndex >= 0) {\n                const pickedColor = pickedColors.slice(i, i + 4);\n                const colorKey = pickedColor.join(',');\n                // eslint-disable-next-line\n                if (!uniqueColors.has(colorKey)) {\n                    const pickedObject = decodePickingColor(pickedColor);\n                    // eslint-disable-next-line\n                    if (pickedObject) {\n                        uniqueColors.set(colorKey, {\n                            ...pickedObject,\n                            color: pickedColor\n                        });\n                    }\n                    else {\n                        log.error('Picked non-existent layer. Is picking buffer corrupt?')();\n                    }\n                }\n            }\n        }\n    }\n    return Array.from(uniqueColors.values());\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/** Generates some basic information of the picking action: x, y, coordinates etc.\n * Regardless if anything is picked\n */\nexport function getEmptyPickingInfo({ pickInfo, viewports, pixelRatio, x, y, z }) {\n    // If more than one viewports are used in the picking pass, locate the viewport that\n    // drew the picked pixel\n    let pickedViewport = viewports[0];\n    if (viewports.length > 1) {\n        // Find the viewport that contain the picked pixel\n        pickedViewport = getViewportFromCoordinates(pickInfo?.pickedViewports || viewports, { x, y });\n    }\n    let coordinate;\n    if (pickedViewport) {\n        const point = [x - pickedViewport.x, y - pickedViewport.y];\n        if (z !== undefined) {\n            point[2] = z;\n        }\n        coordinate = pickedViewport.unproject(point);\n    }\n    return {\n        color: null,\n        layer: null,\n        viewport: pickedViewport,\n        index: -1,\n        picked: false,\n        x,\n        y,\n        pixel: [x, y],\n        coordinate,\n        devicePixel: pickInfo && 'pickedX' in pickInfo\n            ? [pickInfo.pickedX, pickInfo.pickedY]\n            : undefined,\n        pixelRatio\n    };\n}\n/* eslint-disable max-depth */\n/** Generates the picking info of a picking operation */\nexport function processPickInfo(opts) {\n    const { pickInfo, lastPickedInfo, mode, layers } = opts;\n    const { pickedColor, pickedLayer, pickedObjectIndex } = pickInfo;\n    const affectedLayers = pickedLayer ? [pickedLayer] : [];\n    if (mode === 'hover') {\n        // only invoke onHover events if picked object has changed\n        const lastPickedPixelIndex = lastPickedInfo.index;\n        const lastPickedLayerId = lastPickedInfo.layerId;\n        const pickedLayerId = pickedLayer ? pickedLayer.props.id : null;\n        // proceed only if picked object changed\n        if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedPixelIndex) {\n            if (pickedLayerId !== lastPickedLayerId) {\n                // We cannot store a ref to lastPickedLayer in the context because\n                // the state of an outdated layer is no longer valid\n                // and the props may have changed\n                const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n                if (lastPickedLayer) {\n                    // Let leave event fire before enter event\n                    affectedLayers.unshift(lastPickedLayer);\n                }\n            }\n            // Update layer manager context\n            lastPickedInfo.layerId = pickedLayerId;\n            lastPickedInfo.index = pickedObjectIndex;\n            lastPickedInfo.info = null;\n        }\n    }\n    const baseInfo = getEmptyPickingInfo(opts);\n    // Use a Map to store all picking infos.\n    // The following two forEach loops are the result of\n    // https://github.com/visgl/deck.gl/issues/443\n    // Please be very careful when changing this pattern\n    const infos = new Map();\n    // Make sure infos always contain something even if no layer is affected\n    infos.set(null, baseInfo);\n    affectedLayers.forEach(layer => {\n        let info = { ...baseInfo };\n        if (layer === pickedLayer) {\n            info.color = pickedColor;\n            info.index = pickedObjectIndex;\n            info.picked = true;\n        }\n        info = getLayerPickingInfo({ layer, info, mode });\n        const rootLayer = info.layer;\n        if (layer === pickedLayer && mode === 'hover') {\n            lastPickedInfo.info = info;\n        }\n        // This guarantees that there will be only one copy of info for\n        // one composite layer\n        infos.set(rootLayer.id, info);\n        if (mode === 'hover') {\n            rootLayer.updateAutoHighlight(info);\n        }\n    });\n    return infos;\n}\n/** Walk up the layer composite chain to populate the info object */\nexport function getLayerPickingInfo({ layer, info, mode }) {\n    while (layer && info) {\n        // For a composite layer, sourceLayer will point to the sublayer\n        // where the event originates from.\n        // It provides additional context for the composite layer's\n        // getPickingInfo() method to populate the info object\n        const sourceLayer = info.layer || null;\n        info.sourceLayer = sourceLayer;\n        info.layer = layer;\n        // layer.pickLayer() function requires a non-null ```layer.state```\n        // object to function properly. So the layer referenced here\n        // must be the \"current\" layer, not an \"out-dated\" / \"invalidated\" layer\n        info = layer.getPickingInfo({ info, mode, sourceLayer });\n        layer = layer.parent;\n    }\n    return info;\n}\n/** Indentifies which viewport, if any corresponds to x and y\n   If multiple viewports contain the target pixel, last viewport drawn is returend\n   Returns first viewport if no match */\nfunction getViewportFromCoordinates(viewports, pixel) {\n    // find the last viewport that contains the pixel\n    for (let i = viewports.length - 1; i >= 0; i--) {\n        const viewport = viewports[i];\n        if (viewport.containsPixel(pixel)) {\n            return viewport;\n        }\n    }\n    return viewports[0];\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport PickLayersPass from \"../passes/pick-layers-pass.js\";\nimport { getClosestObject, getUniqueObjects } from \"./picking/query-object.js\";\nimport { processPickInfo, getLayerPickingInfo, getEmptyPickingInfo } from \"./picking/pick-info.js\";\n/** Manages picking in a Deck context */\nexport default class DeckPicker {\n    constructor(device) {\n        this._pickable = true;\n        this.device = device;\n        this.pickLayersPass = new PickLayersPass(device);\n        this.lastPickedInfo = {\n            index: -1,\n            layerId: null,\n            info: null\n        };\n    }\n    setProps(props) {\n        if ('layerFilter' in props) {\n            this.layerFilter = props.layerFilter;\n        }\n        if ('_pickable' in props) {\n            this._pickable = props._pickable;\n        }\n    }\n    finalize() {\n        if (this.pickingFBO) {\n            this.pickingFBO.destroy();\n        }\n        if (this.depthFBO) {\n            this.depthFBO.destroy();\n        }\n    }\n    /** Pick the closest info at given coordinate */\n    pickObject(opts) {\n        return this._pickClosestObject(opts);\n    }\n    /** Get all unique infos within a bounding box */\n    pickObjects(opts) {\n        return this._pickVisibleObjects(opts);\n    }\n    // Returns a new picking info object by assuming the last picked object is still picked\n    getLastPickedObject({ x, y, layers, viewports }, lastPickedInfo = this.lastPickedInfo.info) {\n        const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n        const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n        const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n        const viewport = (lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId)) || viewports[0];\n        const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n        const info = {\n            x,\n            y,\n            viewport,\n            coordinate,\n            layer\n        };\n        return { ...lastPickedInfo, ...info };\n    }\n    // Private\n    /** Ensures that picking framebuffer exists and matches the canvas size */\n    _resizeBuffer() {\n        // Create a frame buffer if not already available\n        if (!this.pickingFBO) {\n            this.pickingFBO = this.device.createFramebuffer({\n                colorAttachments: ['rgba8unorm'],\n                depthStencilAttachment: 'depth16unorm'\n            });\n            if (this.device.isTextureFormatRenderable('rgba32float')) {\n                const depthFBO = this.device.createFramebuffer({\n                    colorAttachments: ['rgba32float'],\n                    depthStencilAttachment: 'depth16unorm'\n                });\n                this.depthFBO = depthFBO;\n            }\n        }\n        // Resize it to current canvas size (this is a noop if size hasn't changed)\n        // @ts-expect-error\n        const gl = this.device.gl;\n        this.pickingFBO?.resize({ width: gl.canvas.width, height: gl.canvas.height });\n        this.depthFBO?.resize({ width: gl.canvas.width, height: gl.canvas.height });\n    }\n    /** Preliminary filtering of the layers list. Skid picking pass if no layer is pickable. */\n    _getPickable(layers) {\n        if (this._pickable === false) {\n            return null;\n        }\n        const pickableLayers = layers.filter(layer => this.pickLayersPass.shouldDrawLayer(layer) && !layer.isComposite);\n        return pickableLayers.length ? pickableLayers : null;\n    }\n    /** Pick the closest object at the given coordinate */\n    // eslint-disable-next-line max-statements,complexity\n    _pickClosestObject({ layers, views, viewports, x, y, radius = 0, depth = 1, mode = 'query', unproject3D, onViewportActive, effects }) {\n        // @ts-expect-error TODO - assuming WebGL context\n        const pixelRatio = this.device.canvasContext.cssToDeviceRatio();\n        const pickableLayers = this._getPickable(layers);\n        if (!pickableLayers || viewports.length === 0) {\n            return {\n                result: [],\n                emptyInfo: getEmptyPickingInfo({ viewports, x, y, pixelRatio })\n            };\n        }\n        this._resizeBuffer();\n        // Convert from canvas top-left to WebGL bottom-left coordinates\n        // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n        // And compensate for pixelRatio\n        // @ts-expect-error TODO - assuming WebGL context\n        const devicePixelRange = this.device.canvasContext.cssToDevicePixels([x, y], true);\n        const devicePixel = [\n            devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n            devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n        ];\n        const deviceRadius = Math.round(radius * pixelRatio);\n        const { width, height } = this.pickingFBO;\n        const deviceRect = this._getPickingRect({\n            deviceX: devicePixel[0],\n            deviceY: devicePixel[1],\n            deviceRadius,\n            deviceWidth: width,\n            deviceHeight: height\n        });\n        const cullRect = {\n            x: x - radius,\n            y: y - radius,\n            width: radius * 2 + 1,\n            height: radius * 2 + 1\n        };\n        let infos;\n        const result = [];\n        const affectedLayers = new Set();\n        for (let i = 0; i < depth; i++) {\n            let pickInfo;\n            if (deviceRect) {\n                const pickedResult = this._drawAndSample({\n                    layers: pickableLayers,\n                    views,\n                    viewports,\n                    onViewportActive,\n                    deviceRect,\n                    cullRect,\n                    effects,\n                    pass: `picking:${mode}`\n                });\n                pickInfo = getClosestObject({\n                    ...pickedResult,\n                    deviceX: devicePixel[0],\n                    deviceY: devicePixel[1],\n                    deviceRadius,\n                    deviceRect\n                });\n            }\n            else {\n                pickInfo = {\n                    pickedColor: null,\n                    pickedObjectIndex: -1\n                };\n            }\n            let z;\n            if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n                const { pickedColors: pickedColors2 } = this._drawAndSample({\n                    layers: [pickInfo.pickedLayer],\n                    views,\n                    viewports,\n                    onViewportActive,\n                    deviceRect: {\n                        x: pickInfo.pickedX,\n                        y: pickInfo.pickedY,\n                        width: 1,\n                        height: 1\n                    },\n                    cullRect,\n                    effects,\n                    pass: `picking:${mode}:z`\n                }, true);\n                // picked value is in common space (pixels) from the camera target (viewport.position)\n                // convert it to meters from the ground\n                if (pickedColors2[3]) {\n                    z = pickedColors2[0];\n                }\n            }\n            // Only exclude if we need to run picking again.\n            // We need to run picking again if an object is detected AND\n            // we have not exhausted the requested depth.\n            if (pickInfo.pickedLayer && i + 1 < depth) {\n                affectedLayers.add(pickInfo.pickedLayer);\n                pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n            }\n            // This logic needs to run even if no object is picked.\n            infos = processPickInfo({\n                pickInfo,\n                lastPickedInfo: this.lastPickedInfo,\n                mode,\n                layers: pickableLayers,\n                viewports,\n                x,\n                y,\n                z,\n                pixelRatio\n            });\n            for (const info of infos.values()) {\n                if (info.layer) {\n                    result.push(info);\n                }\n            }\n            // If no object is picked stop.\n            if (!pickInfo.pickedColor) {\n                break;\n            }\n        }\n        // reset only affected buffers\n        for (const layer of affectedLayers) {\n            layer.restorePickingColors();\n        }\n        return { result, emptyInfo: infos.get(null) };\n    }\n    /** Pick all objects within the given bounding box */\n    _pickVisibleObjects({ layers, views, viewports, x, y, width = 1, height = 1, mode = 'query', maxObjects = null, onViewportActive, effects }) {\n        const pickableLayers = this._getPickable(layers);\n        if (!pickableLayers || viewports.length === 0) {\n            return [];\n        }\n        this._resizeBuffer();\n        // Convert from canvas top-left to WebGL bottom-left coordinates\n        // And compensate for pixelRatio\n        // @ts-expect-error TODO - assuming WebGL context\n        const pixelRatio = this.device.canvasContext.cssToDeviceRatio();\n        // @ts-expect-error TODO - assuming WebGL context\n        const leftTop = this.device.canvasContext.cssToDevicePixels([x, y], true);\n        // take left and top (y inverted in device pixels) from start location\n        const deviceLeft = leftTop.x;\n        const deviceTop = leftTop.y + leftTop.height;\n        // take right and bottom (y inverted in device pixels) from end location\n        // @ts-expect-error TODO - assuming WebGL context\n        const rightBottom = this.device.canvasContext.cssToDevicePixels([x + width, y + height], true);\n        const deviceRight = rightBottom.x + rightBottom.width;\n        const deviceBottom = rightBottom.y;\n        const deviceRect = {\n            x: deviceLeft,\n            y: deviceBottom,\n            // deviceTop and deviceRight represent the first pixel outside the desired rect\n            width: deviceRight - deviceLeft,\n            height: deviceTop - deviceBottom\n        };\n        const pickedResult = this._drawAndSample({\n            layers: pickableLayers,\n            views,\n            viewports,\n            onViewportActive,\n            deviceRect,\n            cullRect: { x, y, width, height },\n            effects,\n            pass: `picking:${mode}`\n        });\n        const pickInfos = getUniqueObjects(pickedResult);\n        // `getUniqueObjects` dedup by picked color\n        // However different picked color may be linked to the same picked object, e.g. stroke and fill of the same polygon\n        // picked from different sub layers of a GeoJsonLayer\n        // Here after resolving the picked index with `layer.getPickingInfo`, we need to dedup again by unique picked objects\n        const uniquePickedObjects = new Map();\n        const uniqueInfos = [];\n        const limitMaxObjects = Number.isFinite(maxObjects);\n        for (let i = 0; i < pickInfos.length; i++) {\n            if (limitMaxObjects && uniqueInfos.length >= maxObjects) {\n                break;\n            }\n            const pickInfo = pickInfos[i];\n            let info = {\n                color: pickInfo.pickedColor,\n                layer: null,\n                index: pickInfo.pickedObjectIndex,\n                picked: true,\n                x,\n                y,\n                pixelRatio\n            };\n            info = getLayerPickingInfo({ layer: pickInfo.pickedLayer, info, mode });\n            // info.layer is always populated because it's a picked pixel\n            const pickedLayerId = info.layer.id;\n            if (!uniquePickedObjects.has(pickedLayerId)) {\n                uniquePickedObjects.set(pickedLayerId, new Set());\n            }\n            const uniqueObjectsInLayer = uniquePickedObjects.get(pickedLayerId);\n            // info.object may be null if the layer is using non-iterable data.\n            // Fall back to using index as identifier.\n            const pickedObjectKey = info.object ?? info.index;\n            if (!uniqueObjectsInLayer.has(pickedObjectKey)) {\n                uniqueObjectsInLayer.add(pickedObjectKey);\n                uniqueInfos.push(info);\n            }\n        }\n        return uniqueInfos;\n    }\n    _drawAndSample({ layers, views, viewports, onViewportActive, deviceRect, cullRect, effects, pass }, pickZ = false) {\n        const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n        const opts = {\n            layers,\n            layerFilter: this.layerFilter,\n            views,\n            viewports,\n            onViewportActive,\n            pickingFBO,\n            deviceRect,\n            cullRect,\n            effects,\n            pass,\n            pickZ,\n            preRenderStats: {}\n        };\n        for (const effect of effects) {\n            if (effect.useInPicking) {\n                opts.preRenderStats[effect.id] = effect.preRender(opts);\n            }\n        }\n        const { decodePickingColor } = this.pickLayersPass.render(opts);\n        // Read from an already rendered picking buffer\n        // Returns an Uint8ClampedArray of picked pixels\n        const { x, y, width, height } = deviceRect;\n        const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n        this.device.readPixelsToArrayWebGL(pickingFBO, {\n            sourceX: x,\n            sourceY: y,\n            sourceWidth: width,\n            sourceHeight: height,\n            target: pickedColors\n        });\n        return { pickedColors, decodePickingColor };\n    }\n    // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n    // Returns null if pixel is outside of device\n    _getPickingRect({ deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight }) {\n        // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n        const x = Math.max(0, deviceX - deviceRadius);\n        const y = Math.max(0, deviceY - deviceRadius);\n        const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n        const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n        // x, y out of bounds.\n        if (width <= 0 || height <= 0) {\n            return null;\n        }\n        return { x, y, width, height };\n    }\n}\n", "import { EVENTS } from \"./constants.js\";\nimport { deepEqual } from \"../utils/deep-equal.js\";\nconst PLACEMENTS = {\n    'top-left': { top: 0, left: 0 },\n    'top-right': { top: 0, right: 0 },\n    'bottom-left': { bottom: 0, left: 0 },\n    'bottom-right': { bottom: 0, right: 0 },\n    fill: { top: 0, left: 0, bottom: 0, right: 0 }\n};\nconst DEFAULT_PLACEMENT = 'top-left';\nconst ROOT_CONTAINER_ID = '__root';\nexport class WidgetManager {\n    constructor({ deck, parentElement }) {\n        /** Widgets added via the imperative API */\n        this.defaultWidgets = [];\n        /** Widgets received from the declarative API */\n        this.widgets = [];\n        /** Resolved widgets from both imperative and declarative APIs */\n        this.resolvedWidgets = [];\n        /** Mounted HTML containers */\n        this.containers = {};\n        /** Viewport provided to widget on redraw */\n        this.lastViewports = {};\n        this.deck = deck;\n        this.parentElement = parentElement;\n    }\n    getWidgets() {\n        return this.resolvedWidgets;\n    }\n    /** Declarative API to configure widgets */\n    setProps(props) {\n        if (props.widgets && !deepEqual(props.widgets, this.widgets, 1)) {\n            this._setWidgets(props.widgets);\n        }\n    }\n    finalize() {\n        for (const widget of this.getWidgets()) {\n            this._remove(widget);\n        }\n        this.defaultWidgets.length = 0;\n        this.resolvedWidgets.length = 0;\n        for (const id in this.containers) {\n            this.containers[id].remove();\n        }\n    }\n    /** Imperative API. Widgets added this way are not affected by the declarative prop. */\n    addDefault(widget) {\n        if (!this.defaultWidgets.find(w => w.id === widget.id)) {\n            this._add(widget);\n            this.defaultWidgets.push(widget);\n            // Update widget list\n            this._setWidgets(this.widgets);\n        }\n    }\n    /** Resolve widgets from the declarative prop */\n    _setWidgets(nextWidgets) {\n        const oldWidgetMap = {};\n        for (const widget of this.resolvedWidgets) {\n            oldWidgetMap[widget.id] = widget;\n        }\n        // Clear and rebuild the list\n        this.resolvedWidgets.length = 0;\n        // Add all default widgets\n        for (const widget of this.defaultWidgets) {\n            oldWidgetMap[widget.id] = null;\n            this.resolvedWidgets.push(widget);\n        }\n        for (let widget of nextWidgets) {\n            const oldWidget = oldWidgetMap[widget.id];\n            if (!oldWidget) {\n                // Widget is new\n                this._add(widget);\n            }\n            else if (\n            // Widget placement changed\n            oldWidget.viewId !== widget.viewId ||\n                oldWidget.placement !== widget.placement) {\n                this._remove(oldWidget);\n                this._add(widget);\n            }\n            else if (widget !== oldWidget) {\n                // Widget props changed\n                oldWidget.setProps(widget.props);\n                widget = oldWidget;\n            }\n            // mark as matched\n            oldWidgetMap[widget.id] = null;\n            this.resolvedWidgets.push(widget);\n        }\n        for (const id in oldWidgetMap) {\n            const oldWidget = oldWidgetMap[id];\n            if (oldWidget) {\n                // No longer exists\n                this._remove(oldWidget);\n            }\n        }\n        this.widgets = nextWidgets;\n    }\n    _add(widget) {\n        const { viewId = null, placement = DEFAULT_PLACEMENT } = widget;\n        const element = widget.onAdd({ deck: this.deck, viewId });\n        if (element) {\n            this._getContainer(viewId, placement).append(element);\n        }\n        widget._element = element;\n    }\n    _remove(widget) {\n        widget.onRemove();\n        if (widget._element) {\n            widget._element.remove();\n        }\n        widget._element = undefined;\n    }\n    /* global document */\n    _getContainer(viewId, placement) {\n        const containerId = viewId || ROOT_CONTAINER_ID;\n        let viewContainer = this.containers[containerId];\n        if (!viewContainer) {\n            viewContainer = document.createElement('div');\n            viewContainer.style.pointerEvents = 'none';\n            viewContainer.style.position = 'absolute';\n            viewContainer.style.overflow = 'hidden';\n            this.parentElement?.append(viewContainer);\n            this.containers[containerId] = viewContainer;\n        }\n        let container = viewContainer.querySelector(`.${placement}`);\n        if (!container) {\n            container = document.createElement('div');\n            container.className = placement;\n            container.style.position = 'absolute';\n            Object.assign(container.style, PLACEMENTS[placement]);\n            viewContainer.append(container);\n        }\n        return container;\n    }\n    _updateContainers() {\n        const canvasWidth = this.deck.width;\n        const canvasHeight = this.deck.height;\n        for (const id in this.containers) {\n            const viewport = this.lastViewports[id] || null;\n            const visible = id === ROOT_CONTAINER_ID || viewport;\n            const container = this.containers[id];\n            if (visible) {\n                container.style.display = 'block';\n                // Align the container with the view\n                container.style.left = `${viewport ? viewport.x : 0}px`;\n                container.style.top = `${viewport ? viewport.y : 0}px`;\n                container.style.width = `${viewport ? viewport.width : canvasWidth}px`;\n                container.style.height = `${viewport ? viewport.height : canvasHeight}px`;\n            }\n            else {\n                container.style.display = 'none';\n            }\n        }\n    }\n    onRedraw({ viewports, layers }) {\n        const viewportsById = viewports.reduce((acc, v) => {\n            acc[v.id] = v;\n            return acc;\n        }, {});\n        const { lastViewports } = this;\n        for (const widget of this.getWidgets()) {\n            const { viewId } = widget;\n            if (viewId) {\n                // Attached to a specific view\n                const viewport = viewportsById[viewId];\n                if (viewport) {\n                    if (widget.onViewportChange && !viewport.equals(lastViewports[viewId])) {\n                        widget.onViewportChange(viewport);\n                    }\n                    widget.onRedraw?.({ viewports: [viewport], layers });\n                }\n            }\n            else {\n                // Not attached to a specific view\n                if (widget.onViewportChange) {\n                    for (const viewport of viewports) {\n                        // eslint-disable-next-line max-depth\n                        if (!viewport.equals(lastViewports[viewport.id])) {\n                            widget.onViewportChange(viewport);\n                        }\n                    }\n                }\n                widget.onRedraw?.({ viewports, layers });\n            }\n        }\n        this.lastViewports = viewportsById;\n        this._updateContainers();\n    }\n    onHover(info, event) {\n        for (const widget of this.getWidgets()) {\n            const { viewId } = widget;\n            if (!viewId || viewId === info.viewport?.id) {\n                widget.onHover?.(info, event);\n            }\n        }\n    }\n    onEvent(info, event) {\n        const eventOptions = EVENTS[event.type];\n        if (!eventOptions) {\n            return;\n        }\n        for (const widget of this.getWidgets()) {\n            const { viewId } = widget;\n            if (!viewId || viewId === info.viewport?.id) {\n                widget[eventOptions.handler]?.(info, event);\n            }\n        }\n    }\n}\n", "/* global document */\nconst defaultStyle = {\n    zIndex: '1',\n    position: 'absolute',\n    pointerEvents: 'none',\n    color: '#a0a7b4',\n    backgroundColor: '#29323c',\n    padding: '10px',\n    top: '0',\n    left: '0',\n    display: 'none'\n};\nexport default class Tooltip {\n    constructor() {\n        this.id = 'default-tooltip';\n        this.placement = 'fill';\n        this.props = {};\n        this.isVisible = false;\n    }\n    onAdd({ deck }) {\n        const el = document.createElement('div');\n        el.className = 'deck-tooltip';\n        Object.assign(el.style, defaultStyle);\n        this.deck = deck;\n        this.element = el;\n        return el;\n    }\n    onRemove() {\n        this.deck = undefined;\n        this.element = undefined;\n    }\n    setProps() { }\n    onViewportChange(viewport) {\n        if (this.isVisible && viewport.id === this.lastViewport?.id && viewport !== this.lastViewport) {\n            // Camera has moved, clear tooltip\n            this.setTooltip(null);\n        }\n    }\n    onHover(info) {\n        const { deck } = this;\n        const getTooltip = deck && deck.props.getTooltip;\n        if (!getTooltip) {\n            return;\n        }\n        const displayInfo = getTooltip(info);\n        this.lastViewport = info.viewport;\n        this.setTooltip(displayInfo, info.x, info.y);\n    }\n    setTooltip(displayInfo, x, y) {\n        const el = this.element;\n        if (!el) {\n            return;\n        }\n        if (typeof displayInfo === 'string') {\n            el.innerText = displayInfo;\n        }\n        else if (!displayInfo) {\n            this.isVisible = false;\n            el.style.display = 'none';\n            return;\n        }\n        else {\n            if (displayInfo.text) {\n                el.innerText = displayInfo.text;\n            }\n            if (displayInfo.html) {\n                el.innerHTML = displayInfo.html;\n            }\n            if (displayInfo.className) {\n                el.className = displayInfo.className;\n            }\n        }\n        this.isVisible = true;\n        el.style.display = 'block';\n        el.style.transform = `translate(${x}px, ${y}px)`;\n        if (displayInfo && typeof displayInfo === 'object' && 'style' in displayInfo) {\n            Object.assign(el.style, displayInfo.style);\n        }\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport LayerManager from \"./layer-manager.js\";\nimport ViewManager from \"./view-manager.js\";\nimport MapView from \"../views/map-view.js\";\nimport EffectManager from \"./effect-manager.js\";\nimport DeckRenderer from \"./deck-renderer.js\";\nimport DeckPicker from \"./deck-picker.js\";\nimport { WidgetManager } from \"./widget-manager.js\";\nimport Tooltip from \"./tooltip.js\";\nimport log from \"../utils/log.js\";\nimport { deepEqual } from \"../utils/deep-equal.js\";\nimport typedArrayManager from \"../utils/typed-array-manager.js\";\nimport { VERSION } from \"./init.js\";\nimport { luma } from '@luma.gl/core';\nimport { WebGLDevice } from '@luma.gl/webgl';\nimport { Timeline } from '@luma.gl/engine';\nimport { AnimationLoop } from '@luma.gl/engine';\nimport { GL } from '@luma.gl/constants';\nimport { Stats } from '@probe.gl/stats';\nimport { EventManager } from 'mjolnir.js';\nimport assert from \"../utils/assert.js\";\nimport { EVENTS } from \"./constants.js\";\n/* global document */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() { }\nconst getCursor = ({ isDragging }) => (isDragging ? 'grabbing' : 'grab');\nconst defaultProps = {\n    id: '',\n    width: '100%',\n    height: '100%',\n    style: null,\n    viewState: null,\n    initialViewState: null,\n    pickingRadius: 0,\n    layerFilter: null,\n    parameters: {},\n    parent: null,\n    device: null,\n    deviceProps: { type: 'webgl' },\n    gl: null,\n    glOptions: {},\n    canvas: null,\n    layers: [],\n    effects: [],\n    views: null,\n    controller: null, // Rely on external controller, e.g. react-map-gl\n    useDevicePixels: true,\n    touchAction: 'none',\n    eventRecognizerOptions: {},\n    _framebuffer: null,\n    _animate: false,\n    _pickable: true,\n    _typedArrayManagerProps: {},\n    _customRender: null,\n    widgets: [],\n    onDeviceInitialized: noop,\n    onWebGLInitialized: noop,\n    onResize: noop,\n    onViewStateChange: noop,\n    onInteractionStateChange: noop,\n    onBeforeRender: noop,\n    onAfterRender: noop,\n    onLoad: noop,\n    onError: (error) => log.error(error.message, error.cause)(),\n    onHover: null,\n    onClick: null,\n    onDragStart: null,\n    onDrag: null,\n    onDragEnd: null,\n    _onMetrics: null,\n    getCursor,\n    getTooltip: null,\n    debug: false,\n    drawPickingColors: false\n};\n/* eslint-disable max-statements */\nexport default class Deck {\n    static { this.defaultProps = defaultProps; }\n    // This is used to defeat tree shaking of init.js\n    // https://github.com/visgl/deck.gl/issues/3213\n    static { this.VERSION = VERSION; }\n    constructor(props) {\n        this.width = 0;\n        this.height = 0;\n        // Allows attaching arbitrary data to the instance\n        this.userData = {};\n        this.device = null;\n        this.canvas = null;\n        this.viewManager = null;\n        this.layerManager = null;\n        this.effectManager = null;\n        this.deckRenderer = null;\n        this.deckPicker = null;\n        this.eventManager = null;\n        this.widgetManager = null;\n        this.tooltip = null;\n        this.animationLoop = null;\n        this.cursorState = {\n            isHovering: false,\n            isDragging: false\n        };\n        this.stats = new Stats({ id: 'deck.gl' });\n        this.metrics = {\n            fps: 0,\n            setPropsTime: 0,\n            updateAttributesTime: 0,\n            framesRedrawn: 0,\n            pickTime: 0,\n            pickCount: 0,\n            gpuTime: 0,\n            gpuTimePerFrame: 0,\n            cpuTime: 0,\n            cpuTimePerFrame: 0,\n            bufferMemory: 0,\n            textureMemory: 0,\n            renderbufferMemory: 0,\n            gpuMemory: 0\n        };\n        this._metricsCounter = 0;\n        this._needsRedraw = 'Initial render';\n        this._pickRequest = {\n            mode: 'hover',\n            x: -1,\n            y: -1,\n            radius: 0,\n            event: null\n        };\n        /**\n         * Pick and store the object under the pointer on `pointerdown`.\n         * This object is reused for subsequent `onClick` and `onDrag*` callbacks.\n         */\n        this._lastPointerDownInfo = null;\n        // The `pointermove` event may fire multiple times in between two animation frames,\n        // it's a waste of time to run picking without rerender. Instead we save the last pick\n        // request and only do it once on the next animation frame.\n        /** Internal use only: event handler for pointerdown */\n        this._onPointerMove = (event) => {\n            const { _pickRequest } = this;\n            if (event.type === 'pointerleave') {\n                _pickRequest.x = -1;\n                _pickRequest.y = -1;\n                _pickRequest.radius = 0;\n            }\n            else if (event.leftButton || event.rightButton) {\n                // Do not trigger onHover callbacks if mouse button is down.\n                return;\n            }\n            else {\n                const pos = event.offsetCenter;\n                // Do not trigger callbacks when click/hover position is invalid. Doing so will cause a\n                // assertion error when attempting to unproject the position.\n                if (!pos) {\n                    return;\n                }\n                _pickRequest.x = pos.x;\n                _pickRequest.y = pos.y;\n                _pickRequest.radius = this.props.pickingRadius;\n            }\n            if (this.layerManager) {\n                this.layerManager.context.mousePosition = { x: _pickRequest.x, y: _pickRequest.y };\n            }\n            _pickRequest.event = event;\n        };\n        /** Internal use only: event handler for click & drag */\n        this._onEvent = (event) => {\n            const eventOptions = EVENTS[event.type];\n            const pos = event.offsetCenter;\n            if (!eventOptions || !pos || !this.layerManager) {\n                return;\n            }\n            // Reuse last picked object\n            const layers = this.layerManager.getLayers();\n            const info = this.deckPicker.getLastPickedObject({\n                x: pos.x,\n                y: pos.y,\n                layers,\n                viewports: this.getViewports(pos)\n            }, this._lastPointerDownInfo);\n            const { layer } = info;\n            const layerHandler = layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n            const rootHandler = this.props[eventOptions.handler];\n            let handled = false;\n            if (layerHandler) {\n                handled = layerHandler.call(layer, info, event);\n            }\n            if (!handled) {\n                rootHandler?.(info, event);\n                this.widgetManager.onEvent(info, event);\n            }\n        };\n        /** Internal use only: evnet handler for pointerdown */\n        this._onPointerDown = (event) => {\n            const pos = event.offsetCenter;\n            const pickedInfo = this._pick('pickObject', 'pickObject Time', {\n                x: pos.x,\n                y: pos.y,\n                radius: this.props.pickingRadius\n            });\n            this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n        };\n        // @ts-ignore views\n        this.props = { ...defaultProps, ...props };\n        props = this.props;\n        if (props.viewState && props.initialViewState) {\n            log.warn('View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.')();\n        }\n        this.viewState = this.props.initialViewState;\n        // See if we already have a device\n        if (props.device) {\n            this.device = props.device;\n        }\n        else if (props.gl) {\n            if (props.gl instanceof WebGLRenderingContext) {\n                log.error('WebGL1 context not supported.')();\n            }\n            this.device = WebGLDevice.attach(props.gl);\n        }\n        let deviceOrPromise = this.device;\n        if (!deviceOrPromise) {\n            // TODO v9 should we install WebGL backend as default for now?\n            luma.registerDevices([WebGLDevice]);\n            deviceOrPromise = luma.createDevice({\n                ...props.deviceProps,\n                canvas: this._createCanvas(props)\n            });\n        }\n        this.animationLoop = this._createAnimationLoop(deviceOrPromise, props);\n        this.setProps(props);\n        // UNSAFE/experimental prop: only set at initialization to avoid performance hit\n        if (props._typedArrayManagerProps) {\n            typedArrayManager.setOptions(props._typedArrayManagerProps);\n        }\n        this.animationLoop.start();\n    }\n    /** Stop rendering and dispose all resources */\n    finalize() {\n        this.animationLoop?.stop();\n        this.animationLoop?.destroy();\n        this.animationLoop = null;\n        this._lastPointerDownInfo = null;\n        this.layerManager?.finalize();\n        this.layerManager = null;\n        this.viewManager?.finalize();\n        this.viewManager = null;\n        this.effectManager?.finalize();\n        this.effectManager = null;\n        this.deckRenderer?.finalize();\n        this.deckRenderer = null;\n        this.deckPicker?.finalize();\n        this.deckPicker = null;\n        this.eventManager?.destroy();\n        this.eventManager = null;\n        this.widgetManager?.finalize();\n        this.widgetManager = null;\n        if (!this.props.canvas && !this.props.device && this.canvas) {\n            // remove internally created canvas\n            this.canvas.parentElement?.removeChild(this.canvas);\n            this.canvas = null;\n        }\n    }\n    /** Partially update props */\n    setProps(props) {\n        this.stats.get('setProps Time').timeStart();\n        if ('onLayerHover' in props) {\n            log.removed('onLayerHover', 'onHover')();\n        }\n        if ('onLayerClick' in props) {\n            log.removed('onLayerClick', 'onClick')();\n        }\n        if (props.initialViewState &&\n            // depth = 3 when comparing viewStates: viewId.position.0\n            !deepEqual(this.props.initialViewState, props.initialViewState, 3)) {\n            // Overwrite internal view state\n            this.viewState = props.initialViewState;\n        }\n        // Merge with existing props\n        Object.assign(this.props, props);\n        // Update CSS size of canvas\n        this._setCanvasSize(this.props);\n        // We need to overwrite CSS style width and height with actual, numeric values\n        const resolvedProps = Object.create(this.props);\n        Object.assign(resolvedProps, {\n            views: this._getViews(),\n            width: this.width,\n            height: this.height,\n            viewState: this._getViewState()\n        });\n        // Update the animation loop\n        this.animationLoop?.setProps(resolvedProps);\n        // If initialized, update sub manager props\n        if (this.layerManager) {\n            this.viewManager.setProps(resolvedProps);\n            // Make sure that any new layer gets initialized with the current viewport\n            this.layerManager.activateViewport(this.getViewports()[0]);\n            this.layerManager.setProps(resolvedProps);\n            this.effectManager.setProps(resolvedProps);\n            this.deckRenderer.setProps(resolvedProps);\n            this.deckPicker.setProps(resolvedProps);\n            this.widgetManager.setProps(resolvedProps);\n        }\n        this.stats.get('setProps Time').timeEnd();\n    }\n    // Public API\n    /**\n     * Check if a redraw is needed\n     * @returns `false` or a string summarizing the redraw reason\n     */\n    needsRedraw(opts = { clearRedrawFlags: false }) {\n        if (!this.layerManager) {\n            // Not initialized or already finalized\n            return false;\n        }\n        if (this.props._animate) {\n            return 'Deck._animate';\n        }\n        let redraw = this._needsRedraw;\n        if (opts.clearRedrawFlags) {\n            this._needsRedraw = false;\n        }\n        const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n        const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n        const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n        const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n        redraw =\n            redraw ||\n                viewManagerNeedsRedraw ||\n                layerManagerNeedsRedraw ||\n                effectManagerNeedsRedraw ||\n                deckRendererNeedsRedraw;\n        return redraw;\n    }\n    /**\n     * Redraw the GL context\n     * @param reason If not provided, only redraw if deemed necessary. Otherwise redraw regardless of internal states.\n     * @returns\n     */\n    redraw(reason) {\n        if (!this.layerManager) {\n            // Not yet initialized\n            return;\n        }\n        // Check if we need to redraw\n        let redrawReason = this.needsRedraw({ clearRedrawFlags: true });\n        // User-supplied should take precedent, however the redraw flags get cleared regardless\n        redrawReason = reason || redrawReason;\n        if (!redrawReason) {\n            return;\n        }\n        this.stats.get('Redraw Count').incrementCount();\n        if (this.props._customRender) {\n            this.props._customRender(redrawReason);\n        }\n        else {\n            this._drawLayers(redrawReason);\n        }\n    }\n    /** Flag indicating that the Deck instance has initialized its resources and it's safe to call public methods. */\n    get isInitialized() {\n        return this.viewManager !== null;\n    }\n    /** Get a list of views that are currently rendered */\n    getViews() {\n        assert(this.viewManager);\n        return this.viewManager.views;\n    }\n    /** Get a list of viewports that are currently rendered.\n     * @param rect If provided, only returns viewports within the given bounding box.\n     */\n    getViewports(rect) {\n        assert(this.viewManager);\n        return this.viewManager.getViewports(rect);\n    }\n    /** Get the current canvas element. */\n    getCanvas() {\n        return this.canvas;\n    }\n    /** Query the object rendered on top at a given point */\n    pickObject(opts) {\n        const infos = this._pick('pickObject', 'pickObject Time', opts).result;\n        return infos.length ? infos[0] : null;\n    }\n    /* Query all rendered objects at a given point */\n    pickMultipleObjects(opts) {\n        opts.depth = opts.depth || 10;\n        return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n    }\n    /* Query all objects rendered on top within a bounding box */\n    pickObjects(opts) {\n        return this._pick('pickObjects', 'pickObjects Time', opts);\n    }\n    /** Experimental\n     * Add a global resource for sharing among layers\n     */\n    _addResources(resources, forceUpdate = false) {\n        for (const id in resources) {\n            this.layerManager.resourceManager.add({ resourceId: id, data: resources[id], forceUpdate });\n        }\n    }\n    /** Experimental\n     * Remove a global resource\n     */\n    _removeResources(resourceIds) {\n        for (const id of resourceIds) {\n            this.layerManager.resourceManager.remove(id);\n        }\n    }\n    /** Experimental\n     * Register a default effect. Effects will be sorted by order, those with a low order will be rendered first\n     */\n    _addDefaultEffect(effect) {\n        this.effectManager.addDefaultEffect(effect);\n    }\n    _addDefaultShaderModule(module) {\n        this.layerManager.addDefaultShaderModule(module);\n    }\n    _removeDefaultShaderModule(module) {\n        this.layerManager?.removeDefaultShaderModule(module);\n    }\n    _pick(method, statKey, opts) {\n        assert(this.deckPicker);\n        const { stats } = this;\n        stats.get('Pick Count').incrementCount();\n        stats.get(statKey).timeStart();\n        const infos = this.deckPicker[method]({\n            // layerManager, viewManager and effectManager are always defined if deckPicker is\n            layers: this.layerManager.getLayers(opts),\n            views: this.viewManager.getViews(),\n            viewports: this.getViewports(opts),\n            onViewportActive: this.layerManager.activateViewport,\n            effects: this.effectManager.getEffects(),\n            ...opts\n        });\n        stats.get(statKey).timeEnd();\n        return infos;\n    }\n    /** Resolve props.canvas to element */\n    _createCanvas(props) {\n        let canvas = props.canvas;\n        // TODO EventManager should accept element id\n        if (typeof canvas === 'string') {\n            canvas = document.getElementById(canvas);\n            assert(canvas);\n        }\n        if (!canvas) {\n            canvas = document.createElement('canvas');\n            canvas.id = props.id || 'deckgl-overlay';\n            const parent = props.parent || document.body;\n            parent.appendChild(canvas);\n        }\n        Object.assign(canvas.style, props.style);\n        return canvas;\n    }\n    /** Updates canvas width and/or height, if provided as props */\n    _setCanvasSize(props) {\n        if (!this.canvas) {\n            return;\n        }\n        const { width, height } = props;\n        // Set size ONLY if props are being provided, otherwise let canvas be layouted freely\n        if (width || width === 0) {\n            const cssWidth = Number.isFinite(width) ? `${width}px` : width;\n            this.canvas.style.width = cssWidth;\n        }\n        if (height || height === 0) {\n            const cssHeight = Number.isFinite(height) ? `${height}px` : height;\n            // Note: position==='absolute' required for height 100% to work\n            this.canvas.style.position = props.style?.position || 'absolute';\n            this.canvas.style.height = cssHeight;\n        }\n    }\n    /** If canvas size has changed, reads out the new size and update */\n    _updateCanvasSize() {\n        const { canvas } = this;\n        if (!canvas) {\n            return;\n        }\n        // Fallback to width/height when clientWidth/clientHeight are undefined (OffscreenCanvas).\n        const newWidth = canvas.clientWidth ?? canvas.width;\n        const newHeight = canvas.clientHeight ?? canvas.height;\n        if (newWidth !== this.width || newHeight !== this.height) {\n            // @ts-expect-error private assign to read-only property\n            this.width = newWidth;\n            // @ts-expect-error private assign to read-only property\n            this.height = newHeight;\n            this.viewManager?.setProps({ width: newWidth, height: newHeight });\n            // Make sure that any new layer gets initialized with the current viewport\n            this.layerManager?.activateViewport(this.getViewports()[0]);\n            this.props.onResize({ width: newWidth, height: newHeight });\n        }\n    }\n    _createAnimationLoop(deviceOrPromise, props) {\n        const { \n        // width,\n        // height,\n        gl, \n        // deviceProps,\n        // glOptions,\n        // debug,\n        onError, \n        // onBeforeRender,\n        // onAfterRender,\n        useDevicePixels } = props;\n        return new AnimationLoop({\n            device: deviceOrPromise,\n            useDevicePixels,\n            // TODO v9\n            autoResizeDrawingBuffer: !gl, // do not auto resize external context\n            autoResizeViewport: false,\n            // @ts-expect-error luma.gl needs to accept Promise<void> return value\n            onInitialize: context => this._setDevice(context.device),\n            onRender: this._onRenderFrame.bind(this),\n            // @ts-expect-error typing mismatch: AnimationLoop does not accept onError:null\n            onError\n            // onBeforeRender,\n            // onAfterRender,\n        });\n    }\n    // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState\n    // TODO: For backwards compatibility ensure numeric width and height is added to the viewState\n    _getViewState() {\n        return this.props.viewState || this.viewState;\n    }\n    // Get the view descriptor list\n    _getViews() {\n        const { views } = this.props;\n        const normalizedViews = Array.isArray(views)\n            ? views\n            : // If null, default to a full screen map view port\n                views\n                    ? [views]\n                    : [new MapView({ id: 'default-view' })];\n        if (normalizedViews.length && this.props.controller) {\n            // Backward compatibility: support controller prop\n            normalizedViews[0].props.controller = this.props.controller;\n        }\n        return normalizedViews;\n    }\n    _onContextLost() {\n        const { onError } = this.props;\n        if (this.animationLoop && onError) {\n            onError(new Error('WebGL context is lost'));\n        }\n    }\n    /** Actually run picking */\n    _pickAndCallback() {\n        const { _pickRequest } = this;\n        if (_pickRequest.event) {\n            // Perform picking\n            const { result, emptyInfo } = this._pick('pickObject', 'pickObject Time', _pickRequest);\n            this.cursorState.isHovering = result.length > 0;\n            // There are 4 possible scenarios:\n            // result is [outInfo, pickedInfo] (moved from one pickable layer to another)\n            // result is [outInfo] (moved outside of a pickable layer)\n            // result is [pickedInfo] (moved into or over a pickable layer)\n            // result is [] (nothing is or was picked)\n            //\n            // `layer.props.onHover` should be called on all affected layers (out/over)\n            // `deck.props.onHover` should be called with the picked info if any, or empty info otherwise\n            // `deck.props.getTooltip` should be called with the picked info if any, or empty info otherwise\n            // Execute callbacks\n            let pickedInfo = emptyInfo;\n            let handled = false;\n            for (const info of result) {\n                pickedInfo = info;\n                handled = info.layer?.onHover(info, _pickRequest.event) || handled;\n            }\n            if (!handled) {\n                this.props.onHover?.(pickedInfo, _pickRequest.event);\n                this.widgetManager.onHover(pickedInfo, _pickRequest.event);\n            }\n            // Clear pending pickRequest\n            _pickRequest.event = null;\n        }\n    }\n    _updateCursor() {\n        const container = this.props.parent || this.canvas;\n        if (container) {\n            container.style.cursor = this.props.getCursor(this.cursorState);\n        }\n    }\n    _setDevice(device) {\n        this.device = device;\n        if (!this.animationLoop) {\n            // finalize() has been called\n            return;\n        }\n        // if external context...\n        if (!this.canvas) {\n            this.canvas = this.device.canvasContext?.canvas;\n            // TODO v9\n            // ts-expect-error - Currently luma.gl v9 does not expose these options\n            // All WebGLDevice contexts are instrumented, but it seems the device\n            // should have a method to start state tracking even if not enabled?\n            // instrumentGLContext(this.device.gl, {enable: true, copyState: true});\n        }\n        this.device.setParametersWebGL({\n            blend: true,\n            blendFunc: [770, 771, 1, 771],\n            polygonOffsetFill: true,\n            depthTest: true,\n            depthFunc: 515\n        });\n        this.props.onDeviceInitialized(this.device);\n        if (this.device instanceof WebGLDevice) {\n            // Legacy callback - warn?\n            this.props.onWebGLInitialized(this.device.gl);\n        }\n        // timeline for transitions\n        const timeline = new Timeline();\n        timeline.play();\n        this.animationLoop.attachTimeline(timeline);\n        this.eventManager = new EventManager(this.props.parent || this.canvas, {\n            touchAction: this.props.touchAction,\n            recognizerOptions: this.props.eventRecognizerOptions,\n            events: {\n                pointerdown: this._onPointerDown,\n                pointermove: this._onPointerMove,\n                pointerleave: this._onPointerMove\n            }\n        });\n        for (const eventType in EVENTS) {\n            this.eventManager.on(eventType, this._onEvent);\n        }\n        this.viewManager = new ViewManager({\n            timeline,\n            eventManager: this.eventManager,\n            onViewStateChange: this._onViewStateChange.bind(this),\n            onInteractionStateChange: this._onInteractionStateChange.bind(this),\n            views: this._getViews(),\n            viewState: this._getViewState(),\n            width: this.width,\n            height: this.height\n        });\n        // viewManager must be initialized before layerManager\n        // layerManager depends on viewport created by viewManager.\n        const viewport = this.viewManager.getViewports()[0];\n        // Note: avoid React setState due GL animation loop / setState timing issue\n        this.layerManager = new LayerManager(this.device, {\n            deck: this,\n            stats: this.stats,\n            viewport,\n            timeline\n        });\n        this.effectManager = new EffectManager({\n            deck: this,\n            device: this.device\n        });\n        this.deckRenderer = new DeckRenderer(this.device);\n        this.deckPicker = new DeckPicker(this.device);\n        this.widgetManager = new WidgetManager({\n            deck: this,\n            parentElement: this.canvas?.parentElement\n        });\n        this.widgetManager.addDefault(new Tooltip());\n        this.setProps(this.props);\n        this._updateCanvasSize();\n        this.props.onLoad();\n    }\n    /** Internal only: default render function (redraw all layers and views) */\n    _drawLayers(redrawReason, renderOptions) {\n        const { device, gl } = this.layerManager.context;\n        this.props.onBeforeRender({ device, gl });\n        const opts = {\n            target: this.props._framebuffer,\n            layers: this.layerManager.getLayers(),\n            viewports: this.viewManager.getViewports(),\n            onViewportActive: this.layerManager.activateViewport,\n            views: this.viewManager.getViews(),\n            pass: 'screen',\n            effects: this.effectManager.getEffects(),\n            ...renderOptions\n        };\n        this.deckRenderer?.renderLayers(opts);\n        if (opts.pass === 'screen') {\n            // This method could be called when drawing to picking buffer, texture etc.\n            // Only when drawing to screen, update all widgets (UI components)\n            this.widgetManager.onRedraw({\n                viewports: opts.viewports,\n                layers: opts.layers\n            });\n        }\n        this.props.onAfterRender({ device, gl });\n    }\n    // Callbacks\n    _onRenderFrame() {\n        this._getFrameStats();\n        // Log perf stats every second\n        if (this._metricsCounter++ % 60 === 0) {\n            this._getMetrics();\n            this.stats.reset();\n            log.table(4, this.metrics)();\n            // Experimental: report metrics\n            if (this.props._onMetrics) {\n                this.props._onMetrics(this.metrics);\n            }\n        }\n        this._updateCanvasSize();\n        this._updateCursor();\n        // Update layers if needed (e.g. some async prop has loaded)\n        // Note: This can trigger a redraw\n        this.layerManager.updateLayers();\n        // Perform picking request if any\n        this._pickAndCallback();\n        // Redraw if necessary\n        this.redraw();\n        // Update viewport transition if needed\n        // Note: this can trigger `onViewStateChange`, and affect layers\n        // We want to defer these changes to the next frame\n        if (this.viewManager) {\n            this.viewManager.updateViewStates();\n        }\n    }\n    // Callbacks\n    _onViewStateChange(params) {\n        // Let app know that view state is changing, and give it a chance to change it\n        const viewState = this.props.onViewStateChange(params) || params.viewState;\n        // If initialViewState was set on creation, auto track position\n        if (this.viewState) {\n            this.viewState = { ...this.viewState, [params.viewId]: viewState };\n            if (!this.props.viewState) {\n                // Apply internal view state\n                if (this.viewManager) {\n                    this.viewManager.setProps({ viewState: this.viewState });\n                }\n            }\n        }\n    }\n    _onInteractionStateChange(interactionState) {\n        this.cursorState.isDragging = interactionState.isDragging || false;\n        this.props.onInteractionStateChange(interactionState);\n    }\n    _getFrameStats() {\n        const { stats } = this;\n        stats.get('frameRate').timeEnd();\n        stats.get('frameRate').timeStart();\n        // Get individual stats from luma.gl so reset works\n        const animationLoopStats = this.animationLoop.stats;\n        stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n        stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n    }\n    _getMetrics() {\n        const { metrics, stats } = this;\n        metrics.fps = stats.get('frameRate').getHz();\n        metrics.setPropsTime = stats.get('setProps Time').time;\n        metrics.updateAttributesTime = stats.get('Update Attributes').time;\n        metrics.framesRedrawn = stats.get('Redraw Count').count;\n        metrics.pickTime =\n            stats.get('pickObject Time').time +\n                stats.get('pickMultipleObjects Time').time +\n                stats.get('pickObjects Time').time;\n        metrics.pickCount = stats.get('Pick Count').count;\n        // Luma stats\n        metrics.gpuTime = stats.get('GPU Time').time;\n        metrics.cpuTime = stats.get('CPU Time').time;\n        metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n        metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n        const memoryStats = luma.stats.get('Memory Usage');\n        metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n        metrics.textureMemory = memoryStats.get('Texture Memory').count;\n        metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n        metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n    }\n}\n", "import { Buffer } from '@luma.gl/core';\nimport { typedArrayFromDataType, getBufferAttributeLayout, getStride, dataTypeFromTypedArray } from \"./gl-utils.js\";\nimport typedArrayManager from \"../../utils/typed-array-manager.js\";\nimport { toDoublePrecisionArray } from \"../../utils/math-utils.js\";\nimport log from \"../../utils/log.js\";\nfunction resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {\n    if (shaderAttributeOptions.offset) {\n        log.removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();\n    }\n    // All shader attributes share the parent's stride\n    const stride = getStride(baseAccessor);\n    // `vertexOffset` is used to access the neighboring vertex's value\n    // e.g. `nextPositions` in polygon\n    const vertexOffset = shaderAttributeOptions.vertexOffset !== undefined\n        ? shaderAttributeOptions.vertexOffset\n        : baseAccessor.vertexOffset || 0;\n    // `elementOffset` is defined when shader attribute's size is smaller than the parent's\n    // e.g. `translations` in transform matrix\n    const elementOffset = shaderAttributeOptions.elementOffset || 0;\n    const offset = \n    // offsets defined by the attribute\n    vertexOffset * stride +\n        elementOffset * baseAccessor.bytesPerElement +\n        // offsets defined by external buffers if any\n        (baseAccessor.offset || 0);\n    return {\n        ...shaderAttributeOptions,\n        offset,\n        stride\n    };\n}\nfunction resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {\n    const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n    return {\n        high: resolvedOptions,\n        low: {\n            ...resolvedOptions,\n            offset: resolvedOptions.offset + baseAccessor.size * 4\n        }\n    };\n}\nexport default class DataColumn {\n    /* eslint-disable max-statements */\n    constructor(device, opts, state) {\n        this._buffer = null;\n        this.device = device;\n        this.id = opts.id || '';\n        this.size = opts.size || 1;\n        const logicalType = opts.logicalType || opts.type;\n        const doublePrecision = logicalType === 'float64';\n        let { defaultValue } = opts;\n        defaultValue = Number.isFinite(defaultValue)\n            ? [defaultValue]\n            : defaultValue || new Array(this.size).fill(0);\n        let bufferType;\n        if (doublePrecision) {\n            bufferType = 'float32';\n        }\n        else if (!logicalType && opts.isIndexed) {\n            bufferType = 'uint32';\n        }\n        else {\n            bufferType = logicalType || 'float32';\n        }\n        // This is the attribute type defined by the layer\n        // If an external buffer is provided, this.type may be overwritten\n        // But we always want to use defaultType for allocation\n        let defaultType = typedArrayFromDataType(logicalType || bufferType);\n        this.doublePrecision = doublePrecision;\n        // `fp64: false` tells a double-precision attribute to allocate Float32Arrays\n        // by default when using auto-packing. This is more efficient in use cases where\n        // high precision is unnecessary, but the `64Low` attribute is still required\n        // by the shader.\n        if (doublePrecision && opts.fp64 === false) {\n            defaultType = Float32Array;\n        }\n        this.value = null;\n        this.settings = {\n            ...opts,\n            defaultType,\n            defaultValue: defaultValue,\n            logicalType,\n            type: bufferType,\n            normalized: bufferType.includes('norm'),\n            size: this.size,\n            bytesPerElement: defaultType.BYTES_PER_ELEMENT\n        };\n        this.state = {\n            ...state,\n            externalBuffer: null,\n            bufferAccessor: this.settings,\n            allocatedValue: null,\n            numInstances: 0,\n            bounds: null,\n            constant: false\n        };\n    }\n    /* eslint-enable max-statements */\n    get isConstant() {\n        return this.state.constant;\n    }\n    get buffer() {\n        return this._buffer;\n    }\n    get byteOffset() {\n        const accessor = this.getAccessor();\n        if (accessor.vertexOffset) {\n            return accessor.vertexOffset * getStride(accessor);\n        }\n        return 0;\n    }\n    get numInstances() {\n        return this.state.numInstances;\n    }\n    set numInstances(n) {\n        this.state.numInstances = n;\n    }\n    delete() {\n        if (this._buffer) {\n            this._buffer.delete();\n            this._buffer = null;\n        }\n        typedArrayManager.release(this.state.allocatedValue);\n    }\n    getBuffer() {\n        if (this.state.constant) {\n            return null;\n        }\n        return this.state.externalBuffer || this._buffer;\n    }\n    getValue(attributeName = this.id, options = null) {\n        const result = {};\n        if (this.state.constant) {\n            const value = this.value;\n            if (options) {\n                const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n                const offset = shaderAttributeDef.offset / value.BYTES_PER_ELEMENT;\n                const size = shaderAttributeDef.size || this.size;\n                result[attributeName] = value.subarray(offset, offset + size);\n            }\n            else {\n                result[attributeName] = value;\n            }\n        }\n        else {\n            result[attributeName] = this.getBuffer();\n        }\n        if (this.doublePrecision) {\n            if (this.value instanceof Float64Array) {\n                result[`${attributeName}64Low`] = result[attributeName];\n            }\n            else {\n                // Disable fp64 low part\n                result[`${attributeName}64Low`] = new Float32Array(this.size);\n            }\n        }\n        return result;\n    }\n    getBufferLayout(attributeName = this.id, options = null) {\n        const accessor = this.getAccessor();\n        const attributes = [];\n        const result = {\n            name: this.id,\n            byteStride: getStride(accessor),\n            attributes\n        };\n        if (this.doublePrecision) {\n            const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(accessor, options || {});\n            attributes.push(getBufferAttributeLayout(attributeName, { ...accessor, ...doubleShaderAttributeDefs.high }), getBufferAttributeLayout(`${attributeName}64Low`, {\n                ...accessor,\n                ...doubleShaderAttributeDefs.low\n            }));\n        }\n        else if (options) {\n            const shaderAttributeDef = resolveShaderAttribute(accessor, options);\n            attributes.push(getBufferAttributeLayout(attributeName, { ...accessor, ...shaderAttributeDef }));\n        }\n        else {\n            attributes.push(getBufferAttributeLayout(attributeName, accessor));\n        }\n        return result;\n    }\n    setAccessor(accessor) {\n        this.state.bufferAccessor = accessor;\n    }\n    getAccessor() {\n        return this.state.bufferAccessor;\n    }\n    // Returns [min: Array(size), max: Array(size)]\n    /* eslint-disable max-depth */\n    getBounds() {\n        if (this.state.bounds) {\n            return this.state.bounds;\n        }\n        let result = null;\n        if (this.state.constant && this.value) {\n            const min = Array.from(this.value);\n            result = [min, min];\n        }\n        else {\n            const { value, numInstances, size } = this;\n            const len = numInstances * size;\n            if (value && len && value.length >= len) {\n                const min = new Array(size).fill(Infinity);\n                const max = new Array(size).fill(-Infinity);\n                for (let i = 0; i < len;) {\n                    for (let j = 0; j < size; j++) {\n                        const v = value[i++];\n                        if (v < min[j])\n                            min[j] = v;\n                        if (v > max[j])\n                            max[j] = v;\n                    }\n                }\n                result = [min, max];\n            }\n        }\n        this.state.bounds = result;\n        return result;\n    }\n    // returns true if success\n    // eslint-disable-next-line max-statements\n    setData(data) {\n        const { state } = this;\n        let opts;\n        if (ArrayBuffer.isView(data)) {\n            opts = { value: data };\n        }\n        else if (data instanceof Buffer) {\n            opts = { buffer: data };\n        }\n        else {\n            opts = data;\n        }\n        const accessor = { ...this.settings, ...opts };\n        if (ArrayBuffer.isView(opts.value)) {\n            if (!opts.type) {\n                // Deduce data type\n                const is64Bit = this.doublePrecision && opts.value instanceof Float64Array;\n                if (is64Bit) {\n                    accessor.type = 'float32';\n                }\n                else {\n                    const type = dataTypeFromTypedArray(opts.value);\n                    accessor.type = accessor.normalized ? type.replace('int', 'norm') : type;\n                }\n            }\n            accessor.bytesPerElement = opts.value.BYTES_PER_ELEMENT;\n            accessor.stride = getStride(accessor);\n        }\n        state.bounds = null; // clear cached bounds\n        if (opts.constant) {\n            // set constant\n            let value = opts.value;\n            value = this._normalizeValue(value, [], 0);\n            if (this.settings.normalized) {\n                value = this.normalizeConstant(value);\n            }\n            const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n            if (!hasChanged) {\n                return false;\n            }\n            state.externalBuffer = null;\n            state.constant = true;\n            this.value = ArrayBuffer.isView(value) ? value : new Float32Array(value);\n        }\n        else if (opts.buffer) {\n            const buffer = opts.buffer;\n            state.externalBuffer = buffer;\n            state.constant = false;\n            this.value = opts.value || null;\n        }\n        else if (opts.value) {\n            this._checkExternalBuffer(opts);\n            let value = opts.value;\n            state.externalBuffer = null;\n            state.constant = false;\n            this.value = value;\n            let { buffer } = this;\n            const stride = getStride(accessor);\n            const byteOffset = (accessor.vertexOffset || 0) * stride;\n            if (this.doublePrecision && value instanceof Float64Array) {\n                value = toDoublePrecisionArray(value, accessor);\n            }\n            if (this.settings.isIndexed) {\n                const ArrayType = this.settings.defaultType;\n                if (value.constructor !== ArrayType) {\n                    // Cast the index buffer to expected type\n                    value = new ArrayType(value);\n                }\n            }\n            // A small over allocation is used as safety margin\n            // Shader attributes may try to access this buffer with bigger offsets\n            const requiredBufferSize = value.byteLength + byteOffset + stride * 2;\n            if (!buffer || buffer.byteLength < requiredBufferSize) {\n                buffer = this._createBuffer(requiredBufferSize);\n            }\n            buffer.write(value, byteOffset);\n        }\n        this.setAccessor(accessor);\n        return true;\n    }\n    updateSubBuffer(opts = {}) {\n        this.state.bounds = null; // clear cached bounds\n        const value = this.value;\n        const { startOffset = 0, endOffset } = opts;\n        this.buffer.write(this.doublePrecision && value instanceof Float64Array\n            ? toDoublePrecisionArray(value, {\n                size: this.size,\n                startIndex: startOffset,\n                endIndex: endOffset\n            })\n            : value.subarray(startOffset, endOffset), startOffset * value.BYTES_PER_ELEMENT + this.byteOffset);\n    }\n    allocate(numInstances, copy = false) {\n        const { state } = this;\n        const oldValue = state.allocatedValue;\n        // Allocate at least one element to ensure a valid buffer\n        const value = typedArrayManager.allocate(oldValue, numInstances + 1, {\n            size: this.size,\n            type: this.settings.defaultType,\n            copy\n        });\n        this.value = value;\n        const { byteOffset } = this;\n        let { buffer } = this;\n        if (!buffer || buffer.byteLength < value.byteLength + byteOffset) {\n            buffer = this._createBuffer(value.byteLength + byteOffset);\n            if (copy && oldValue) {\n                // Upload the full existing attribute value to the GPU, so that updateBuffer\n                // can choose to only update a partial range.\n                // TODO - copy old buffer to new buffer on the GPU\n                buffer.write(oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue, byteOffset);\n            }\n        }\n        state.allocatedValue = value;\n        state.constant = false;\n        state.externalBuffer = null;\n        this.setAccessor(this.settings);\n        return true;\n    }\n    // PRIVATE HELPER METHODS\n    _checkExternalBuffer(opts) {\n        const { value } = opts;\n        if (!ArrayBuffer.isView(value)) {\n            throw new Error(`Attribute ${this.id} value is not TypedArray`);\n        }\n        const ArrayType = this.settings.defaultType;\n        let illegalArrayType = false;\n        if (this.doublePrecision) {\n            // not 32bit or 64bit\n            illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n        }\n        if (illegalArrayType) {\n            throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);\n        }\n        if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {\n            log.warn(`Attribute ${this.id} is normalized`)();\n        }\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n    normalizeConstant(value) {\n        /* eslint-disable complexity */\n        switch (this.settings.type) {\n            case 'snorm8':\n                // normalize [-128, 127] to [-1, 1]\n                return new Float32Array(value).map(x => ((x + 128) / 255) * 2 - 1);\n            case 'snorm16':\n                // normalize [-32768, 32767] to [-1, 1]\n                return new Float32Array(value).map(x => ((x + 32768) / 65535) * 2 - 1);\n            case 'unorm8':\n                // normalize [0, 255] to [0, 1]\n                return new Float32Array(value).map(x => x / 255);\n            case 'unorm16':\n                // normalize [0, 65535] to [0, 1]\n                return new Float32Array(value).map(x => x / 65535);\n            default:\n                // No normalization for gl.FLOAT and gl.HALF_FLOAT\n                return value;\n        }\n    }\n    /* check user supplied values and apply fallback */\n    _normalizeValue(value, out, start) {\n        const { defaultValue, size } = this.settings;\n        if (Number.isFinite(value)) {\n            out[start] = value;\n            return out;\n        }\n        if (!value) {\n            let i = size;\n            while (--i >= 0) {\n                out[start + i] = defaultValue[i];\n            }\n            return out;\n        }\n        // Important - switch cases are 5x more performant than a for loop!\n        /* eslint-disable no-fallthrough, default-case */\n        switch (size) {\n            case 4:\n                out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n            case 3:\n                out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n            case 2:\n                out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n            case 1:\n                out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n                break;\n            default:\n                // In the rare case where the attribute size > 4, do it the slow way\n                // This is used for e.g. transform matrices\n                let i = size;\n                while (--i >= 0) {\n                    out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n                }\n        }\n        return out;\n    }\n    _areValuesEqual(value1, value2) {\n        if (!value1 || !value2) {\n            return false;\n        }\n        const { size } = this;\n        for (let i = 0; i < size; i++) {\n            if (value1[i] !== value2[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _createBuffer(byteLength) {\n        if (this._buffer) {\n            this._buffer.destroy();\n        }\n        const { isIndexed, type } = this.settings;\n        this._buffer = this.device.createBuffer({\n            ...this._buffer?.props,\n            id: this.id,\n            usage: isIndexed ? Buffer.INDEX : Buffer.VERTEX,\n            indexType: isIndexed ? type : undefined,\n            byteLength\n        });\n        return this._buffer;\n    }\n}\n", "import { getTypedArrayFromDataType, getDataTypeFromTypedArray } from '@luma.gl/core';\nexport function typedArrayFromDataType(type) {\n    // Sorted in some order of likelihood to reduce amount of comparisons\n    switch (type) {\n        case 'float64':\n            return Float64Array;\n        case 'uint8':\n        case 'unorm8':\n            return Uint8ClampedArray;\n        default:\n            return getTypedArrayFromDataType(type);\n    }\n}\nexport const dataTypeFromTypedArray = getDataTypeFromTypedArray;\nexport function getBufferAttributeLayout(name, accessor) {\n    return {\n        attribute: name,\n        // @ts-expect-error Not all combinations are valid vertex formats; it's up to DataColumn to ensure\n        format: accessor.size > 1\n            ? `${accessor.type}x${accessor.size}`\n            : accessor.type,\n        byteOffset: accessor.offset || 0\n        // Note stride is set on the top level\n    };\n}\nexport function getStride(accessor) {\n    return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\nexport function bufferLayoutEqual(accessor1, accessor2) {\n    return (accessor1.type === accessor2.type &&\n        accessor1.size === accessor2.size &&\n        getStride(accessor1) === getStride(accessor2) &&\n        (accessor1.offset || 0) === (accessor2.offset || 0));\n}\n", "const EMPTY_ARRAY = [];\nconst placeholderArray = [];\n/*\n * Create an Iterable\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n * and a \"context\" tracker from the given data\n */\nexport function createIterable(data, startRow = 0, endRow = Infinity) {\n    let iterable = EMPTY_ARRAY;\n    const objectInfo = {\n        index: -1,\n        data,\n        // visitor can optionally utilize this to avoid constructing a new array for every object\n        target: []\n    };\n    if (!data) {\n        iterable = EMPTY_ARRAY;\n    }\n    else if (typeof data[Symbol.iterator] === 'function') {\n        // data is already an iterable\n        iterable = data;\n    }\n    else if (data.length > 0) {\n        placeholderArray.length = data.length;\n        iterable = placeholderArray;\n    }\n    if (startRow > 0 || Number.isFinite(endRow)) {\n        iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);\n        objectInfo.index = startRow - 1;\n    }\n    return { iterable, objectInfo };\n}\n/*\n * Returns true if data is an async iterable object\n */\nexport function isAsyncIterable(data) {\n    return data && data[Symbol.asyncIterator];\n}\n/*\n * Create an accessor function from a flat buffer that yields the value at each object index\n */\nexport function getAccessorFromBuffer(typedArray, options) {\n    const { size, stride, offset, startIndices, nested } = options;\n    const bytesPerElement = typedArray.BYTES_PER_ELEMENT;\n    const elementStride = stride ? stride / bytesPerElement : size;\n    const elementOffset = offset ? offset / bytesPerElement : 0;\n    const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);\n    return (_, { index, target }) => {\n        if (!startIndices) {\n            const sourceIndex = index * elementStride + elementOffset;\n            for (let j = 0; j < size; j++) {\n                target[j] = typedArray[sourceIndex + j];\n            }\n            return target;\n        }\n        const startIndex = startIndices[index];\n        const endIndex = startIndices[index + 1] || vertexCount;\n        let result;\n        if (nested) {\n            result = new Array(endIndex - startIndex);\n            for (let i = startIndex; i < endIndex; i++) {\n                const sourceIndex = i * elementStride + elementOffset;\n                target = new Array(size);\n                for (let j = 0; j < size; j++) {\n                    target[j] = typedArray[sourceIndex + j];\n                }\n                result[i - startIndex] = target;\n            }\n        }\n        else if (elementStride === size) {\n            result = typedArray.subarray(startIndex * size + elementOffset, endIndex * size + elementOffset);\n        }\n        else {\n            result = new typedArray.constructor((endIndex - startIndex) * size);\n            let targetIndex = 0;\n            for (let i = startIndex; i < endIndex; i++) {\n                const sourceIndex = i * elementStride + elementOffset;\n                for (let j = 0; j < size; j++) {\n                    result[targetIndex++] = typedArray[sourceIndex + j];\n                }\n            }\n        }\n        return result;\n    };\n}\n", "/*\n * range (Array)\n *   + start (Number) - the start index (incl.)\n *   + end (Number) - the end index (excl.)\n * rangeList (Array) - array of sorted, combined ranges\n */\nexport const EMPTY = [];\nexport const FULL = [[0, Infinity]];\n// Insert a range into a range collection\nexport function add(rangeList, range) {\n    // Noop if range collection already covers all\n    if (rangeList === FULL) {\n        return rangeList;\n    }\n    // Validate the input range\n    if (range[0] < 0) {\n        range[0] = 0;\n    }\n    if (range[0] >= range[1]) {\n        return rangeList;\n    }\n    // TODO - split off to tree-shakable Range class\n    const newRangeList = [];\n    const len = rangeList.length;\n    let insertPosition = 0;\n    for (let i = 0; i < len; i++) {\n        const range0 = rangeList[i];\n        if (range0[1] < range[0]) {\n            // the current range is to the left of the new range\n            newRangeList.push(range0);\n            insertPosition = i + 1;\n        }\n        else if (range0[0] > range[1]) {\n            // the current range is to the right of the new range\n            newRangeList.push(range0);\n        }\n        else {\n            range = [Math.min(range0[0], range[0]), Math.max(range0[1], range[1])];\n        }\n    }\n    newRangeList.splice(insertPosition, 0, range);\n    return newRangeList;\n}\n", "const DEFAULT_TRANSITION_SETTINGS = {\n    interpolation: {\n        duration: 0,\n        easing: t => t\n    },\n    spring: {\n        stiffness: 0.05,\n        damping: 0.5\n    }\n};\nexport function normalizeTransitionSettings(userSettings, layerSettings) {\n    if (!userSettings) {\n        return null;\n    }\n    if (Number.isFinite(userSettings)) {\n        userSettings = { type: 'interpolation', duration: userSettings };\n    }\n    const type = userSettings.type || 'interpolation';\n    return {\n        ...DEFAULT_TRANSITION_SETTINGS[type],\n        ...layerSettings,\n        ...userSettings,\n        type\n    };\n}\n", "/* eslint-disable complexity */\nimport DataColumn from \"./data-column.js\";\nimport assert from \"../../utils/assert.js\";\nimport { createIterable, getAccessorFromBuffer } from \"../../utils/iterable-utils.js\";\nimport { fillArray } from \"../../utils/flatten.js\";\nimport * as range from \"../../utils/range.js\";\nimport { bufferLayoutEqual } from \"./gl-utils.js\";\nimport { normalizeTransitionSettings } from \"./transition-settings.js\";\nexport default class Attribute extends DataColumn {\n    constructor(device, opts) {\n        super(device, opts, {\n            startIndices: null,\n            lastExternalBuffer: null,\n            binaryValue: null,\n            binaryAccessor: null,\n            needsUpdate: true,\n            needsRedraw: false,\n            layoutChanged: false,\n            updateRanges: range.FULL\n        });\n        /** Legacy approach to set attribute value - read `isConstant` instead for attribute state */\n        this.constant = false;\n        // eslint-disable-next-line\n        this.settings.update = opts.update || (opts.accessor ? this._autoUpdater : undefined);\n        Object.seal(this.settings);\n        Object.seal(this.state);\n        // Check all fields and generate helpful error messages\n        this._validateAttributeUpdaters();\n    }\n    get startIndices() {\n        return this.state.startIndices;\n    }\n    set startIndices(layout) {\n        this.state.startIndices = layout;\n    }\n    needsUpdate() {\n        return this.state.needsUpdate;\n    }\n    needsRedraw({ clearChangedFlags = false } = {}) {\n        const needsRedraw = this.state.needsRedraw;\n        this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n        return needsRedraw;\n    }\n    layoutChanged() {\n        return this.state.layoutChanged;\n    }\n    setAccessor(accessor) {\n        this.state.layoutChanged ||= !bufferLayoutEqual(accessor, this.getAccessor());\n        super.setAccessor(accessor);\n    }\n    getUpdateTriggers() {\n        const { accessor } = this.settings;\n        // Backards compatibility: allow attribute name to be used as update trigger key\n        return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n    }\n    supportsTransition() {\n        return Boolean(this.settings.transition);\n    }\n    // Resolve transition settings object if transition is enabled, otherwise `null`\n    getTransitionSetting(opts) {\n        if (!opts || !this.supportsTransition()) {\n            return null;\n        }\n        const { accessor } = this.settings;\n        // TODO: have the layer resolve these transition settings itself?\n        const layerSettings = this.settings.transition;\n        // these are the transition settings passed in by the user\n        const userSettings = Array.isArray(accessor)\n            ? // @ts-ignore\n                opts[accessor.find(a => opts[a])]\n            : // @ts-ignore\n                opts[accessor];\n        // Shorthand: use duration instead of parameter object\n        return normalizeTransitionSettings(userSettings, layerSettings);\n    }\n    setNeedsUpdate(reason = this.id, dataRange) {\n        this.state.needsUpdate = this.state.needsUpdate || reason;\n        this.setNeedsRedraw(reason);\n        if (dataRange) {\n            const { startRow = 0, endRow = Infinity } = dataRange;\n            this.state.updateRanges = range.add(this.state.updateRanges, [startRow, endRow]);\n        }\n        else {\n            this.state.updateRanges = range.FULL;\n        }\n    }\n    clearNeedsUpdate() {\n        this.state.needsUpdate = false;\n        this.state.updateRanges = range.EMPTY;\n    }\n    setNeedsRedraw(reason = this.id) {\n        this.state.needsRedraw = this.state.needsRedraw || reason;\n    }\n    allocate(numInstances) {\n        const { state, settings } = this;\n        if (settings.noAlloc) {\n            // Data is provided through a Buffer object.\n            return false;\n        }\n        if (settings.update) {\n            super.allocate(numInstances, state.updateRanges !== range.FULL);\n            return true;\n        }\n        return false;\n    }\n    updateBuffer({ numInstances, data, props, context }) {\n        if (!this.needsUpdate()) {\n            return false;\n        }\n        const { state: { updateRanges }, settings: { update, noAlloc } } = this;\n        let updated = true;\n        if (update) {\n            // Custom updater - typically for non-instanced layers\n            for (const [startRow, endRow] of updateRanges) {\n                update.call(context, this, { data, startRow, endRow, props, numInstances });\n            }\n            if (!this.value) {\n                // no value was assigned during update\n            }\n            else if (this.constant ||\n                !this.buffer ||\n                this.buffer.byteLength < this.value.byteLength + this.byteOffset) {\n                this.setData({\n                    value: this.value,\n                    constant: this.constant\n                });\n                // Setting attribute.constant in updater is a legacy approach that interferes with allocation in the next cycle\n                // Respect it here but reset after use\n                this.constant = false;\n            }\n            else {\n                for (const [startRow, endRow] of updateRanges) {\n                    const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n                    const endOffset = Number.isFinite(endRow)\n                        ? this.getVertexOffset(endRow)\n                        : noAlloc || !Number.isFinite(numInstances)\n                            ? this.value.length\n                            : numInstances * this.size;\n                    super.updateSubBuffer({ startOffset, endOffset });\n                }\n            }\n            this._checkAttributeArray();\n        }\n        else {\n            updated = false;\n        }\n        this.clearNeedsUpdate();\n        this.setNeedsRedraw();\n        return updated;\n    }\n    // Use generic value\n    // Returns true if successful\n    setConstantValue(value) {\n        if (value === undefined || typeof value === 'function') {\n            return false;\n        }\n        const hasChanged = this.setData({ constant: true, value });\n        if (hasChanged) {\n            this.setNeedsRedraw();\n        }\n        this.clearNeedsUpdate();\n        return true;\n    }\n    // Use external buffer\n    // Returns true if successful\n    // eslint-disable-next-line max-statements\n    setExternalBuffer(buffer) {\n        const { state } = this;\n        if (!buffer) {\n            state.lastExternalBuffer = null;\n            return false;\n        }\n        this.clearNeedsUpdate();\n        if (state.lastExternalBuffer === buffer) {\n            return true;\n        }\n        state.lastExternalBuffer = buffer;\n        this.setNeedsRedraw();\n        this.setData(buffer);\n        return true;\n    }\n    // Binary value is a typed array packed from mapping the source data with the accessor\n    // If the returned value from the accessor is the same as the attribute value, set it directly\n    // Otherwise use the auto updater for transform/normalization\n    setBinaryValue(buffer, startIndices = null) {\n        const { state, settings } = this;\n        if (!buffer) {\n            state.binaryValue = null;\n            state.binaryAccessor = null;\n            return false;\n        }\n        if (settings.noAlloc) {\n            // Let the layer handle this\n            return false;\n        }\n        if (state.binaryValue === buffer) {\n            this.clearNeedsUpdate();\n            return true;\n        }\n        state.binaryValue = buffer;\n        this.setNeedsRedraw();\n        const needsUpdate = settings.transform || startIndices !== this.startIndices;\n        if (needsUpdate) {\n            if (ArrayBuffer.isView(buffer)) {\n                buffer = { value: buffer };\n            }\n            const binaryValue = buffer;\n            assert(ArrayBuffer.isView(binaryValue.value), `invalid ${settings.accessor}`);\n            const needsNormalize = Boolean(binaryValue.size) && binaryValue.size !== this.size;\n            state.binaryAccessor = getAccessorFromBuffer(binaryValue.value, {\n                size: binaryValue.size || this.size,\n                stride: binaryValue.stride,\n                offset: binaryValue.offset,\n                startIndices: startIndices,\n                nested: needsNormalize\n            });\n            // Fall through to auto updater\n            return false;\n        }\n        this.clearNeedsUpdate();\n        this.setData(buffer);\n        return true;\n    }\n    getVertexOffset(row) {\n        const { startIndices } = this;\n        const vertexIndex = startIndices\n            ? row < startIndices.length\n                ? startIndices[row]\n                : this.numInstances\n            : row;\n        return vertexIndex * this.size;\n    }\n    getValue() {\n        const shaderAttributeDefs = this.settings.shaderAttributes;\n        const result = super.getValue();\n        if (!shaderAttributeDefs) {\n            return result;\n        }\n        for (const shaderAttributeName in shaderAttributeDefs) {\n            Object.assign(result, super.getValue(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]));\n        }\n        return result;\n    }\n    getBufferLayout() {\n        // Clear change flag\n        this.state.layoutChanged = false;\n        const shaderAttributeDefs = this.settings.shaderAttributes;\n        const result = super.getBufferLayout();\n        if (!shaderAttributeDefs) {\n            return result;\n        }\n        for (const shaderAttributeName in shaderAttributeDefs) {\n            const map = super.getBufferLayout(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]);\n            // @ts-ignore\n            result.attributes.push(...map.attributes);\n        }\n        return result;\n    }\n    /* eslint-disable max-depth, max-statements */\n    _autoUpdater(attribute, { data, startRow, endRow, props, numInstances }) {\n        if (attribute.constant) {\n            return;\n        }\n        const { settings, state, value, size, startIndices } = attribute;\n        const { accessor, transform } = settings;\n        const accessorFunc = state.binaryAccessor ||\n            // @ts-ignore\n            (typeof accessor === 'function' ? accessor : props[accessor]);\n        assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n        let i = attribute.getVertexOffset(startRow);\n        const { iterable, objectInfo } = createIterable(data, startRow, endRow);\n        for (const object of iterable) {\n            objectInfo.index++;\n            let objectValue = accessorFunc(object, objectInfo);\n            if (transform) {\n                // transform callbacks could be bound to a particular layer instance.\n                // always point `this` to the current layer.\n                objectValue = transform.call(this, objectValue);\n            }\n            if (startIndices) {\n                const numVertices = (objectInfo.index < startIndices.length - 1\n                    ? startIndices[objectInfo.index + 1]\n                    : numInstances) - startIndices[objectInfo.index];\n                if (objectValue && Array.isArray(objectValue[0])) {\n                    let startIndex = i;\n                    for (const item of objectValue) {\n                        attribute._normalizeValue(item, value, startIndex);\n                        startIndex += size;\n                    }\n                }\n                else if (objectValue && objectValue.length > size) {\n                    value.set(objectValue, i);\n                }\n                else {\n                    attribute._normalizeValue(objectValue, objectInfo.target, 0);\n                    fillArray({\n                        target: value,\n                        source: objectInfo.target,\n                        start: i,\n                        count: numVertices\n                    });\n                }\n                i += numVertices * size;\n            }\n            else {\n                attribute._normalizeValue(objectValue, value, i);\n                i += size;\n            }\n        }\n    }\n    /* eslint-enable max-depth, max-statements */\n    // Validate deck.gl level fields\n    _validateAttributeUpdaters() {\n        const { settings } = this;\n        // Check that 'update' is a valid function\n        const hasUpdater = settings.noAlloc || typeof settings.update === 'function';\n        if (!hasUpdater) {\n            throw new Error(`Attribute ${this.id} missing update or accessor`);\n        }\n    }\n    // check that the first few elements of the attribute are reasonable\n    /* eslint-disable no-fallthrough */\n    _checkAttributeArray() {\n        const { value } = this;\n        const limit = Math.min(4, this.size);\n        if (value && value.length >= limit) {\n            let valid = true;\n            switch (limit) {\n                case 4:\n                    valid = valid && Number.isFinite(value[3]);\n                case 3:\n                    valid = valid && Number.isFinite(value[2]);\n                case 2:\n                    valid = valid && Number.isFinite(value[1]);\n                case 1:\n                    valid = valid && Number.isFinite(value[0]);\n                    break;\n                default:\n                    valid = false;\n            }\n            if (!valid) {\n                throw new Error(`Illegal attribute generated for ${this.id}`);\n            }\n        }\n    }\n}\n", "import { BufferTransform } from '@luma.gl/engine';\nimport { getAttributeTypeFromSize, cycleBuffers, padBuffer, matchBuffer, getFloat32VertexFormat } from \"./gpu-transition-utils.js\";\nimport { GPUTransitionBase } from \"./gpu-transition.js\";\nexport default class GPUInterpolationTransition extends GPUTransitionBase {\n    constructor({ device, attribute, timeline }) {\n        super({ device, attribute, timeline });\n        this.type = 'interpolation';\n        this.transform = getTransform(device, attribute);\n    }\n    start(transitionSettings, numInstances) {\n        const prevLength = this.currentLength;\n        const prevStartIndices = this.currentStartIndices;\n        super.start(transitionSettings, numInstances, transitionSettings.duration);\n        if (transitionSettings.duration <= 0) {\n            this.transition.cancel();\n            return;\n        }\n        const { buffers, attribute } = this;\n        // Alternate between two buffers when new transitions start.\n        // Last destination buffer is used as an attribute (from state),\n        // And the other buffer is now the current buffer.\n        cycleBuffers(buffers);\n        buffers[0] = padBuffer({\n            device: this.device,\n            buffer: buffers[0],\n            attribute,\n            fromLength: prevLength,\n            toLength: this.currentLength,\n            fromStartIndices: prevStartIndices,\n            getData: transitionSettings.enter\n        });\n        buffers[1] = matchBuffer({\n            device: this.device,\n            source: buffers[0],\n            target: buffers[1]\n        });\n        this.setBuffer(buffers[1]);\n        const { transform } = this;\n        const model = transform.model;\n        model.setVertexCount(Math.floor(this.currentLength / attribute.size));\n        if (attribute.isConstant) {\n            model.setAttributes({ aFrom: buffers[0] });\n            model.setConstantAttributes({ aTo: attribute.value });\n        }\n        else {\n            model.setAttributes({\n                aFrom: buffers[0],\n                aTo: attribute.getBuffer()\n            });\n        }\n        transform.transformFeedback.setBuffers({ vCurrent: buffers[1] });\n    }\n    onUpdate() {\n        const { duration, easing } = this.settings;\n        const { time } = this.transition;\n        let t = time / duration;\n        if (easing) {\n            t = easing(t);\n        }\n        const { model } = this.transform;\n        model.setUniforms({ time: t });\n        // @ts-ignore\n        const gl = model.device.gl;\n        // TODO - remove after https://github.com/visgl/luma.gl/pull/2023\n        gl.bindBuffer(34962, null);\n        this.transform.run({ discard: true });\n    }\n    delete() {\n        super.delete();\n        this.transform.destroy();\n    }\n}\nconst vs = `\\\n#version 300 es\n#define SHADER_NAME interpolation-transition-vertex-shader\n\nuniform float time;\nin ATTRIBUTE_TYPE aFrom;\nin ATTRIBUTE_TYPE aTo;\nout ATTRIBUTE_TYPE vCurrent;\n\nvoid main(void) {\n  vCurrent = mix(aFrom, aTo, time);\n  gl_Position = vec4(0.0);\n}\n`;\nfunction getTransform(device, attribute) {\n    const attributeType = getAttributeTypeFromSize(attribute.size);\n    return new BufferTransform(device, {\n        vs,\n        bufferLayout: [\n            { name: 'aFrom', format: getFloat32VertexFormat(attribute.size) },\n            { name: 'aTo', format: attribute.getBufferLayout().attributes[0].format }\n        ],\n        defines: {\n            ATTRIBUTE_TYPE: attributeType\n        },\n        varyings: ['vCurrent']\n    });\n}\n", "/*\n * Helper function for padArray\n */\nfunction padArrayChunk(options) {\n    const { source, target, start = 0, size, getData } = options;\n    const end = options.end || target.length;\n    const sourceLength = source.length;\n    const targetLength = end - start;\n    if (sourceLength > targetLength) {\n        target.set(source.subarray(0, targetLength), start);\n        return;\n    }\n    target.set(source, start);\n    if (!getData) {\n        return;\n    }\n    // source is not large enough to fill target space, call `getData` to get filler data\n    let i = sourceLength;\n    while (i < targetLength) {\n        const datum = getData(i, source);\n        for (let j = 0; j < size; j++) {\n            target[start + i] = datum[j] || 0;\n            i++;\n        }\n    }\n}\n/*\n * The padArray function stretches a source array to the size of a target array.\n   The arrays can have internal structures (like the attributes of PathLayer and\n   SolidPolygonLayer), defined by the optional sourceStartIndices and targetStartIndices parameters.\n   If the target array is larger, the getData callback is used to fill in the blanks.\n */\nexport function padArray({ source, target, size, getData, sourceStartIndices, targetStartIndices }) {\n    if (!sourceStartIndices || !targetStartIndices) {\n        // Flat arrays\n        padArrayChunk({\n            source,\n            target,\n            size,\n            getData\n        });\n        return target;\n    }\n    // Arrays have internal structure\n    let sourceIndex = 0;\n    let targetIndex = 0;\n    const getChunkData = getData && ((i, chunk) => getData(i + targetIndex, chunk));\n    const n = Math.min(sourceStartIndices.length, targetStartIndices.length);\n    for (let i = 1; i < n; i++) {\n        const nextSourceIndex = sourceStartIndices[i] * size;\n        const nextTargetIndex = targetStartIndices[i] * size;\n        padArrayChunk({\n            source: source.subarray(sourceIndex, nextSourceIndex),\n            target,\n            start: targetIndex,\n            end: nextTargetIndex,\n            size,\n            getData: getChunkData\n        });\n        sourceIndex = nextSourceIndex;\n        targetIndex = nextTargetIndex;\n    }\n    if (targetIndex < target.length) {\n        padArrayChunk({\n            // @ts-ignore\n            source: [],\n            target,\n            start: targetIndex,\n            size,\n            getData: getChunkData\n        });\n    }\n    return target;\n}\n", "import { padArray } from \"../utils/array-utils.js\";\nimport Attribute from \"../lib/attribute/attribute.js\";\nimport { GL } from '@luma.gl/constants';\n/** Create a new empty attribute with the same settings: type, shader layout etc. */\nexport function cloneAttribute(attribute) {\n    // `attribute.settings` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    const { device, settings, value } = attribute;\n    const newAttribute = new Attribute(device, settings);\n    // Placeholder value - necessary for generating the correct buffer layout\n    newAttribute.setData({\n        value: value instanceof Float64Array ? new Float64Array(0) : new Float32Array(0),\n        normalized: settings.normalized\n    });\n    return newAttribute;\n}\n/** Returns the GLSL attribute type for the given number of float32 components. */\nexport function getAttributeTypeFromSize(size) {\n    switch (size) {\n        case 1:\n            return 'float';\n        case 2:\n            return 'vec2';\n        case 3:\n            return 'vec3';\n        case 4:\n            return 'vec4';\n        default:\n            throw new Error(`No defined attribute type for size \"${size}\"`);\n    }\n}\n/** Returns the {@link VertexFormat} for the given number of float32 components. */\nexport function getFloat32VertexFormat(size) {\n    switch (size) {\n        case 1:\n            return 'float32';\n        case 2:\n            return 'float32x2';\n        case 3:\n            return 'float32x3';\n        case 4:\n            return 'float32x4';\n        default:\n            throw new Error('invalid type size');\n    }\n}\nexport function cycleBuffers(buffers) {\n    buffers.push(buffers.shift());\n}\nexport function getAttributeBufferLength(attribute, numInstances) {\n    const { doublePrecision, settings, value, size } = attribute;\n    const multiplier = doublePrecision && value instanceof Float64Array ? 2 : 1;\n    let maxVertexOffset = 0;\n    const { shaderAttributes } = attribute.settings;\n    if (shaderAttributes) {\n        for (const shaderAttribute of Object.values(shaderAttributes)) {\n            maxVertexOffset = Math.max(maxVertexOffset, shaderAttribute.vertexOffset ?? 0);\n        }\n    }\n    return ((settings.noAlloc ? value.length : (numInstances + maxVertexOffset) * size) *\n        multiplier);\n}\nexport function matchBuffer({ device, source, target }) {\n    if (!target || target.byteLength < source.byteLength) {\n        target?.destroy();\n        target = device.createBuffer({\n            byteLength: source.byteLength,\n            usage: source.usage\n        });\n    }\n    return target;\n}\n/* eslint-disable complexity */\n// This helper is used when transitioning attributes from a set of values in one buffer layout\n// to a set of values in a different buffer layout. (Buffer layouts are used when attribute values\n// within a buffer should be grouped for drawElements, like the Polygon layer.) For example, a\n// buffer layout of [3, 4] might have data [A1, A2, A3, B1, B2, B3, B4]. If it needs to transition\n// to a buffer layout of [4, 2], it should produce a buffer, using the transition setting's `enter`\n// function, that looks like this: [A1, A2, A3, A4 (user `enter` fn), B1, B2, 0]. Note: the final\n// 0 in this buffer is because we never shrink buffers, only grow them, for performance reasons.\n//\n// padBuffer may return either the original buffer, or a new buffer if the size of the original\n// was insufficient. Callers are responsible for disposing of the original buffer if needed.\nexport function padBuffer({ device, buffer, attribute, fromLength, toLength, fromStartIndices, getData = x => x }) {\n    // TODO: move the precisionMultiplier logic to the attribute when retrieving\n    // its `size` and `elementOffset`?\n    const precisionMultiplier = attribute.doublePrecision && attribute.value instanceof Float64Array ? 2 : 1;\n    const size = attribute.size * precisionMultiplier;\n    const byteOffset = attribute.byteOffset;\n    // Transform feedback can only write to float varyings\n    // Attributes of format unorm8/uint8 (1 byte per element) etc will be padded to float32 (4 bytes per element)\n    const targetByteOffset = attribute.settings.bytesPerElement < 4\n        ? (byteOffset / attribute.settings.bytesPerElement) * 4\n        : byteOffset;\n    const toStartIndices = attribute.startIndices;\n    const hasStartIndices = fromStartIndices && toStartIndices;\n    const isConstant = attribute.isConstant;\n    // check if buffer needs to be padded\n    if (!hasStartIndices && buffer && fromLength >= toLength) {\n        return buffer;\n    }\n    const ArrayType = attribute.value instanceof Float64Array\n        ? Float32Array\n        : attribute.value.constructor;\n    const toData = isConstant\n        ? attribute.value\n        : // TODO(v9.1): Avoid non-portable synchronous reads.\n            new ArrayType(attribute\n                .getBuffer()\n                .readSyncWebGL(byteOffset, toLength * ArrayType.BYTES_PER_ELEMENT).buffer);\n    if (attribute.settings.normalized && !isConstant) {\n        const getter = getData;\n        getData = (value, chunk) => attribute.normalizeConstant(getter(value, chunk));\n    }\n    const getMissingData = isConstant\n        ? (i, chunk) => getData(toData, chunk)\n        : (i, chunk) => getData(toData.subarray(i + byteOffset, i + byteOffset + size), chunk);\n    // TODO(v9.1): Avoid non-portable synchronous reads.\n    const source = buffer\n        ? new Float32Array(buffer.readSyncWebGL(targetByteOffset, fromLength * 4).buffer)\n        : new Float32Array(0);\n    const target = new Float32Array(toLength);\n    padArray({\n        source,\n        target,\n        sourceStartIndices: fromStartIndices,\n        targetStartIndices: toStartIndices,\n        size,\n        getData: getMissingData\n    });\n    if (!buffer || buffer.byteLength < target.byteLength + targetByteOffset) {\n        buffer?.destroy();\n        buffer = device.createBuffer({\n            byteLength: target.byteLength + targetByteOffset,\n            usage: 35050\n        });\n    }\n    buffer.write(target, targetByteOffset);\n    return buffer;\n}\n", "import Transition from \"./transition.js\";\nimport { cloneAttribute, getAttributeBufferLength } from \"./gpu-transition-utils.js\";\nexport class GPUTransitionBase {\n    constructor({ device, attribute, timeline }) {\n        this.buffers = [];\n        /** The vertex count of the last buffer.\n         * Buffer may be larger than the actual length we want to use\n         * because we only reallocate buffers when they grow, not when they shrink,\n         * due to performance costs */\n        this.currentLength = 0;\n        this.device = device;\n        this.transition = new Transition(timeline);\n        this.attribute = attribute;\n        this.attributeInTransition = cloneAttribute(attribute);\n        this.currentStartIndices = attribute.startIndices;\n    }\n    get inProgress() {\n        return this.transition.inProgress;\n    }\n    start(transitionSettings, numInstances, duration = Infinity) {\n        this.settings = transitionSettings;\n        this.currentStartIndices = this.attribute.startIndices;\n        this.currentLength = getAttributeBufferLength(this.attribute, numInstances);\n        this.transition.start({ ...transitionSettings, duration });\n    }\n    update() {\n        const updated = this.transition.update();\n        if (updated) {\n            this.onUpdate();\n        }\n        return updated;\n    }\n    setBuffer(buffer) {\n        this.attributeInTransition.setData({\n            buffer,\n            normalized: this.attribute.settings.normalized,\n            // Retain placeholder value to generate correct shader layout\n            value: this.attributeInTransition.value\n        });\n    }\n    cancel() {\n        this.transition.cancel();\n    }\n    delete() {\n        this.cancel();\n        for (const buffer of this.buffers) {\n            buffer.destroy();\n        }\n        this.buffers.length = 0;\n    }\n}\n", "import { BufferTransform } from '@luma.gl/engine';\nimport { padBuffer, matchBuffer, getAttributeTypeFromSize, getFloat32VertexFormat, cycleBuffers } from \"./gpu-transition-utils.js\";\nimport { GPUTransitionBase } from \"./gpu-transition.js\";\nexport default class GPUSpringTransition extends GPUTransitionBase {\n    constructor({ device, attribute, timeline }) {\n        super({ device, attribute, timeline });\n        this.type = 'spring';\n        this.texture = getTexture(device);\n        this.framebuffer = getFramebuffer(device, this.texture);\n        this.transform = getTransform(device, attribute);\n    }\n    start(transitionSettings, numInstances) {\n        const prevLength = this.currentLength;\n        const prevStartIndices = this.currentStartIndices;\n        super.start(transitionSettings, numInstances);\n        const { buffers, attribute } = this;\n        for (let i = 0; i < 2; i++) {\n            buffers[i] = padBuffer({\n                device: this.device,\n                buffer: buffers[i],\n                attribute,\n                fromLength: prevLength,\n                toLength: this.currentLength,\n                fromStartIndices: prevStartIndices,\n                getData: transitionSettings.enter\n            });\n        }\n        buffers[2] = matchBuffer({\n            device: this.device,\n            source: buffers[0],\n            target: buffers[2]\n        });\n        this.setBuffer(buffers[1]);\n        const { model } = this.transform;\n        model.setVertexCount(Math.floor(this.currentLength / attribute.size));\n        if (attribute.isConstant) {\n            model.setConstantAttributes({ aTo: attribute.value });\n        }\n        else {\n            model.setAttributes({ aTo: attribute.getBuffer() });\n        }\n    }\n    onUpdate() {\n        const { buffers, transform, framebuffer, transition } = this;\n        const settings = this.settings;\n        transform.model.setAttributes({\n            aPrev: buffers[0],\n            aCur: buffers[1]\n        });\n        transform.transformFeedback.setBuffers({ vNext: buffers[2] });\n        transform.model.setUniforms({\n            stiffness: settings.stiffness,\n            damping: settings.damping\n        });\n        transform.run({\n            framebuffer,\n            discard: false,\n            parameters: { viewport: [0, 0, 1, 1] },\n            clearColor: [0, 0, 0, 0]\n        });\n        cycleBuffers(buffers);\n        this.setBuffer(buffers[1]);\n        const isTransitioning = this.device.readPixelsToArrayWebGL(framebuffer)[0] > 0;\n        if (!isTransitioning) {\n            transition.end();\n        }\n    }\n    delete() {\n        super.delete();\n        this.transform.destroy();\n        this.texture.destroy();\n        this.framebuffer.destroy();\n    }\n}\nconst vs = `\\\n#version 300 es\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nuniform float stiffness;\nuniform float damping;\nin ATTRIBUTE_TYPE aPrev;\nin ATTRIBUTE_TYPE aCur;\nin ATTRIBUTE_TYPE aTo;\nout ATTRIBUTE_TYPE vNext;\nout float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE spring = delta * stiffness;\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\n  return spring + damper + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n`;\nconst fs = `\\\n#version 300 es\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nin float vIsTransitioningFlag;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  fragColor = vec4(1.0);\n}`;\nfunction getTransform(device, attribute) {\n    const attributeType = getAttributeTypeFromSize(attribute.size);\n    const format = getFloat32VertexFormat(attribute.size);\n    return new BufferTransform(device, {\n        vs,\n        fs,\n        bufferLayout: [\n            { name: 'aPrev', format },\n            { name: 'aCur', format },\n            { name: 'aTo', format: attribute.getBufferLayout().attributes[0].format }\n        ],\n        varyings: ['vNext'],\n        defines: { ATTRIBUTE_TYPE: attributeType },\n        parameters: {\n            depthCompare: 'always',\n            blendColorOperation: 'max',\n            blendColorSrcFactor: 'one',\n            blendColorDstFactor: 'one',\n            blendAlphaOperation: 'max',\n            blendAlphaSrcFactor: 'one',\n            blendAlphaDstFactor: 'one'\n        }\n    });\n}\nfunction getTexture(device) {\n    return device.createTexture({\n        data: new Uint8Array(4),\n        format: 'rgba8unorm',\n        mipmaps: false,\n        // dataFormat: GL.RGBA,\n        width: 1,\n        height: 1\n    });\n}\nfunction getFramebuffer(device, texture) {\n    return device.createFramebuffer({\n        id: 'spring-transition-is-transitioning-framebuffer',\n        width: 1,\n        height: 1,\n        colorAttachments: [texture]\n    });\n}\n", "// deck.gl, MIT license\nimport GPUInterpolationTransition from \"../../transitions/gpu-interpolation-transition.js\";\nimport GPUSpringTransition from \"../../transitions/gpu-spring-transition.js\";\nimport log from \"../../utils/log.js\";\nconst TRANSITION_TYPES = {\n    interpolation: GPUInterpolationTransition,\n    spring: GPUSpringTransition\n};\nexport default class AttributeTransitionManager {\n    constructor(device, { id, timeline }) {\n        if (!device)\n            throw new Error('AttributeTransitionManager is constructed without device');\n        this.id = id;\n        this.device = device;\n        this.timeline = timeline;\n        this.transitions = {};\n        this.needsRedraw = false;\n        this.numInstances = 1;\n    }\n    finalize() {\n        for (const attributeName in this.transitions) {\n            this._removeTransition(attributeName);\n        }\n    }\n    /* Public methods */\n    // Called when attribute manager updates\n    // Check the latest attributes for updates.\n    update({ attributes, transitions, numInstances }) {\n        // Transform class will crash if elementCount is 0\n        this.numInstances = numInstances || 1;\n        for (const attributeName in attributes) {\n            const attribute = attributes[attributeName];\n            const settings = attribute.getTransitionSetting(transitions);\n            // this attribute might not support transitions?\n            if (!settings)\n                continue; // eslint-disable-line no-continue\n            this._updateAttribute(attributeName, attribute, settings);\n        }\n        for (const attributeName in this.transitions) {\n            const attribute = attributes[attributeName];\n            if (!attribute || !attribute.getTransitionSetting(transitions)) {\n                // Animated attribute has been removed\n                this._removeTransition(attributeName);\n            }\n        }\n    }\n    // Returns `true` if attribute is transition-enabled\n    hasAttribute(attributeName) {\n        const transition = this.transitions[attributeName];\n        return transition && transition.inProgress;\n    }\n    // Get all the animated attributes\n    getAttributes() {\n        const animatedAttributes = {};\n        for (const attributeName in this.transitions) {\n            const transition = this.transitions[attributeName];\n            if (transition.inProgress) {\n                animatedAttributes[attributeName] = transition.attributeInTransition;\n            }\n        }\n        return animatedAttributes;\n    }\n    /* eslint-disable max-statements */\n    // Called every render cycle, run transform feedback\n    // Returns `true` if anything changes\n    run() {\n        if (this.numInstances === 0) {\n            return false;\n        }\n        for (const attributeName in this.transitions) {\n            const updated = this.transitions[attributeName].update();\n            if (updated) {\n                this.needsRedraw = true;\n            }\n        }\n        const needsRedraw = this.needsRedraw;\n        this.needsRedraw = false;\n        return needsRedraw;\n    }\n    /* eslint-enable max-statements */\n    /* Private methods */\n    _removeTransition(attributeName) {\n        this.transitions[attributeName].delete();\n        delete this.transitions[attributeName];\n    }\n    // Check an attributes for updates\n    // Returns a transition object if a new transition is triggered.\n    _updateAttribute(attributeName, attribute, settings) {\n        const transition = this.transitions[attributeName];\n        // an attribute can change transition type when it updates\n        // let's remove the transition when that happens so we can create the new transition type\n        // TODO: when switching transition types, make sure to carry over the attribute's\n        // previous buffers, currentLength, startIndices, etc, to be used as the starting point\n        // for the next transition\n        let isNew = !transition || transition.type !== settings.type;\n        if (isNew) {\n            if (transition) {\n                this._removeTransition(attributeName);\n            }\n            const TransitionType = TRANSITION_TYPES[settings.type];\n            if (TransitionType) {\n                this.transitions[attributeName] = new TransitionType({\n                    attribute,\n                    timeline: this.timeline,\n                    device: this.device\n                });\n            }\n            else {\n                log.error(`unsupported transition type '${settings.type}'`)();\n                isNew = false;\n            }\n        }\n        if (isNew || attribute.needsRedraw()) {\n            this.needsRedraw = true;\n            this.transitions[attributeName].start(settings, this.numInstances);\n        }\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable guard-for-in */\nimport Attribute from \"./attribute.js\";\nimport log from \"../../utils/log.js\";\nimport memoize from \"../../utils/memoize.js\";\nimport { mergeBounds } from \"../../utils/math-utils.js\";\nimport debug from \"../../debug/index.js\";\nimport AttributeTransitionManager from \"./attribute-transition-manager.js\";\nconst TRACE_INVALIDATE = 'attributeManager.invalidate';\nconst TRACE_UPDATE_START = 'attributeManager.updateStart';\nconst TRACE_UPDATE_END = 'attributeManager.updateEnd';\nconst TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';\nconst TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';\nconst TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';\nexport default class AttributeManager {\n    constructor(device, { id = 'attribute-manager', stats, timeline } = {}) {\n        this.mergeBoundsMemoized = memoize(mergeBounds);\n        this.id = id;\n        this.device = device;\n        this.attributes = {};\n        this.updateTriggers = {};\n        this.needsRedraw = true;\n        this.userData = {};\n        this.stats = stats;\n        this.attributeTransitionManager = new AttributeTransitionManager(device, {\n            id: `${id}-transitions`,\n            timeline\n        });\n        // For debugging sanity, prevent uninitialized members\n        Object.seal(this);\n    }\n    finalize() {\n        for (const attributeName in this.attributes) {\n            this.attributes[attributeName].delete();\n        }\n        this.attributeTransitionManager.finalize();\n    }\n    // Returns the redraw flag, optionally clearing it.\n    // Redraw flag will be set if any attributes attributes changed since\n    // flag was last cleared.\n    //\n    // @param {String} [clearRedrawFlags=false] - whether to clear the flag\n    // @return {false|String} - reason a redraw is needed.\n    getNeedsRedraw(opts = { clearRedrawFlags: false }) {\n        const redraw = this.needsRedraw;\n        this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;\n        return redraw && this.id;\n    }\n    // Sets the redraw flag.\n    // @param {Boolean} redraw=true\n    setNeedsRedraw() {\n        this.needsRedraw = true;\n    }\n    // Adds attributes\n    add(attributes) {\n        this._add(attributes);\n    }\n    // Adds attributes\n    addInstanced(attributes) {\n        this._add(attributes, { instanced: 1 });\n    }\n    /**\n     * Removes attributes\n     * Takes an array of attribute names and delete them from\n     * the attribute map if they exists\n     *\n     * @example\n     * attributeManager.remove(['position']);\n     *\n     * @param {Object} attributeNameArray - attribute name array (see above)\n     */\n    remove(attributeNameArray) {\n        for (const name of attributeNameArray) {\n            if (this.attributes[name] !== undefined) {\n                this.attributes[name].delete();\n                delete this.attributes[name];\n            }\n        }\n    }\n    // Marks an attribute for update\n    invalidate(triggerName, dataRange) {\n        const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);\n        // For performance tuning\n        debug(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);\n    }\n    invalidateAll(dataRange) {\n        for (const attributeName in this.attributes) {\n            this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);\n        }\n        // For performance tuning\n        debug(TRACE_INVALIDATE, this, 'all');\n    }\n    // Ensure all attribute buffers are updated from props or data.\n    // eslint-disable-next-line complexity\n    update({ data, numInstances, startIndices = null, transitions, props = {}, buffers = {}, context = {} }) {\n        // keep track of whether some attributes are updated\n        let updated = false;\n        debug(TRACE_UPDATE_START, this);\n        if (this.stats) {\n            this.stats.get('Update Attributes').timeStart();\n        }\n        for (const attributeName in this.attributes) {\n            const attribute = this.attributes[attributeName];\n            const accessorName = attribute.settings.accessor;\n            attribute.startIndices = startIndices;\n            attribute.numInstances = numInstances;\n            if (props[attributeName]) {\n                log.removed(`props.${attributeName}`, `data.attributes.${attributeName}`)();\n            }\n            if (attribute.setExternalBuffer(buffers[attributeName])) {\n                // Step 1: try update attribute directly from external buffers\n            }\n            else if (attribute.setBinaryValue(typeof accessorName === 'string' ? buffers[accessorName] : undefined, data.startIndices)) {\n                // Step 2: try set packed value from external typed array\n            }\n            else if (typeof accessorName === 'string' &&\n                !buffers[accessorName] &&\n                attribute.setConstantValue(props[accessorName])) {\n                // Step 3: try set constant value from props\n                // Note: if buffers[accessorName] is supplied, ignore props[accessorName]\n                // This may happen when setBinaryValue falls through to use the auto updater\n            }\n            else if (attribute.needsUpdate()) {\n                // Step 4: update via updater callback\n                updated = true;\n                this._updateAttribute({\n                    attribute,\n                    numInstances,\n                    data,\n                    props,\n                    context\n                });\n            }\n            this.needsRedraw = this.needsRedraw || attribute.needsRedraw();\n        }\n        if (updated) {\n            // Only initiate alloc/update (and logging) if actually needed\n            debug(TRACE_UPDATE_END, this, numInstances);\n        }\n        if (this.stats) {\n            this.stats.get('Update Attributes').timeEnd();\n        }\n        this.attributeTransitionManager.update({\n            attributes: this.attributes,\n            numInstances,\n            transitions\n        });\n    }\n    // Update attribute transition to the current timestamp\n    // Returns `true` if any transition is in progress\n    updateTransition() {\n        const { attributeTransitionManager } = this;\n        const transitionUpdated = attributeTransitionManager.run();\n        this.needsRedraw = this.needsRedraw || transitionUpdated;\n        return transitionUpdated;\n    }\n    /**\n     * Returns all attribute descriptors\n     * Note: Format matches luma.gl Model/Program.setAttributes()\n     * @return {Object} attributes - descriptors\n     */\n    getAttributes() {\n        return { ...this.attributes, ...this.attributeTransitionManager.getAttributes() };\n    }\n    /**\n     * Computes the spatial bounds of a given set of attributes\n     */\n    getBounds(attributeNames) {\n        const bounds = attributeNames.map(attributeName => this.attributes[attributeName]?.getBounds());\n        return this.mergeBoundsMemoized(bounds);\n    }\n    /**\n     * Returns changed attribute descriptors\n     * This indicates which WebGLBuffers need to be updated\n     * @return {Object} attributes - descriptors\n     */\n    getChangedAttributes(opts = { clearChangedFlags: false }) {\n        const { attributes, attributeTransitionManager } = this;\n        const changedAttributes = { ...attributeTransitionManager.getAttributes() };\n        for (const attributeName in attributes) {\n            const attribute = attributes[attributeName];\n            if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {\n                changedAttributes[attributeName] = attribute;\n            }\n        }\n        return changedAttributes;\n    }\n    getBufferLayouts(attributes, excludeAttributes = {}) {\n        if (!attributes) {\n            attributes = this.getAttributes();\n        }\n        const bufferMaps = [];\n        for (const attributeName in attributes) {\n            if (!excludeAttributes[attributeName]) {\n                bufferMaps.push(attributes[attributeName].getBufferLayout());\n            }\n        }\n        return bufferMaps;\n    }\n    // PRIVATE METHODS\n    // Used to register an attribute\n    _add(attributes, extraProps = {}) {\n        for (const attributeName in attributes) {\n            const attribute = attributes[attributeName];\n            // Initialize the attribute descriptor, with WebGL and metadata fields\n            this.attributes[attributeName] = this._createAttribute(attributeName, attribute, extraProps);\n        }\n        this._mapUpdateTriggersToAttributes();\n    }\n    /* eslint-enable max-statements */\n    _createAttribute(name, attribute, extraProps) {\n        // For expected default values see:\n        // https://github.com/visgl/luma.gl/blob/1affe21352e289eeaccee2a876865138858a765c/modules/webgl/src/classes/accessor.js#L5-L13\n        // and https://deck.gl/docs/api-reference/core/attribute-manager#add\n        const props = {\n            ...attribute,\n            id: name,\n            size: (attribute.isIndexed && 1) || attribute.size || 1,\n            divisor: extraProps.instanced ? 1 : attribute.divisor || 0\n        };\n        return new Attribute(this.device, props);\n    }\n    // build updateTrigger name to attribute name mapping\n    _mapUpdateTriggersToAttributes() {\n        const triggers = {};\n        for (const attributeName in this.attributes) {\n            const attribute = this.attributes[attributeName];\n            attribute.getUpdateTriggers().forEach(triggerName => {\n                if (!triggers[triggerName]) {\n                    triggers[triggerName] = [];\n                }\n                triggers[triggerName].push(attributeName);\n            });\n        }\n        this.updateTriggers = triggers;\n    }\n    _invalidateTrigger(triggerName, dataRange) {\n        const { attributes, updateTriggers } = this;\n        const invalidatedAttributes = updateTriggers[triggerName];\n        if (invalidatedAttributes) {\n            invalidatedAttributes.forEach(name => {\n                const attribute = attributes[name];\n                if (attribute) {\n                    attribute.setNeedsUpdate(attribute.id, dataRange);\n                }\n            });\n        }\n        return invalidatedAttributes;\n    }\n    _updateAttribute(opts) {\n        const { attribute, numInstances } = opts;\n        debug(TRACE_ATTRIBUTE_UPDATE_START, attribute);\n        if (attribute.constant) {\n            // The attribute is flagged as constant outside of an update cycle\n            // Skip allocation and updater call\n            // @ts-ignore value can be set to an array by user but always cast to typed array during attribute update\n            attribute.setConstantValue(attribute.value);\n            return;\n        }\n        if (attribute.allocate(numInstances)) {\n            debug(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);\n        }\n        // Calls update on any buffers that need update\n        const updated = attribute.updateBuffer(opts);\n        if (updated) {\n            this.needsRedraw = true;\n            debug(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);\n        }\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable react/no-direct-mutation-state */\nimport { Buffer } from '@luma.gl/core';\nimport { COORDINATE_SYSTEM } from \"./constants.js\";\nimport AttributeManager from \"./attribute/attribute-manager.js\";\nimport UniformTransitionManager from \"./uniform-transition-manager.js\";\nimport { diffProps, validateProps } from \"../lifecycle/props.js\";\nimport { LIFECYCLE } from \"../lifecycle/constants.js\";\nimport { count } from \"../utils/count.js\";\nimport log from \"../utils/log.js\";\nimport debug from \"../debug/index.js\";\nimport assert from \"../utils/assert.js\";\nimport memoize from \"../utils/memoize.js\";\nimport { mergeShaders } from \"../utils/shader.js\";\nimport { projectPosition, getWorldPosition } from \"../shaderlib/project/project-functions.js\";\nimport typedArrayManager from \"../utils/typed-array-manager.js\";\nimport Component from \"../lifecycle/component.js\";\nimport LayerState from \"./layer-state.js\";\nimport { worldToPixels } from '@math.gl/web-mercator';\nimport { load } from '@loaders.gl/core';\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\nconst MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;\nconst EMPTY_ARRAY = Object.freeze([]);\n// Only compare the same two viewports once\nconst areViewportsEqual = memoize(({ oldViewport, viewport }) => {\n    return oldViewport.equals(viewport);\n});\nlet pickingColorCache = new Uint8ClampedArray(0);\nconst defaultProps = {\n    // data: Special handling for null, see below\n    data: { type: 'data', value: EMPTY_ARRAY, async: true },\n    dataComparator: { type: 'function', value: null, optional: true },\n    _dataDiff: {\n        type: 'function',\n        // @ts-ignore __diff is not defined on data\n        value: data => data && data.__diff,\n        optional: true\n    },\n    dataTransform: { type: 'function', value: null, optional: true },\n    onDataLoad: { type: 'function', value: null, optional: true },\n    onError: { type: 'function', value: null, optional: true },\n    fetch: {\n        type: 'function',\n        value: (url, { propName, layer, loaders, loadOptions, signal }) => {\n            const { resourceManager } = layer.context;\n            loadOptions = loadOptions || layer.getLoadOptions();\n            loaders = loaders || layer.props.loaders;\n            if (signal) {\n                loadOptions = {\n                    ...loadOptions,\n                    fetch: {\n                        ...loadOptions?.fetch,\n                        signal\n                    }\n                };\n            }\n            let inResourceManager = resourceManager.contains(url);\n            if (!inResourceManager && !loadOptions) {\n                // If there is no layer-specific load options, then attempt to cache this resource in the data manager\n                resourceManager.add({ resourceId: url, data: load(url, loaders), persistent: false });\n                inResourceManager = true;\n            }\n            if (inResourceManager) {\n                return resourceManager.subscribe({\n                    resourceId: url,\n                    onChange: data => layer.internalState?.reloadAsyncProp(propName, data),\n                    consumerId: layer.id,\n                    requestId: propName\n                });\n            }\n            return load(url, loaders, loadOptions);\n        }\n    },\n    updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n    visible: true,\n    pickable: false,\n    opacity: { type: 'number', min: 0, max: 1, value: 1 },\n    operation: 'draw',\n    onHover: { type: 'function', value: null, optional: true },\n    onClick: { type: 'function', value: null, optional: true },\n    onDragStart: { type: 'function', value: null, optional: true },\n    onDrag: { type: 'function', value: null, optional: true },\n    onDragEnd: { type: 'function', value: null, optional: true },\n    coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n    coordinateOrigin: { type: 'array', value: [0, 0, 0], compare: true },\n    modelMatrix: { type: 'array', value: null, compare: true, optional: true },\n    wrapLongitude: false,\n    positionFormat: 'XYZ',\n    colorFormat: 'RGBA',\n    parameters: { type: 'object', value: {}, optional: true, compare: 2 },\n    loadOptions: { type: 'object', value: null, optional: true, ignore: true },\n    transitions: null,\n    extensions: [],\n    loaders: { type: 'array', value: [], optional: true, ignore: true },\n    // Offset depth based on layer index to avoid z-fighting.\n    // Negative values pull layer towards the camera\n    // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n    getPolygonOffset: {\n        type: 'function',\n        value: ({ layerIndex }) => [0, -layerIndex * 100]\n    },\n    // Selection/Highlighting\n    highlightedObjectIndex: null,\n    autoHighlight: false,\n    highlightColor: { type: 'accessor', value: [0, 0, 128, 128] }\n};\nexport default class Layer extends Component {\n    constructor() {\n        super(...arguments);\n        this.internalState = null;\n        this.lifecycle = LIFECYCLE.NO_STATE; // Helps track and debug the life cycle of the layers\n        this.parent = null;\n    }\n    static { this.defaultProps = defaultProps; }\n    static { this.layerName = 'Layer'; }\n    static get componentName() {\n        return Object.prototype.hasOwnProperty.call(this, 'layerName') ? this.layerName : '';\n    }\n    get root() {\n        // eslint-disable-next-line\n        let layer = this;\n        while (layer.parent) {\n            layer = layer.parent;\n        }\n        return layer;\n    }\n    toString() {\n        const className = this.constructor.layerName || this.constructor.name;\n        return `${className}({id: '${this.props.id}'})`;\n    }\n    // Public API for users\n    /** Projects a point with current view state from the current layer's coordinate system to screen */\n    project(xyz) {\n        assert(this.internalState);\n        const viewport = this.internalState.viewport || this.context.viewport;\n        const worldPosition = getWorldPosition(xyz, {\n            viewport,\n            modelMatrix: this.props.modelMatrix,\n            coordinateOrigin: this.props.coordinateOrigin,\n            coordinateSystem: this.props.coordinateSystem\n        });\n        const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n        return xyz.length === 2 ? [x, y] : [x, y, z];\n    }\n    /** Unprojects a screen pixel to the current view's default coordinate system\n        Note: this does not reverse `project`. */\n    unproject(xy) {\n        assert(this.internalState);\n        const viewport = this.internalState.viewport || this.context.viewport;\n        return viewport.unproject(xy);\n    }\n    /** Projects a point with current view state from the current layer's coordinate system to the world space */\n    projectPosition(xyz, params) {\n        assert(this.internalState);\n        const viewport = this.internalState.viewport || this.context.viewport;\n        return projectPosition(xyz, {\n            viewport,\n            modelMatrix: this.props.modelMatrix,\n            coordinateOrigin: this.props.coordinateOrigin,\n            coordinateSystem: this.props.coordinateSystem,\n            ...params\n        });\n    }\n    // Public API for custom layer implementation\n    /** `true` if this layer renders other layers */\n    get isComposite() {\n        return false;\n    }\n    /** Updates selected state members and marks the layer for redraw */\n    setState(partialState) {\n        this.setChangeFlags({ stateChanged: true });\n        Object.assign(this.state, partialState);\n        this.setNeedsRedraw();\n    }\n    /** Sets the redraw flag for this layer, will trigger a redraw next animation frame */\n    setNeedsRedraw() {\n        if (this.internalState) {\n            this.internalState.needsRedraw = true;\n        }\n    }\n    /** Mark this layer as needs a deep update */\n    setNeedsUpdate() {\n        if (this.internalState) {\n            this.context.layerManager.setNeedsUpdate(String(this));\n            this.internalState.needsUpdate = true;\n        }\n    }\n    /** Returns true if all async resources are loaded */\n    get isLoaded() {\n        return this.internalState ? !this.internalState.isAsyncPropLoading() : false;\n    }\n    /** Returns true if using shader-based WGS84 longitude wrapping */\n    get wrapLongitude() {\n        return this.props.wrapLongitude;\n    }\n    /** @deprecated Returns true if the layer is visible in the picking pass */\n    isPickable() {\n        return this.props.pickable && this.props.visible;\n    }\n    /** Returns an array of models used by this layer, can be overriden by layer subclass */\n    getModels() {\n        const state = this.state;\n        return (state && (state.models || (state.model && [state.model]))) || [];\n    }\n    // TODO deprecate in favour of setShaderModuleProps\n    /** Update shader module parameters */\n    setModuleParameters(moduleParameters) {\n        for (const model of this.getModels()) {\n            model.updateModuleSettings(moduleParameters);\n        }\n    }\n    /** Update shader input parameters */\n    setShaderModuleProps(...props) {\n        for (const model of this.getModels()) {\n            model.shaderInputs.setProps(...props);\n        }\n    }\n    /** Returns the attribute manager of this layer */\n    getAttributeManager() {\n        return this.internalState && this.internalState.attributeManager;\n    }\n    /** Returns the most recent layer that matched to this state\n      (When reacting to an async event, this layer may no longer be the latest) */\n    getCurrentLayer() {\n        return this.internalState && this.internalState.layer;\n    }\n    /** Returns the default parse options for async props */\n    getLoadOptions() {\n        return this.props.loadOptions;\n    }\n    use64bitPositions() {\n        const { coordinateSystem } = this.props;\n        return (coordinateSystem === COORDINATE_SYSTEM.DEFAULT ||\n            coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n            coordinateSystem === COORDINATE_SYSTEM.CARTESIAN);\n    }\n    // Event handling\n    onHover(info, pickingEvent) {\n        if (this.props.onHover) {\n            return this.props.onHover(info, pickingEvent) || false;\n        }\n        return false;\n    }\n    onClick(info, pickingEvent) {\n        if (this.props.onClick) {\n            return this.props.onClick(info, pickingEvent) || false;\n        }\n        return false;\n    }\n    // Returns the picking color that doesn't match any subfeature\n    // Use if some graphics do not belong to any pickable subfeature\n    // @return {Array} - a black color\n    nullPickingColor() {\n        return [0, 0, 0];\n    }\n    // Returns the picking color that doesn't match any subfeature\n    // Use if some graphics do not belong to any pickable subfeature\n    encodePickingColor(i, target = []) {\n        target[0] = (i + 1) & 255;\n        target[1] = ((i + 1) >> 8) & 255;\n        target[2] = (((i + 1) >> 8) >> 8) & 255;\n        return target;\n    }\n    // Returns the index corresponding to a picking color that doesn't match any subfeature\n    // @param {Uint8Array} color - color array to be decoded\n    // @return {Array} - the decoded picking color\n    decodePickingColor(color) {\n        assert(color instanceof Uint8Array);\n        const [i1, i2, i3] = color;\n        // 1 was added to seperate from no selection\n        const index = i1 + i2 * 256 + i3 * 65536 - 1;\n        return index;\n    }\n    /** Deduces number of instances. Intention is to support:\n      - Explicit setting of numInstances\n      - Auto-deduction for ES6 containers that define a size member\n      - Auto-deduction for Classic Arrays via the built-in length attribute\n      - Auto-deduction via arrays */\n    getNumInstances() {\n        // First Check if app has provided an explicit value\n        if (Number.isFinite(this.props.numInstances)) {\n            return this.props.numInstances;\n        }\n        // Second check if the layer has set its own value\n        if (this.state && this.state.numInstances !== undefined) {\n            return this.state.numInstances;\n        }\n        // Use container library to get a count for any ES6 container or object\n        return count(this.props.data);\n    }\n    /** Buffer layout describes how many attribute values are packed for each data object\n        The default (null) is one value each object.\n        Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n        is in the form of [L0, L1, L2, ...] */\n    getStartIndices() {\n        // First Check if startIndices is provided as an explicit value\n        if (this.props.startIndices) {\n            return this.props.startIndices;\n        }\n        // Second check if the layer has set its own value\n        if (this.state && this.state.startIndices) {\n            return this.state.startIndices;\n        }\n        return null;\n    }\n    // Default implementation\n    getBounds() {\n        return this.getAttributeManager()?.getBounds(['positions', 'instancePositions']);\n    }\n    getShaders(shaders) {\n        shaders = mergeShaders(shaders, {\n            disableWarnings: true,\n            modules: this.context.defaultShaderModules\n        });\n        for (const extension of this.props.extensions) {\n            shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n        }\n        return shaders;\n    }\n    /** Controls if updateState should be called. By default returns true if any prop has changed */\n    shouldUpdateState(params) {\n        return params.changeFlags.propsOrDataChanged;\n    }\n    /** Default implementation, all attributes will be invalidated and updated when data changes */\n    // eslint-disable-next-line complexity\n    updateState(params) {\n        const attributeManager = this.getAttributeManager();\n        const { dataChanged } = params.changeFlags;\n        if (dataChanged && attributeManager) {\n            if (Array.isArray(dataChanged)) {\n                // is partial update\n                for (const dataRange of dataChanged) {\n                    attributeManager.invalidateAll(dataRange);\n                }\n            }\n            else {\n                attributeManager.invalidateAll();\n            }\n        }\n        // Enable/disable picking buffer\n        if (attributeManager) {\n            const { props } = params;\n            const hasPickingBuffer = this.internalState.hasPickingBuffer;\n            const needsPickingBuffer = Number.isInteger(props.highlightedObjectIndex) ||\n                props.pickable ||\n                props.extensions.some(extension => extension.getNeedsPickingBuffer.call(this, extension));\n            // Only generate picking buffer if needed\n            if (hasPickingBuffer !== needsPickingBuffer) {\n                this.internalState.hasPickingBuffer = needsPickingBuffer;\n                const { pickingColors, instancePickingColors } = attributeManager.attributes;\n                const pickingColorsAttribute = pickingColors || instancePickingColors;\n                if (pickingColorsAttribute) {\n                    if (needsPickingBuffer && pickingColorsAttribute.constant) {\n                        pickingColorsAttribute.constant = false;\n                        attributeManager.invalidate(pickingColorsAttribute.id);\n                    }\n                    if (!pickingColorsAttribute.value && !needsPickingBuffer) {\n                        pickingColorsAttribute.constant = true;\n                        pickingColorsAttribute.value = [0, 0, 0];\n                    }\n                }\n            }\n        }\n    }\n    /** Called once when layer is no longer matched and state will be discarded. Layers can destroy WebGL resources here. */\n    finalizeState(context) {\n        for (const model of this.getModels()) {\n            model.destroy();\n        }\n        const attributeManager = this.getAttributeManager();\n        if (attributeManager) {\n            attributeManager.finalize();\n        }\n        if (this.context) {\n            this.context.resourceManager.unsubscribe({ consumerId: this.id });\n        }\n        if (this.internalState) {\n            this.internalState.uniformTransitions.clear();\n            this.internalState.finalize();\n        }\n    }\n    // If state has a model, draw it with supplied uniforms\n    draw(opts) {\n        for (const model of this.getModels()) {\n            model.draw(opts);\n        }\n    }\n    // called to populate the info object that is passed to the event handler\n    // @return null to cancel event\n    getPickingInfo({ info, mode, sourceLayer }) {\n        const { index } = info;\n        if (index >= 0) {\n            // If props.data is an indexable array, get the object\n            if (Array.isArray(this.props.data)) {\n                info.object = this.props.data[index];\n            }\n        }\n        return info;\n    }\n    // END LIFECYCLE METHODS\n    // / INTERNAL METHODS - called by LayerManager, DeckRenderer and DeckPicker\n    /** (Internal) Propagate an error event through the system */\n    raiseError(error, message) {\n        if (message) {\n            // Duplicating error message for backward compatibility, see #7986\n            // TODO - revisit in v9\n            error = new Error(`${message}: ${error.message}`, { cause: error });\n        }\n        if (!this.props.onError?.(error)) {\n            this.context?.onError?.(error, this);\n        }\n    }\n    /** (Internal) Checks if this layer needs redraw */\n    getNeedsRedraw(opts = { clearRedrawFlags: false }) {\n        return this._getNeedsRedraw(opts);\n    }\n    /** (Internal) Checks if this layer needs a deep update */\n    needsUpdate() {\n        if (!this.internalState) {\n            return false;\n        }\n        // Call subclass lifecycle method\n        return (this.internalState.needsUpdate ||\n            this.hasUniformTransition() ||\n            this.shouldUpdateState(this._getUpdateParams()));\n        // End lifecycle method\n    }\n    /** Checks if this layer has ongoing uniform transition */\n    hasUniformTransition() {\n        return this.internalState?.uniformTransitions.active || false;\n    }\n    /** Called when this layer is rendered into the given viewport */\n    activateViewport(viewport) {\n        if (!this.internalState) {\n            return;\n        }\n        const oldViewport = this.internalState.viewport;\n        this.internalState.viewport = viewport;\n        if (!oldViewport || !areViewportsEqual({ oldViewport, viewport })) {\n            this.setChangeFlags({ viewportChanged: true });\n            if (this.isComposite) {\n                if (this.needsUpdate()) {\n                    // Composite layers may add/remove sublayers on viewport change\n                    // Because we cannot change the layers list during a draw cycle, we don't want to update sublayers right away\n                    // This will not call update immediately, but mark the layerManager as needs update on the next frame\n                    this.setNeedsUpdate();\n                }\n            }\n            else {\n                this._update();\n            }\n        }\n    }\n    /** Default implementation of attribute invalidation, can be redefined */\n    invalidateAttribute(name = 'all') {\n        const attributeManager = this.getAttributeManager();\n        if (!attributeManager) {\n            return;\n        }\n        if (name === 'all') {\n            attributeManager.invalidateAll();\n        }\n        else {\n            attributeManager.invalidate(name);\n        }\n    }\n    /** Send updated attributes to the WebGL model */\n    updateAttributes(changedAttributes) {\n        // If some buffer layout changed\n        let bufferLayoutChanged = false;\n        for (const id in changedAttributes) {\n            if (changedAttributes[id].layoutChanged()) {\n                bufferLayoutChanged = true;\n            }\n        }\n        for (const model of this.getModels()) {\n            this._setModelAttributes(model, changedAttributes, bufferLayoutChanged);\n        }\n    }\n    /** Recalculate any attributes if needed */\n    _updateAttributes() {\n        const attributeManager = this.getAttributeManager();\n        if (!attributeManager) {\n            return;\n        }\n        const props = this.props;\n        // Figure out data length\n        const numInstances = this.getNumInstances();\n        const startIndices = this.getStartIndices();\n        attributeManager.update({\n            data: props.data,\n            numInstances,\n            startIndices,\n            props,\n            transitions: props.transitions,\n            // @ts-ignore (TS2339) property attribute is not present on some acceptable data types\n            buffers: props.data.attributes,\n            context: this\n        });\n        const changedAttributes = attributeManager.getChangedAttributes({ clearChangedFlags: true });\n        this.updateAttributes(changedAttributes);\n    }\n    /** Update attribute transitions. This is called in drawLayer, no model updates required. */\n    _updateAttributeTransition() {\n        const attributeManager = this.getAttributeManager();\n        if (attributeManager) {\n            attributeManager.updateTransition();\n        }\n    }\n    /** Update uniform (prop) transitions. This is called in updateState, may result in model updates. */\n    _updateUniformTransition() {\n        // @ts-ignore (TS2339) internalState is alwasy defined when this method is called\n        const { uniformTransitions } = this.internalState;\n        if (uniformTransitions.active) {\n            // clone props\n            const propsInTransition = uniformTransitions.update();\n            const props = Object.create(this.props);\n            for (const key in propsInTransition) {\n                Object.defineProperty(props, key, { value: propsInTransition[key] });\n            }\n            return props;\n        }\n        return this.props;\n    }\n    /** Updater for the automatically populated instancePickingColors attribute */\n    calculateInstancePickingColors(attribute, { numInstances }) {\n        if (attribute.constant) {\n            return;\n        }\n        // calculateInstancePickingColors always generates the same sequence.\n        // pickingColorCache saves the largest generated sequence for reuse\n        const cacheSize = Math.floor(pickingColorCache.length / 4);\n        // Record when using the picking buffer cache, so that layers can always point at the most recently allocated cache\n        // @ts-ignore (TS2531) internalState is always defined when this method is called\n        this.internalState.usesPickingColorCache = true;\n        if (cacheSize < numInstances) {\n            if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n                log.warn('Layer has too many data objects. Picking might not be able to distinguish all objects.')();\n            }\n            pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n                size: 4,\n                copy: true,\n                maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n            });\n            // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n            const newCacheSize = Math.floor(pickingColorCache.length / 4);\n            const pickingColor = [];\n            for (let i = cacheSize; i < newCacheSize; i++) {\n                this.encodePickingColor(i, pickingColor);\n                pickingColorCache[i * 4 + 0] = pickingColor[0];\n                pickingColorCache[i * 4 + 1] = pickingColor[1];\n                pickingColorCache[i * 4 + 2] = pickingColor[2];\n            }\n        }\n        attribute.value = pickingColorCache.subarray(0, numInstances * 4);\n    }\n    /** Apply changed attributes to model */\n    _setModelAttributes(model, changedAttributes, bufferLayoutChanged = false) {\n        if (!Object.keys(changedAttributes).length) {\n            return;\n        }\n        if (bufferLayoutChanged) {\n            // AttributeManager is always defined when this method is called\n            const attributeManager = this.getAttributeManager();\n            model.setBufferLayout(attributeManager.getBufferLayouts());\n            // All attributes must be reset after buffer layout change\n            changedAttributes = attributeManager.getAttributes();\n        }\n        // @ts-ignore luma.gl type issue\n        const excludeAttributes = model.userData?.excludeAttributes || {};\n        const attributeBuffers = {};\n        const constantAttributes = {};\n        for (const name in changedAttributes) {\n            if (excludeAttributes[name]) {\n                continue;\n            }\n            const values = changedAttributes[name].getValue();\n            for (const attributeName in values) {\n                const value = values[attributeName];\n                if (value instanceof Buffer) {\n                    if (changedAttributes[name].settings.isIndexed) {\n                        model.setIndexBuffer(value);\n                    }\n                    else {\n                        attributeBuffers[attributeName] = value;\n                    }\n                }\n                else if (value) {\n                    constantAttributes[attributeName] = value;\n                }\n            }\n        }\n        // TODO - update buffer map?\n        model.setAttributes(attributeBuffers);\n        model.setConstantAttributes(constantAttributes);\n    }\n    /** (Internal) Sets the picking color at the specified index to null picking color. Used for multi-depth picking.\n       This method may be overriden by layer implementations */\n    disablePickingIndex(objectIndex) {\n        const data = this.props.data;\n        if (!('attributes' in data)) {\n            this._disablePickingIndex(objectIndex);\n            return;\n        }\n        // @ts-ignore (TS2531) this method is only called internally with attributeManager defined\n        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;\n        const colors = pickingColors || instancePickingColors;\n        const externalColorAttribute = colors && data.attributes && data.attributes[colors.id];\n        if (externalColorAttribute && externalColorAttribute.value) {\n            const values = externalColorAttribute.value;\n            const objectColor = this.encodePickingColor(objectIndex);\n            for (let index = 0; index < data.length; index++) {\n                const i = colors.getVertexOffset(index);\n                if (values[i] === objectColor[0] &&\n                    values[i + 1] === objectColor[1] &&\n                    values[i + 2] === objectColor[2]) {\n                    this._disablePickingIndex(index);\n                }\n            }\n        }\n        else {\n            this._disablePickingIndex(objectIndex);\n        }\n    }\n    // TODO - simplify subclassing interface\n    _disablePickingIndex(objectIndex) {\n        // @ts-ignore (TS2531) this method is only called internally with attributeManager defined\n        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;\n        const colors = pickingColors || instancePickingColors;\n        if (!colors) {\n            return;\n        }\n        const start = colors.getVertexOffset(objectIndex);\n        const end = colors.getVertexOffset(objectIndex + 1);\n        // Fill the sub buffer with 0s, 1 byte per element\n        colors.buffer.write(new Uint8Array(end - start), start);\n    }\n    /** (Internal) Re-enable all picking indices after multi-depth picking */\n    restorePickingColors() {\n        // @ts-ignore (TS2531) this method is only called internally with attributeManager defined\n        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;\n        const colors = pickingColors || instancePickingColors;\n        if (!colors) {\n            return;\n        }\n        // The picking color cache may have been freed and then reallocated. This ensures we read from the currently allocated cache.\n        if (\n        // @ts-ignore (TS2531) this method is only called internally with internalState defined\n        this.internalState.usesPickingColorCache &&\n            colors.value.buffer !== pickingColorCache.buffer) {\n            colors.value = pickingColorCache.subarray(0, colors.value.length);\n        }\n        colors.updateSubBuffer({ startOffset: 0 });\n    }\n    /* eslint-disable max-statements */\n    /* (Internal) Called by layer manager when a new layer is found */\n    _initialize() {\n        assert(!this.internalState); // finalized layer cannot be reused\n        assert(Number.isFinite(this.props.coordinateSystem)); // invalid coordinateSystem\n        debug(TRACE_INITIALIZE, this);\n        const attributeManager = this._getAttributeManager();\n        if (attributeManager) {\n            // All instanced layers get instancePickingColors attribute by default\n            // Their shaders can use it to render a picking scene\n            // TODO - this slightly slows down non instanced layers\n            attributeManager.addInstanced({\n                instancePickingColors: {\n                    type: 'uint8',\n                    size: 4,\n                    noAlloc: true,\n                    // Updaters are always called with `this` pointing to the layer\n                    // eslint-disable-next-line @typescript-eslint/unbound-method\n                    update: this.calculateInstancePickingColors\n                }\n            });\n        }\n        this.internalState = new LayerState({\n            attributeManager,\n            layer: this\n        });\n        this._clearChangeFlags(); // populate this.internalState.changeFlags\n        this.state = {};\n        // for backwards compatibility with older layers\n        // TODO - remove in next release\n        /* eslint-disable accessor-pairs */\n        Object.defineProperty(this.state, 'attributeManager', {\n            get: () => {\n                log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()')();\n                return attributeManager;\n            }\n        });\n        /* eslint-enable accessor-pairs */\n        this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n        this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n        // Ensure any async props are updated\n        this.internalState.setAsyncProps(this.props);\n        // Call subclass lifecycle methods\n        this.initializeState(this.context);\n        // Initialize extensions\n        for (const extension of this.props.extensions) {\n            extension.initializeState.call(this, this.context, extension);\n        }\n        // End subclass lifecycle methods\n        // initializeState callback tends to clear state\n        this.setChangeFlags({\n            dataChanged: 'init',\n            propsChanged: 'init',\n            viewportChanged: true,\n            extensionsChanged: true\n        });\n        this._update();\n    }\n    /** (Internal) Called by layer manager to transfer state from an old layer */\n    _transferState(oldLayer) {\n        debug(TRACE_MATCHED, this, this === oldLayer);\n        const { state, internalState } = oldLayer;\n        if (this === oldLayer) {\n            return;\n        }\n        // Move internalState\n        this.internalState = internalState;\n        // Move state\n        this.state = state;\n        // We keep the state ref on old layers to support async actions\n        // oldLayer.state = null;\n        // Ensure any async props are updated\n        this.internalState.setAsyncProps(this.props);\n        this._diffProps(this.props, this.internalState.getOldProps());\n    }\n    /** (Internal) Called by layer manager when a new layer is added or an existing layer is matched with a new instance */\n    _update() {\n        // Call subclass lifecycle method\n        const stateNeedsUpdate = this.needsUpdate();\n        // End lifecycle method\n        debug(TRACE_UPDATE, this, stateNeedsUpdate);\n        if (!stateNeedsUpdate) {\n            return;\n        }\n        const currentProps = this.props;\n        const context = this.context;\n        const internalState = this.internalState;\n        const currentViewport = context.viewport;\n        const propsInTransition = this._updateUniformTransition();\n        internalState.propsInTransition = propsInTransition;\n        // Overwrite this.context.viewport during update to use the last activated viewport on this layer\n        // In multi-view applications, a layer may only be drawn in one of the views\n        // Which would make the \"active\" viewport different from the shared context\n        context.viewport = internalState.viewport || currentViewport;\n        // Overwrite this.props during update to use in-transition prop values\n        this.props = propsInTransition;\n        try {\n            const updateParams = this._getUpdateParams();\n            const oldModels = this.getModels();\n            // Safely call subclass lifecycle methods\n            if (context.device) {\n                this.updateState(updateParams);\n            }\n            else {\n                try {\n                    this.updateState(updateParams);\n                }\n                catch (error) {\n                    // ignore error if gl context is missing\n                }\n            }\n            // Execute extension updates\n            for (const extension of this.props.extensions) {\n                extension.updateState.call(this, updateParams, extension);\n            }\n            const modelChanged = this.getModels()[0] !== oldModels[0];\n            this._postUpdate(updateParams, modelChanged);\n            // End subclass lifecycle methods\n        }\n        finally {\n            // Restore shared context\n            context.viewport = currentViewport;\n            this.props = currentProps;\n            this._clearChangeFlags();\n            internalState.needsUpdate = false;\n            internalState.resetOldProps();\n        }\n    }\n    /* eslint-enable max-statements */\n    /** (Internal) Called by manager when layer is about to be disposed\n        Note: not guaranteed to be called on application shutdown */\n    _finalize() {\n        debug(TRACE_FINALIZE, this);\n        // Call subclass lifecycle method\n        this.finalizeState(this.context);\n        // Finalize extensions\n        for (const extension of this.props.extensions) {\n            extension.finalizeState.call(this, this.context, extension);\n        }\n    }\n    // Calculates uniforms\n    _drawLayer({ renderPass, moduleParameters = null, uniforms = {}, parameters = {} }) {\n        this._updateAttributeTransition();\n        const currentProps = this.props;\n        const context = this.context;\n        // Overwrite this.props during redraw to use in-transition prop values\n        // `internalState.propsInTransition` could be missing if `updateState` failed\n        // @ts-ignore (TS2339) internalState is alwasy defined when this method is called\n        this.props = this.internalState.propsInTransition || currentProps;\n        const opacity = this.props.opacity;\n        // apply gamma to opacity to make it visually \"linear\"\n        uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n        try {\n            // TODO/ib - hack move to luma Model.draw\n            if (moduleParameters) {\n                const { isActive, isAttribute } = moduleParameters.picking;\n                this.setModuleParameters(moduleParameters);\n                this.setShaderModuleProps({ picking: { isActive, isAttribute } });\n            }\n            // Apply polygon offset to avoid z-fighting\n            // TODO - move to draw-layers\n            const { getPolygonOffset } = this.props;\n            const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n            context.device.setParametersWebGL({ polygonOffset: offsets });\n            for (const model of this.getModels()) {\n                model.setParameters(parameters);\n            }\n            // Call subclass lifecycle method\n            context.device.withParametersWebGL(parameters, () => {\n                const opts = { renderPass, moduleParameters, uniforms, parameters, context };\n                // extensions\n                for (const extension of this.props.extensions) {\n                    extension.draw.call(this, opts, extension);\n                }\n                this.draw(opts);\n            });\n        }\n        finally {\n            this.props = currentProps;\n        }\n        // End lifecycle method\n    }\n    // Helper methods\n    /** Returns the current change flags */\n    getChangeFlags() {\n        return this.internalState?.changeFlags;\n    }\n    /* eslint-disable complexity */\n    /** Dirty some change flags, will be handled by updateLayer */\n    setChangeFlags(flags) {\n        if (!this.internalState) {\n            return;\n        }\n        const { changeFlags } = this.internalState;\n        /* eslint-disable no-fallthrough, max-depth */\n        for (const key in flags) {\n            if (flags[key]) {\n                let flagChanged = false;\n                switch (key) {\n                    case 'dataChanged':\n                        // changeFlags.dataChanged may be `false`, a string (reason) or an array of ranges\n                        const dataChangedReason = flags[key];\n                        const prevDataChangedReason = changeFlags[key];\n                        if (dataChangedReason && Array.isArray(prevDataChangedReason)) {\n                            // Merge partial updates\n                            changeFlags.dataChanged = Array.isArray(dataChangedReason)\n                                ? prevDataChangedReason.concat(dataChangedReason)\n                                : dataChangedReason;\n                            flagChanged = true;\n                        }\n                    default:\n                        if (!changeFlags[key]) {\n                            changeFlags[key] = flags[key];\n                            flagChanged = true;\n                        }\n                }\n                if (flagChanged) {\n                    debug(TRACE_CHANGE_FLAG, this, key, flags);\n                }\n            }\n        }\n        /* eslint-enable no-fallthrough, max-depth */\n        // Update composite flags\n        const propsOrDataChanged = Boolean(changeFlags.dataChanged ||\n            changeFlags.updateTriggersChanged ||\n            changeFlags.propsChanged ||\n            changeFlags.extensionsChanged);\n        changeFlags.propsOrDataChanged = propsOrDataChanged;\n        changeFlags.somethingChanged =\n            propsOrDataChanged || changeFlags.viewportChanged || changeFlags.stateChanged;\n    }\n    /* eslint-enable complexity */\n    /** Clear all changeFlags, typically after an update */\n    _clearChangeFlags() {\n        // @ts-ignore TS2531 this method can only be called internally with internalState assigned\n        this.internalState.changeFlags = {\n            dataChanged: false,\n            propsChanged: false,\n            updateTriggersChanged: false,\n            viewportChanged: false,\n            stateChanged: false,\n            extensionsChanged: false,\n            propsOrDataChanged: false,\n            somethingChanged: false\n        };\n    }\n    /** Compares the layers props with old props from a matched older layer\n        and extracts change flags that describe what has change so that state\n        can be update correctly with minimal effort */\n    _diffProps(newProps, oldProps) {\n        const changeFlags = diffProps(newProps, oldProps);\n        // iterate over changedTriggers\n        if (changeFlags.updateTriggersChanged) {\n            for (const key in changeFlags.updateTriggersChanged) {\n                if (changeFlags.updateTriggersChanged[key]) {\n                    this.invalidateAttribute(key);\n                }\n            }\n        }\n        // trigger uniform transitions\n        if (changeFlags.transitionsChanged) {\n            for (const key in changeFlags.transitionsChanged) {\n                // prop changed and transition is enabled\n                // @ts-ignore (TS2531) internalState is always defined when this method is called\n                this.internalState.uniformTransitions.add(key, oldProps[key], newProps[key], newProps.transitions?.[key]);\n            }\n        }\n        return this.setChangeFlags(changeFlags);\n    }\n    /** (Internal) called by layer manager to perform extra props validation (in development only) */\n    validateProps() {\n        validateProps(this.props);\n    }\n    /** (Internal) Called by deck picker when the hovered object changes to update the auto highlight */\n    updateAutoHighlight(info) {\n        if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {\n            this._updateAutoHighlight(info);\n        }\n    }\n    // May be overriden by subclasses\n    // TODO - simplify subclassing interface\n    /** Update picking module parameters to highlight the hovered object */\n    _updateAutoHighlight(info) {\n        const picking = {\n            highlightedObjectColor: info.picked ? info.color : null\n        };\n        const { highlightColor } = this.props;\n        if (info.picked && typeof highlightColor === 'function') {\n            picking.highlightColor = highlightColor(info);\n        }\n        this.setShaderModuleProps({ picking });\n        // setShaderModuleProps does not trigger redraw\n        this.setNeedsRedraw();\n    }\n    /** Create new attribute manager */\n    _getAttributeManager() {\n        const context = this.context;\n        return new AttributeManager(context.device, {\n            id: this.props.id,\n            stats: context.stats,\n            timeline: context.timeline\n        });\n    }\n    // Private methods\n    /** Called after updateState to perform common tasks */\n    _postUpdate(updateParams, forceUpdate) {\n        const { props, oldProps } = updateParams;\n        this.setNeedsRedraw();\n        // Check if attributes need recalculation\n        this._updateAttributes();\n        // Note: Automatic instance count update only works for single layers\n        const model = this.state.model;\n        model?.setInstanceCount(this.getNumInstances());\n        // Set picking module parameters to match props\n        const { autoHighlight, highlightedObjectIndex, highlightColor } = props;\n        if (forceUpdate ||\n            oldProps.autoHighlight !== autoHighlight ||\n            oldProps.highlightedObjectIndex !== highlightedObjectIndex ||\n            oldProps.highlightColor !== highlightColor) {\n            const picking = {};\n            if (!autoHighlight) {\n                picking.highlightedObjectColor = null;\n            }\n            if (Array.isArray(highlightColor)) {\n                picking.highlightColor = highlightColor;\n            }\n            // highlightedObjectIndex will overwrite any settings from auto highlighting.\n            // Do not reset unless the value has changed.\n            if (forceUpdate || highlightedObjectIndex !== oldProps.highlightedObjectIndex) {\n                picking.highlightedObjectColor =\n                    Number.isFinite(highlightedObjectIndex) && highlightedObjectIndex >= 0\n                        ? this.encodePickingColor(highlightedObjectIndex)\n                        : null;\n            }\n            this.setShaderModuleProps({ picking });\n        }\n    }\n    _getUpdateParams() {\n        return {\n            props: this.props,\n            // @ts-ignore TS2531 this method can only be called internally with internalState assigned\n            oldProps: this.internalState.getOldProps(),\n            context: this.context,\n            // @ts-ignore TS2531 this method can only be called internally with internalState assigned\n            changeFlags: this.internalState.changeFlags\n        };\n    }\n    /** Checks state of attributes and model */\n    _getNeedsRedraw(opts) {\n        // this method may be called by the render loop as soon a the layer\n        // has been created, so guard against uninitialized state\n        if (!this.internalState) {\n            return false;\n        }\n        let redraw = false;\n        redraw = redraw || (this.internalState.needsRedraw && this.id);\n        // TODO - is attribute manager needed? - Model should be enough.\n        const attributeManager = this.getAttributeManager();\n        const attributeManagerNeedsRedraw = attributeManager\n            ? attributeManager.getNeedsRedraw(opts)\n            : false;\n        redraw = redraw || attributeManagerNeedsRedraw;\n        if (redraw) {\n            for (const extension of this.props.extensions) {\n                extension.onNeedsRedraw.call(this, extension);\n            }\n        }\n        this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n        return redraw;\n    }\n    /** Callback when asyn prop is loaded */\n    _onAsyncPropUpdated() {\n        // @ts-ignore TS2531 this method can only be called internally with internalState assigned\n        this._diffProps(this.props, this.internalState.getOldProps());\n        this.setNeedsUpdate();\n    }\n}\n", "import { lerp } from '@math.gl/core';\nimport Transition from \"./transition.js\";\nexport default class CPUInterpolationTransition extends Transition {\n    get value() {\n        return this._value;\n    }\n    _onUpdate() {\n        const { time, settings: { fromValue, toValue, duration, easing } } = this;\n        const t = easing(time / duration);\n        this._value = lerp(fromValue, toValue, t);\n    }\n}\n", "import Transition from \"./transition.js\";\nconst EPSILON = 1e-5;\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number} - previous value\n * @param cur {Number} - current value\n * @param dest {Number} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n    const velocity = cur - prev;\n    const delta = dest - cur;\n    const spring = delta * stiffness;\n    const damper = -velocity * damping;\n    return spring + damper + velocity + cur;\n}\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n    if (Array.isArray(dest)) {\n        const next = [];\n        for (let i = 0; i < dest.length; i++) {\n            next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n        }\n        return next;\n    }\n    return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n/*\n * Calculate the distance between two numbers or two vectors\n */\nfunction distance(value1, value2) {\n    if (Array.isArray(value1)) {\n        let distanceSquare = 0;\n        for (let i = 0; i < value1.length; i++) {\n            const d = value1[i] - value2[i];\n            distanceSquare += d * d;\n        }\n        return Math.sqrt(distanceSquare);\n    }\n    return Math.abs(value1 - value2);\n}\nexport default class CPUSpringTransition extends Transition {\n    get value() {\n        return this._currValue;\n    }\n    _onUpdate() {\n        // TODO - use timeline\n        // const {time} = this;\n        const { fromValue, toValue, damping, stiffness } = this.settings;\n        const { _prevValue = fromValue, _currValue = fromValue } = this;\n        let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n        const delta = distance(nextValue, toValue);\n        const velocity = distance(nextValue, _currValue);\n        if (delta < EPSILON && velocity < EPSILON) {\n            nextValue = toValue;\n            this.end();\n        }\n        this._prevValue = _currValue;\n        this._currValue = nextValue;\n    }\n}\n", "import { normalizeTransitionSettings } from \"./attribute/transition-settings.js\";\nimport CPUInterpolationTransition from \"../transitions/cpu-interpolation-transition.js\";\nimport CPUSpringTransition from \"../transitions/cpu-spring-transition.js\";\nimport log from \"../utils/log.js\";\nconst TRANSITION_TYPES = {\n    interpolation: CPUInterpolationTransition,\n    spring: CPUSpringTransition\n};\nexport default class UniformTransitionManager {\n    constructor(timeline) {\n        this.transitions = new Map();\n        this.timeline = timeline;\n    }\n    get active() {\n        return this.transitions.size > 0;\n    }\n    add(key, fromValue, toValue, settings) {\n        const { transitions } = this;\n        if (transitions.has(key)) {\n            const transition = transitions.get(key);\n            // value may not be available if `update()` has not been called. Fallback to `fromValue`\n            const { value = transition.settings.fromValue } = transition;\n            // start from interrupted position\n            fromValue = value;\n            this.remove(key);\n        }\n        settings = normalizeTransitionSettings(settings);\n        if (!settings) {\n            return;\n        }\n        const TransitionType = TRANSITION_TYPES[settings.type];\n        if (!TransitionType) {\n            log.error(`unsupported transition type '${settings.type}'`)();\n            return;\n        }\n        const transition = new TransitionType(this.timeline);\n        transition.start({\n            ...settings,\n            fromValue,\n            toValue\n        });\n        transitions.set(key, transition);\n    }\n    remove(key) {\n        const { transitions } = this;\n        if (transitions.has(key)) {\n            transitions.get(key).cancel();\n            transitions.delete(key);\n        }\n    }\n    update() {\n        const propsInTransition = {};\n        for (const [key, transition] of this.transitions) {\n            transition.update();\n            propsInTransition[key] = transition.value;\n            if (!transition.inProgress) {\n                // transition ended\n                this.remove(key);\n            }\n        }\n        return propsInTransition;\n    }\n    clear() {\n        for (const key of this.transitions.keys()) {\n            this.remove(key);\n        }\n    }\n}\n", "import { PROP_TYPES_SYMBOL } from \"./constants.js\";\nexport function validateProps(props) {\n    const propTypes = props[PROP_TYPES_SYMBOL];\n    for (const propName in propTypes) {\n        const propType = propTypes[propName];\n        const { validate } = propType;\n        if (validate && !validate(props[propName], propType)) {\n            throw new Error(`Invalid prop ${propName}: ${props[propName]}`);\n        }\n    }\n}\n// Returns an object with \"change flags\", either false or strings indicating reason for change\nexport function diffProps(props, oldProps) {\n    // First check if any props have changed (ignore props that will be examined separately)\n    const propsChangedReason = compareProps({\n        newProps: props,\n        oldProps,\n        propTypes: props[PROP_TYPES_SYMBOL],\n        ignoreProps: { data: null, updateTriggers: null, extensions: null, transitions: null }\n    });\n    // Now check if any data related props have changed\n    const dataChangedReason = diffDataProps(props, oldProps);\n    // Check update triggers to determine if any attributes need regeneration\n    // Note - if data has changed, all attributes will need regeneration, so skip this step\n    let updateTriggersChangedReason = false;\n    if (!dataChangedReason) {\n        updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n    }\n    return {\n        dataChanged: dataChangedReason,\n        propsChanged: propsChangedReason,\n        updateTriggersChanged: updateTriggersChangedReason,\n        extensionsChanged: diffExtensions(props, oldProps),\n        transitionsChanged: diffTransitions(props, oldProps)\n    };\n}\nfunction diffTransitions(props, oldProps) {\n    if (!props.transitions) {\n        return false;\n    }\n    const result = {};\n    const propTypes = props[PROP_TYPES_SYMBOL];\n    let changed = false;\n    for (const key in props.transitions) {\n        const propType = propTypes[key];\n        const type = propType && propType.type;\n        const isTransitionable = type === 'number' || type === 'color' || type === 'array';\n        if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {\n            result[key] = true;\n            changed = true;\n        }\n    }\n    return changed ? result : false;\n}\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * @param {Object} opt.oldProps - object with old key/value pairs\n * @param {Object} opt.newProps - object with new key/value pairs\n * @param {Object} opt.ignoreProps={} - object, keys that should not be compared\n * @returns {null|String} - null when values of all keys are strictly equal.\n *   if unequal, returns a string explaining what changed.\n */\n/* eslint-disable max-statements, max-depth, complexity */\n/*\n * Note: for better performance, this function assumes that both oldProps and newProps\n   inherit the same prototype (defaultProps). That is, if neither object contains own\n   property <key>, assume `oldProps.<key>` and `newProps.<key>` are equal.\n */\nexport function compareProps({ newProps, oldProps, ignoreProps = {}, propTypes = {}, triggerName = 'props' }) {\n    // shallow equality => deep equality\n    if (oldProps === newProps) {\n        return false;\n    }\n    // TODO - do we need these checks? Should never happen...\n    if (typeof newProps !== 'object' || newProps === null) {\n        return `${triggerName} changed shallowly`;\n    }\n    if (typeof oldProps !== 'object' || oldProps === null) {\n        return `${triggerName} changed shallowly`;\n    }\n    // Compare explicitly defined new props against old/default values\n    for (const key of Object.keys(newProps)) {\n        if (!(key in ignoreProps)) {\n            if (!(key in oldProps)) {\n                return `${triggerName}.${key} added`;\n            }\n            const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n            if (changed) {\n                return `${triggerName}.${key} ${changed}`;\n            }\n        }\n    }\n    // Test if any old props have been dropped\n    for (const key of Object.keys(oldProps)) {\n        if (!(key in ignoreProps)) {\n            if (!(key in newProps)) {\n                return `${triggerName}.${key} dropped`;\n            }\n            if (!Object.hasOwnProperty.call(newProps, key)) {\n                // Compare dropped old prop against default value\n                const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n                if (changed) {\n                    return `${triggerName}.${key} ${changed}`;\n                }\n            }\n        }\n    }\n    return false;\n}\n/* eslint-enable max-statements, max-depth, complexity */\n// HELPERS\nfunction comparePropValues(newProp, oldProp, propType) {\n    // If prop type has an equal function, invoke it\n    let equal = propType && propType.equal;\n    if (equal && !equal(newProp, oldProp, propType)) {\n        return 'changed deeply';\n    }\n    if (!equal) {\n        // If object has an equals function, invoke it\n        equal = newProp && oldProp && newProp.equals;\n        if (equal && !equal.call(newProp, oldProp)) {\n            return 'changed deeply';\n        }\n    }\n    if (!equal && oldProp !== newProp) {\n        return 'changed shallowly';\n    }\n    return null;\n}\n// The comparison of the data prop requires special handling\n// the dataComparator should be used if supplied\nfunction diffDataProps(props, oldProps) {\n    if (oldProps === null) {\n        return 'oldProps is null, initial diff';\n    }\n    let dataChanged = false;\n    // Support optional app defined comparison of data\n    const { dataComparator, _dataDiff } = props;\n    if (dataComparator) {\n        if (!dataComparator(props.data, oldProps.data)) {\n            dataChanged = 'Data comparator detected a change';\n        }\n        // Otherwise, do a shallow equal on props\n    }\n    else if (props.data !== oldProps.data) {\n        dataChanged = 'A new data container was supplied';\n    }\n    if (dataChanged && _dataDiff) {\n        dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n    }\n    return dataChanged;\n}\n// Checks if any update triggers have changed\n// also calls callback to invalidate attributes accordingly.\nfunction diffUpdateTriggers(props, oldProps) {\n    if (oldProps === null) {\n        return { all: true };\n    }\n    // If the 'all' updateTrigger fires, ignore testing others\n    if ('all' in props.updateTriggers) {\n        const diffReason = diffUpdateTrigger(props, oldProps, 'all');\n        if (diffReason) {\n            return { all: true };\n        }\n    }\n    const reason = {};\n    let changed = false;\n    // If the 'all' updateTrigger didn't fire, need to check all others\n    for (const triggerName in props.updateTriggers) {\n        if (triggerName !== 'all') {\n            const diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n            if (diffReason) {\n                reason[triggerName] = true;\n                changed = true;\n            }\n        }\n    }\n    return changed ? reason : false;\n}\n// Returns true if any extensions have changed\nfunction diffExtensions(props, oldProps) {\n    if (oldProps === null) {\n        return true;\n    }\n    const oldExtensions = oldProps.extensions;\n    const { extensions } = props;\n    if (extensions === oldExtensions) {\n        return false;\n    }\n    if (!oldExtensions || !extensions) {\n        return true;\n    }\n    if (extensions.length !== oldExtensions.length) {\n        return true;\n    }\n    for (let i = 0; i < extensions.length; i++) {\n        if (!extensions[i].equals(oldExtensions[i])) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n    let newTriggers = props.updateTriggers[triggerName];\n    newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n    let oldTriggers = oldProps.updateTriggers[triggerName];\n    oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n    const diffReason = compareProps({\n        oldProps: oldTriggers,\n        newProps: newTriggers,\n        triggerName\n    });\n    return diffReason;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nconst ERR_NOT_OBJECT = 'count(): argument not an object';\nconst ERR_NOT_CONTAINER = 'count(): argument not a container';\n/**\n * Deduces numer of elements in a JavaScript container.\n * - Auto-deduction for ES6 containers that define a count() method\n * - Auto-deduction for ES6 containers that define a size member\n * - Auto-deduction for Classic Arrays via the built-in length attribute\n * - Also handles objects, although note that this an O(N) operation\n */\nexport function count(container) {\n    if (!isObject(container)) {\n        throw new Error(ERR_NOT_OBJECT);\n    }\n    // Check if ES6 collection \"count\" function is available\n    if (typeof container.count === 'function') {\n        return container.count();\n    }\n    // Check if ES6 collection \"size\" attribute is set\n    if (Number.isFinite(container.size)) {\n        return container.size;\n    }\n    // Check if array length attribute is set\n    // Note: checking this last since some ES6 collections (Immutable.js)\n    // emit profuse warnings when trying to access `length` attribute\n    if (Number.isFinite(container.length)) {\n        return container.length;\n    }\n    // Note that getting the count of an object is O(N)\n    if (isPlainObject(container)) {\n        return Object.keys(container).length;\n    }\n    throw new Error(ERR_NOT_CONTAINER);\n}\n/**\n * Checks if argument is a plain object (not a class or array etc)\n * @param {*} value - JavaScript value to be tested\n * @return {Boolean} - true if argument is a plain JavaScript object\n */\nfunction isPlainObject(value) {\n    return value !== null && typeof value === 'object' && value.constructor === Object;\n}\n/**\n * Checks if argument is an indexable object (not a primitive value, nor null)\n * @param {*} value - JavaScript value to be tested\n * @return {Boolean} - true if argument is a JavaScript object\n */\nfunction isObject(value) {\n    return value !== null && typeof value === 'object';\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// Merge two luma.gl shader descriptors\nexport function mergeShaders(target, source) {\n    if (!source) {\n        return target;\n    }\n    const result = { ...target, ...source };\n    if ('defines' in source) {\n        result.defines = { ...target.defines, ...source.defines };\n    }\n    if ('modules' in source) {\n        result.modules = (target.modules || []).concat(source.modules);\n        // Hack: prject32 and project64 cannot co-exist\n        if (source.modules.some(module => module.name === 'project64')) {\n            const index = result.modules.findIndex(module => module.name === 'project32');\n            if (index >= 0) {\n                result.modules.splice(index, 1);\n            }\n        }\n    }\n    if ('inject' in source) {\n        if (!target.inject) {\n            result.inject = source.inject;\n        }\n        else {\n            const mergedInjection = { ...target.inject };\n            for (const key in source.inject) {\n                mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n            }\n            result.inject = mergedInjection;\n        }\n    }\n    return result;\n}\n", "import { Texture } from '@luma.gl/core';\nconst DEFAULT_TEXTURE_PARAMETERS = {\n    minFilter: 'linear',\n    mipmapFilter: 'linear',\n    magFilter: 'linear',\n    addressModeU: 'clamp-to-edge',\n    addressModeV: 'clamp-to-edge'\n};\n// Track the textures that are created by us. They need to be released when they are no longer used.\nconst internalTextures = {};\n/**\n *\n * @param owner\n * @param device\n * @param image could be one of:\n *   - Texture\n *   - Browser object: Image, ImageData, ImageData, HTMLCanvasElement, HTMLVideoElement, ImageBitmap\n *   - Plain object: {width: <number>, height: <number>, data: <Uint8Array>}\n * @param parameters\n * @returns\n */\nexport function createTexture(owner, device, image, sampler) {\n    if (image instanceof Texture) {\n        // @ts-expect-error This type error seems like it shouldn't happen...\n        return image;\n    }\n    else if (image.constructor && image.constructor.name !== 'Object') {\n        // Browser object\n        image = { data: image };\n    }\n    let samplerParameters = null;\n    if (image.compressed) {\n        samplerParameters = {\n            minFilter: 'linear',\n            mipmapFilter: image.data.length > 1 ? 'nearest' : 'linear'\n        };\n    }\n    const texture = device.createTexture({\n        ...image,\n        sampler: {\n            ...DEFAULT_TEXTURE_PARAMETERS,\n            ...samplerParameters,\n            ...sampler\n        }\n    });\n    // Track this texture\n    internalTextures[texture.id] = owner;\n    return texture;\n}\nexport function destroyTexture(owner, texture) {\n    if (!texture || !(texture instanceof Texture)) {\n        return;\n    }\n    // Only delete the texture if requested by the same layer that created it\n    if (internalTextures[texture.id] === owner) {\n        texture.delete();\n        delete internalTextures[texture.id];\n    }\n}\n", "import { createTexture, destroyTexture } from \"../utils/texture.js\";\nimport { deepEqual } from \"../utils/deep-equal.js\";\nconst TYPE_DEFINITIONS = {\n    boolean: {\n        validate(value, propType) {\n            return true;\n        },\n        equal(value1, value2, propType) {\n            return Boolean(value1) === Boolean(value2);\n        }\n    },\n    number: {\n        validate(value, propType) {\n            return (Number.isFinite(value) &&\n                (!('max' in propType) || value <= propType.max) &&\n                (!('min' in propType) || value >= propType.min));\n        }\n    },\n    color: {\n        validate(value, propType) {\n            return ((propType.optional && !value) ||\n                (isArray(value) && (value.length === 3 || value.length === 4)));\n        },\n        equal(value1, value2, propType) {\n            return deepEqual(value1, value2, 1);\n        }\n    },\n    accessor: {\n        validate(value, propType) {\n            const valueType = getTypeOf(value);\n            return valueType === 'function' || valueType === getTypeOf(propType.value);\n        },\n        equal(value1, value2, propType) {\n            if (typeof value2 === 'function') {\n                return true;\n            }\n            return deepEqual(value1, value2, 1);\n        }\n    },\n    array: {\n        validate(value, propType) {\n            return (propType.optional && !value) || isArray(value);\n        },\n        equal(value1, value2, propType) {\n            const { compare } = propType;\n            const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;\n            return compare ? deepEqual(value1, value2, depth) : value1 === value2;\n        }\n    },\n    object: {\n        equal(value1, value2, propType) {\n            if (propType.ignore) {\n                return true;\n            }\n            const { compare } = propType;\n            const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;\n            return compare ? deepEqual(value1, value2, depth) : value1 === value2;\n        }\n    },\n    function: {\n        validate(value, propType) {\n            return (propType.optional && !value) || typeof value === 'function';\n        },\n        equal(value1, value2, propType) {\n            // Backward compatibility - {compare: true} and {ignore: false} are equivalent\n            const shouldIgnore = !propType.compare && propType.ignore !== false;\n            return shouldIgnore || value1 === value2;\n        }\n    },\n    data: {\n        transform: (value, propType, component) => {\n            if (!value) {\n                return value;\n            }\n            const { dataTransform } = component.props;\n            if (dataTransform) {\n                return dataTransform(value);\n            }\n            // Detect loaders.gl v4 table format\n            if (typeof value.shape === 'string' &&\n                value.shape.endsWith('-table') &&\n                Array.isArray(value.data)) {\n                return value.data;\n            }\n            return value;\n        }\n    },\n    image: {\n        transform: (value, propType, component) => {\n            const context = component.context;\n            if (!context || !context.device) {\n                return null;\n            }\n            return createTexture(component.id, context.device, value, {\n                ...propType.parameters,\n                ...component.props.textureParameters\n            });\n        },\n        release: (value, propType, component) => {\n            destroyTexture(component.id, value);\n        }\n    }\n};\nexport function parsePropTypes(propDefs) {\n    const propTypes = {};\n    const defaultProps = {};\n    const deprecatedProps = {};\n    for (const [propName, propDef] of Object.entries(propDefs)) {\n        const deprecated = propDef?.deprecatedFor;\n        if (deprecated) {\n            deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [deprecated];\n        }\n        else {\n            const propType = parsePropType(propName, propDef);\n            propTypes[propName] = propType;\n            defaultProps[propName] = propType.value;\n        }\n    }\n    return { propTypes, defaultProps, deprecatedProps };\n}\n// Parses one property definition entry. Either contains:\n// * a valid prop type object ({type, ...})\n// * or just a default value, in which case type and name inference is used\nfunction parsePropType(name, propDef) {\n    switch (getTypeOf(propDef)) {\n        case 'object':\n            return normalizePropDefinition(name, propDef);\n        case 'array':\n            return normalizePropDefinition(name, { type: 'array', value: propDef, compare: false });\n        case 'boolean':\n            return normalizePropDefinition(name, { type: 'boolean', value: propDef });\n        case 'number':\n            return normalizePropDefinition(name, { type: 'number', value: propDef });\n        case 'function':\n            // return guessFunctionType(name, propDef);\n            return normalizePropDefinition(name, { type: 'function', value: propDef, compare: true });\n        default:\n            return { name, type: 'unknown', value: propDef };\n    }\n}\nfunction normalizePropDefinition(name, propDef) {\n    if (!('type' in propDef)) {\n        if (!('value' in propDef)) {\n            // If no type and value this object is likely the value\n            return { name, type: 'object', value: propDef };\n        }\n        return { name, type: getTypeOf(propDef.value), ...propDef };\n    }\n    return { name, ...TYPE_DEFINITIONS[propDef.type], ...propDef };\n}\nfunction isArray(value) {\n    return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n// improved version of javascript typeof that can distinguish arrays and null values\nfunction getTypeOf(value) {\n    if (isArray(value)) {\n        return 'array';\n    }\n    if (value === null) {\n        return 'null';\n    }\n    return typeof value;\n}\n", "import log from \"../utils/log.js\";\nimport { isAsyncIterable } from \"../utils/iterable-utils.js\";\nimport { parsePropTypes } from \"./prop-types.js\";\nimport { COMPONENT_SYMBOL, PROP_TYPES_SYMBOL, DEPRECATED_PROPS_SYMBOL, ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL } from \"./constants.js\";\n// Create a property object\nexport function createProps(component, propObjects) {\n    // Resolve extension value\n    let extensions;\n    for (let i = propObjects.length - 1; i >= 0; i--) {\n        const props = propObjects[i];\n        if ('extensions' in props) {\n            // @ts-expect-error TS(2339) extensions not defined\n            extensions = props.extensions;\n        }\n    }\n    // Create a new prop object with empty default props object\n    const propsPrototype = getPropsPrototype(component.constructor, extensions);\n    // The true default props object will be found later\n    const propsInstance = Object.create(propsPrototype);\n    // Props need a back pointer to the owning component\n    propsInstance[COMPONENT_SYMBOL] = component;\n    // The supplied (original) values for those async props that are set to url strings or Promises.\n    // In this case, the actual (i.e. resolved) values are looked up from component.internalState\n    propsInstance[ASYNC_ORIGINAL_SYMBOL] = {};\n    // Note: the actual (resolved) values for props that are NOT set to urls or Promises.\n    // in this case the values are served directly from this map\n    propsInstance[ASYNC_RESOLVED_SYMBOL] = {};\n    // \"Copy\" all sync props\n    for (let i = 0; i < propObjects.length; ++i) {\n        const props = propObjects[i];\n        // Do not use Object.assign here to avoid Symbols in props overwriting our private fields\n        // This might happen if one of the arguments is another props instance\n        for (const key in props) {\n            propsInstance[key] = props[key];\n        }\n    }\n    // Props must be immutable\n    Object.freeze(propsInstance);\n    return propsInstance;\n}\nconst MergedDefaultPropsCacheKey = '_mergedDefaultProps';\n// Return precalculated defaultProps and propType objects if available\n// build them if needed\nfunction getPropsPrototype(componentClass, extensions) {\n    // A string that uniquely identifies the extensions involved\n    let cacheKey = MergedDefaultPropsCacheKey;\n    if (extensions) {\n        for (const extension of extensions) {\n            const ExtensionClass = extension.constructor;\n            if (ExtensionClass) {\n                cacheKey += `:${ExtensionClass.extensionName || ExtensionClass.name}`;\n            }\n        }\n    }\n    const defaultProps = getOwnProperty(componentClass, cacheKey);\n    if (!defaultProps) {\n        return (componentClass[cacheKey] = createPropsPrototypeAndTypes(componentClass, extensions || []));\n    }\n    return defaultProps;\n}\n// Build defaultProps and propType objects by walking component prototype chain\nfunction createPropsPrototypeAndTypes(componentClass, extensions) {\n    const parent = componentClass.prototype;\n    if (!parent) {\n        return null;\n    }\n    const parentClass = Object.getPrototypeOf(componentClass);\n    const parentDefaultProps = getPropsPrototype(parentClass);\n    // Parse propTypes from Component.defaultProps\n    const componentDefaultProps = getOwnProperty(componentClass, 'defaultProps') || {};\n    const componentPropDefs = parsePropTypes(componentDefaultProps);\n    // Merged default props object. Order: parent, self, extensions\n    const defaultProps = Object.assign(Object.create(null), parentDefaultProps, componentPropDefs.defaultProps);\n    // Merged prop type definitions. Order: parent, self, extensions\n    const propTypes = Object.assign(Object.create(null), parentDefaultProps?.[PROP_TYPES_SYMBOL], componentPropDefs.propTypes);\n    // Merged deprecation list. Order: parent, self, extensions\n    const deprecatedProps = Object.assign(Object.create(null), parentDefaultProps?.[DEPRECATED_PROPS_SYMBOL], componentPropDefs.deprecatedProps);\n    for (const extension of extensions) {\n        const extensionDefaultProps = getPropsPrototype(extension.constructor);\n        if (extensionDefaultProps) {\n            Object.assign(defaultProps, extensionDefaultProps);\n            Object.assign(propTypes, extensionDefaultProps[PROP_TYPES_SYMBOL]);\n            Object.assign(deprecatedProps, extensionDefaultProps[DEPRECATED_PROPS_SYMBOL]);\n        }\n    }\n    // Create any necessary property descriptors and create the default prop object\n    // Assign merged default props\n    createPropsPrototype(defaultProps, componentClass);\n    // Add getters/setters for async props\n    addAsyncPropsToPropPrototype(defaultProps, propTypes);\n    // Add setters for deprecated props\n    addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps);\n    // Store the precalculated props\n    defaultProps[PROP_TYPES_SYMBOL] = propTypes;\n    defaultProps[DEPRECATED_PROPS_SYMBOL] = deprecatedProps;\n    // Backwards compatibility\n    // TODO: remove access of hidden property from the rest of the code base\n    if (extensions.length === 0 && !hasOwnProperty(componentClass, '_propTypes')) {\n        componentClass._propTypes = propTypes;\n    }\n    return defaultProps;\n}\n// Builds a pre-merged default props object that component props can inherit from\nfunction createPropsPrototype(defaultProps, componentClass) {\n    // Avoid freezing `id` prop\n    const id = getComponentName(componentClass);\n    Object.defineProperties(defaultProps, {\n        // `id` is treated specially because layer might need to override it\n        id: {\n            writable: true,\n            value: id\n        }\n    });\n}\nfunction addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps) {\n    for (const propName in deprecatedProps) {\n        /* eslint-disable accessor-pairs */\n        Object.defineProperty(defaultProps, propName, {\n            enumerable: false,\n            set(newValue) {\n                const nameStr = `${this.id}: ${propName}`;\n                for (const newPropName of deprecatedProps[propName]) {\n                    if (!hasOwnProperty(this, newPropName)) {\n                        this[newPropName] = newValue;\n                    }\n                }\n                log.deprecated(nameStr, deprecatedProps[propName].join('/'))();\n            }\n        });\n        /* eslint-enable accessor-pairs */\n    }\n}\n// Create descriptors for overridable props\nfunction addAsyncPropsToPropPrototype(defaultProps, propTypes) {\n    const defaultValues = {};\n    const descriptors = {};\n    // Move async props into shadow values\n    for (const propName in propTypes) {\n        const propType = propTypes[propName];\n        const { name, value } = propType;\n        // Note: async is ES7 keyword, can't destructure\n        if (propType.async) {\n            defaultValues[name] = value;\n            descriptors[name] = getDescriptorForAsyncProp(name);\n        }\n    }\n    // Default \"resolved\" values for async props, returned if value not yet resolved/set.\n    defaultProps[ASYNC_DEFAULTS_SYMBOL] = defaultValues;\n    // Shadowed object, just to make sure \"early indexing\" into the instance does not fail\n    defaultProps[ASYNC_ORIGINAL_SYMBOL] = {};\n    Object.defineProperties(defaultProps, descriptors);\n}\n// Helper: Configures getter and setter for one async prop\nfunction getDescriptorForAsyncProp(name) {\n    return {\n        enumerable: true,\n        // Save the provided value for async props in a special map\n        set(newValue) {\n            if (typeof newValue === 'string' ||\n                newValue instanceof Promise ||\n                isAsyncIterable(newValue)) {\n                this[ASYNC_ORIGINAL_SYMBOL][name] = newValue;\n            }\n            else {\n                this[ASYNC_RESOLVED_SYMBOL][name] = newValue;\n            }\n        },\n        // Only the component's state knows the true value of async prop\n        get() {\n            if (this[ASYNC_RESOLVED_SYMBOL]) {\n                // Prop value isn't async, so just return it\n                if (name in this[ASYNC_RESOLVED_SYMBOL]) {\n                    const value = this[ASYNC_RESOLVED_SYMBOL][name];\n                    return value || this[ASYNC_DEFAULTS_SYMBOL][name];\n                }\n                if (name in this[ASYNC_ORIGINAL_SYMBOL]) {\n                    // It's an async prop value: look into component state\n                    const state = this[COMPONENT_SYMBOL] && this[COMPONENT_SYMBOL].internalState;\n                    if (state && state.hasAsyncProp(name)) {\n                        return state.getAsyncProp(name) || this[ASYNC_DEFAULTS_SYMBOL][name];\n                    }\n                }\n            }\n            // the prop is not supplied, or\n            // component not yet initialized/matched, return the component's default value for the prop\n            return this[ASYNC_DEFAULTS_SYMBOL][name];\n        }\n    };\n}\n// HELPER METHODS\nfunction hasOwnProperty(object, prop) {\n    return Object.prototype.hasOwnProperty.call(object, prop);\n}\n// Constructors have their super class constructors as prototypes\nfunction getOwnProperty(object, prop) {\n    return hasOwnProperty(object, prop) && object[prop];\n}\nfunction getComponentName(componentClass) {\n    const componentName = componentClass.componentName;\n    if (!componentName) {\n        log.warn(`${componentClass.name}.componentName not specified`)();\n    }\n    return componentName || componentClass.name;\n}\n", "import { COMPONENT_SYMBOL, PROP_TYPES_SYMBOL, ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL } from \"./constants.js\";\nimport { createProps } from \"./create-props.js\";\nlet counter = 0;\nexport default class Component {\n    static { this.componentName = 'Component'; }\n    static { this.defaultProps = {}; }\n    constructor(...propObjects) {\n        // Merge supplied props with default props and freeze them.\n        /* eslint-disable prefer-spread */\n        this.props = createProps(this, propObjects);\n        /* eslint-enable prefer-spread */\n        this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle\n        this.count = counter++; // Keep track of how many layer instances you are generating\n    }\n    // clone this layer with modified props\n    clone(newProps) {\n        const { props } = this;\n        // Async props cannot be copied with Object.assign, copy them separately\n        const asyncProps = {};\n        // See async props definition in create-props.js\n        for (const key in props[ASYNC_DEFAULTS_SYMBOL]) {\n            if (key in props[ASYNC_RESOLVED_SYMBOL]) {\n                asyncProps[key] = props[ASYNC_RESOLVED_SYMBOL][key];\n            }\n            else if (key in props[ASYNC_ORIGINAL_SYMBOL]) {\n                asyncProps[key] = props[ASYNC_ORIGINAL_SYMBOL][key];\n            }\n        }\n        // Some custom layer implementation may not support multiple arguments in the constructor\n        // @ts-ignore\n        return new this.constructor({ ...props, ...asyncProps, ...newProps });\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { isAsyncIterable } from \"../utils/iterable-utils.js\";\nimport { COMPONENT_SYMBOL, PROP_TYPES_SYMBOL, ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL } from \"./constants.js\";\nconst EMPTY_PROPS = Object.freeze({});\nexport default class ComponentState {\n    constructor(component) {\n        this.component = component;\n        this.asyncProps = {}; // Prop values that the layer sees\n        this.onAsyncPropUpdated = () => { };\n        this.oldProps = null; // Last props before update\n        this.oldAsyncProps = null; // Last props before update, with async values copied.\n    }\n    finalize() {\n        for (const propName in this.asyncProps) {\n            const asyncProp = this.asyncProps[propName];\n            if (asyncProp && asyncProp.type && asyncProp.type.release) {\n                // Release any resources created by transforms\n                asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);\n            }\n        }\n        this.asyncProps = {};\n        this.component = null;\n        this.resetOldProps();\n    }\n    /* Layer-facing props API */\n    getOldProps() {\n        return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;\n    }\n    resetOldProps() {\n        this.oldAsyncProps = null;\n        this.oldProps = this.component ? this.component.props : null;\n    }\n    // Checks if a prop is overridden\n    hasAsyncProp(propName) {\n        return propName in this.asyncProps;\n    }\n    // Returns value of an overriden prop\n    getAsyncProp(propName) {\n        const asyncProp = this.asyncProps[propName];\n        return asyncProp && asyncProp.resolvedValue;\n    }\n    isAsyncPropLoading(propName) {\n        if (propName) {\n            const asyncProp = this.asyncProps[propName];\n            return Boolean(asyncProp &&\n                asyncProp.pendingLoadCount > 0 &&\n                asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount);\n        }\n        for (const key in this.asyncProps) {\n            if (this.isAsyncPropLoading(key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Without changing the original prop value, swap out the data resolution under the hood\n    reloadAsyncProp(propName, value) {\n        this._watchPromise(propName, Promise.resolve(value));\n    }\n    // Updates all async/overridden props (when new props come in)\n    // Checks if urls have changed, starts loading, or removes override\n    setAsyncProps(props) {\n        this.component = props[COMPONENT_SYMBOL] || this.component;\n        // NOTE: prop param and default values are only support for testing\n        const resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};\n        const originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;\n        const defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};\n        // TODO - use async props from the layer's prop types\n        for (const propName in resolvedValues) {\n            const value = resolvedValues[propName];\n            this._createAsyncPropData(propName, defaultValues[propName]);\n            this._updateAsyncProp(propName, value);\n            // Use transformed value\n            resolvedValues[propName] = this.getAsyncProp(propName);\n        }\n        for (const propName in originalValues) {\n            const value = originalValues[propName];\n            // Makes sure a record exists for this prop\n            this._createAsyncPropData(propName, defaultValues[propName]);\n            this._updateAsyncProp(propName, value);\n        }\n    }\n    /* Placeholder methods for subclassing */\n    _fetch(propName, url) {\n        return null;\n    }\n    _onResolve(propName, value) { } // eslint-disable-line @typescript-eslint/no-empty-function\n    _onError(propName, error) { } // eslint-disable-line @typescript-eslint/no-empty-function\n    // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n    _updateAsyncProp(propName, value) {\n        if (!this._didAsyncInputValueChange(propName, value)) {\n            return;\n        }\n        // interpret value string as url and start a new load tracked by a promise\n        if (typeof value === 'string') {\n            value = this._fetch(propName, value);\n        }\n        // interprets promise and track the \"loading\"\n        if (value instanceof Promise) {\n            this._watchPromise(propName, value);\n            return;\n        }\n        if (isAsyncIterable(value)) {\n            this._resolveAsyncIterable(propName, value); // eslint-disable-line @typescript-eslint/no-floating-promises\n            return;\n        }\n        // else, normal, non-async value. Just store value for now\n        this._setPropValue(propName, value);\n    }\n    // Whenever async props are changing, we need to make a copy of oldProps\n    // otherwise the prop rewriting will affect the value both in props and oldProps.\n    // While the copy is relatively expensive, this only happens on load completion.\n    _freezeAsyncOldProps() {\n        if (!this.oldAsyncProps && this.oldProps) {\n            // 1. inherit all synchronous props from oldProps\n            // 2. reconfigure the async prop descriptors to fixed values\n            this.oldAsyncProps = Object.create(this.oldProps);\n            for (const propName in this.asyncProps) {\n                Object.defineProperty(this.oldAsyncProps, propName, {\n                    enumerable: true,\n                    value: this.oldProps[propName]\n                });\n            }\n        }\n    }\n    // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n    _didAsyncInputValueChange(propName, value) {\n        // @ts-ignore\n        const asyncProp = this.asyncProps[propName];\n        if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n            return false;\n        }\n        asyncProp.lastValue = value;\n        return true;\n    }\n    // Set normal, non-async value\n    _setPropValue(propName, value) {\n        // Save the current value before overwriting so that diffProps can access both\n        this._freezeAsyncOldProps();\n        const asyncProp = this.asyncProps[propName];\n        if (asyncProp) {\n            value = this._postProcessValue(asyncProp, value);\n            asyncProp.resolvedValue = value;\n            asyncProp.pendingLoadCount++;\n            asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n        }\n    }\n    // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n    _setAsyncPropValue(propName, value, loadCount) {\n        // Only update if loadCount is larger or equal to resolvedLoadCount\n        // otherwise a more recent load has already completed\n        const asyncProp = this.asyncProps[propName];\n        if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n            // Save the current value before overwriting so that diffProps can access both\n            this._freezeAsyncOldProps();\n            asyncProp.resolvedValue = value;\n            asyncProp.resolvedLoadCount = loadCount;\n            // Call callback to inform listener\n            this.onAsyncPropUpdated(propName, value);\n        }\n    }\n    // Tracks a promise, sets the prop when loaded, handles load count\n    _watchPromise(propName, promise) {\n        const asyncProp = this.asyncProps[propName];\n        if (asyncProp) {\n            asyncProp.pendingLoadCount++;\n            const loadCount = asyncProp.pendingLoadCount;\n            promise\n                .then(data => {\n                if (!this.component) {\n                    // This component state has been finalized\n                    return;\n                }\n                data = this._postProcessValue(asyncProp, data);\n                this._setAsyncPropValue(propName, data, loadCount);\n                this._onResolve(propName, data);\n            })\n                .catch(error => {\n                this._onError(propName, error);\n            });\n        }\n    }\n    async _resolveAsyncIterable(propName, iterable) {\n        if (propName !== 'data') {\n            // we only support data as async iterable\n            this._setPropValue(propName, iterable);\n            return;\n        }\n        const asyncProp = this.asyncProps[propName];\n        if (!asyncProp) {\n            return;\n        }\n        asyncProp.pendingLoadCount++;\n        const loadCount = asyncProp.pendingLoadCount;\n        let data = [];\n        let count = 0;\n        for await (const chunk of iterable) {\n            if (!this.component) {\n                // This component state has been finalized\n                return;\n            }\n            // @ts-expect-error (2339) dataTransform is not decared in base component props\n            const { dataTransform } = this.component.props;\n            if (dataTransform) {\n                data = dataTransform(chunk, data);\n            }\n            else {\n                data = data.concat(chunk);\n            }\n            // Used by the default _dataDiff function\n            Object.defineProperty(data, '__diff', {\n                enumerable: false,\n                value: [{ startRow: count, endRow: data.length }]\n            });\n            count = data.length;\n            this._setAsyncPropValue(propName, data, loadCount);\n        }\n        this._onResolve(propName, data);\n    }\n    // Give the app a chance to post process the loaded data\n    _postProcessValue(asyncProp, value) {\n        const propType = asyncProp.type;\n        if (propType && this.component) {\n            if (propType.release) {\n                propType.release(asyncProp.resolvedValue, propType, this.component);\n            }\n            if (propType.transform) {\n                return propType.transform(value, propType, this.component);\n            }\n        }\n        return value;\n    }\n    // Creating an asyncProp record if needed\n    _createAsyncPropData(propName, defaultValue) {\n        const asyncProp = this.asyncProps[propName];\n        if (!asyncProp) {\n            const propTypes = this.component && this.component.props[PROP_TYPES_SYMBOL];\n            // assert(defaultValue !== undefined);\n            this.asyncProps[propName] = {\n                type: propTypes && propTypes[propName],\n                lastValue: null,\n                resolvedValue: defaultValue,\n                pendingLoadCount: 0,\n                resolvedLoadCount: 0\n            };\n        }\n    }\n}\n", "// deck.gl, MIT license\nimport ComponentState from \"../lifecycle/component-state.js\";\nexport default class LayerState extends ComponentState {\n    constructor({ attributeManager, layer }) {\n        super(layer);\n        this.attributeManager = attributeManager;\n        this.needsRedraw = true;\n        this.needsUpdate = true;\n        this.subLayers = null;\n        this.usesPickingColorCache = false;\n    }\n    get layer() {\n        return this.component;\n    }\n    /* Override base Component methods with Layer-specific handling */\n    _fetch(propName, url) {\n        const layer = this.layer;\n        const fetch = layer?.props.fetch;\n        if (fetch) {\n            return fetch(url, { propName, layer });\n        }\n        return super._fetch(propName, url);\n    }\n    _onResolve(propName, value) {\n        const layer = this.layer;\n        if (layer) {\n            const onDataLoad = layer.props.onDataLoad;\n            if (propName === 'data' && onDataLoad) {\n                onDataLoad(value, { propName, layer });\n            }\n        }\n    }\n    _onError(propName, error) {\n        const layer = this.layer;\n        if (layer) {\n            layer.raiseError(error, `loading ${propName} of ${this.layer}`);\n        }\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer from \"./layer.js\";\nimport debug from \"../debug/index.js\";\nimport { flatten } from \"../utils/flatten.js\";\nimport { PROP_TYPES_SYMBOL } from \"../lifecycle/constants.js\";\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\nexport default class CompositeLayer extends Layer {\n    static { this.layerName = 'CompositeLayer'; }\n    /** `true` if this layer renders other layers */\n    get isComposite() {\n        return true;\n    }\n    /** Returns true if all async resources are loaded */\n    get isLoaded() {\n        return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n    }\n    /** Return last rendered sub layers */\n    getSubLayers() {\n        return (this.internalState && this.internalState.subLayers) || [];\n    }\n    // initializeState is usually not needed for composite layers\n    // Provide empty definition to disable check for missing definition\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    initializeState(context) { }\n    /** Updates selected state members and marks the composite layer to need rerender */\n    setState(updateObject) {\n        super.setState(updateObject);\n        // Trigger a layer update\n        // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n        // they are executed during different lifecycles.\n        // draw can be called without calling updateState (e.g. most viewport changes),\n        // while renderLayers can only be called during a recursive layer update.\n        this.setNeedsUpdate();\n    }\n    /** called to augment the info object that is bubbled up from a sublayer\n        override Layer.getPickingInfo() because decoding / setting uniform do\n        not apply to a composite layer. */\n    getPickingInfo({ info }) {\n        const { object } = info;\n        const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n        if (!isDataWrapped) {\n            return info;\n        }\n        // override object with picked data\n        info.object = object.__source.object;\n        info.index = object.__source.index;\n        return info;\n    }\n    /**\n     * Filters sub layers at draw time. Return true if the sub layer should be drawn.\n     */\n    filterSubLayer(context) {\n        return true;\n    }\n    /** Returns true if sub layer needs to be rendered */\n    shouldRenderSubLayer(subLayerId, data) {\n        return data && data.length;\n    }\n    /** Returns sub layer class for a specific sublayer */\n    getSubLayerClass(subLayerId, DefaultLayerClass) {\n        const { _subLayerProps: overridingProps } = this.props;\n        return ((overridingProps &&\n            overridingProps[subLayerId] &&\n            overridingProps[subLayerId].type) ||\n            DefaultLayerClass);\n    }\n    /** When casting user data into another format to pass to sublayers,\n        add reference to the original object and object index */\n    getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n        // @ts-ignore (TS2339) adding undefined property\n        row.__source = {\n            parent: this,\n            object: sourceObject,\n            index: sourceObjectIndex\n        };\n        return row;\n    }\n    /** Some composite layers cast user data into another format before passing to sublayers\n      We need to unwrap them before calling the accessor so that they see the original data\n      objects */\n    getSubLayerAccessor(accessor) {\n        if (typeof accessor === 'function') {\n            const objectInfo = {\n                index: -1,\n                // @ts-ignore accessing resolved data\n                data: this.props.data,\n                target: []\n            };\n            return (x, i) => {\n                if (x && x.__source) {\n                    objectInfo.index = x.__source.index;\n                    // @ts-ignore (TS2349) Out is never a function\n                    return accessor(x.__source.object, objectInfo);\n                }\n                // @ts-ignore (TS2349) Out is never a function\n                return accessor(x, i);\n            };\n        }\n        return accessor;\n    }\n    /** Returns sub layer props for a specific sublayer */\n    // eslint-disable-next-line complexity\n    getSubLayerProps(sublayerProps = {}) {\n        const { opacity, pickable, visible, parameters, getPolygonOffset, highlightedObjectIndex, autoHighlight, highlightColor, coordinateSystem, coordinateOrigin, wrapLongitude, positionFormat, modelMatrix, extensions, fetch, operation, _subLayerProps: overridingProps } = this.props;\n        const newProps = {\n            id: '',\n            updateTriggers: {},\n            opacity,\n            pickable,\n            visible,\n            parameters,\n            getPolygonOffset,\n            highlightedObjectIndex,\n            autoHighlight,\n            highlightColor,\n            coordinateSystem,\n            coordinateOrigin,\n            wrapLongitude,\n            positionFormat,\n            modelMatrix,\n            extensions,\n            fetch,\n            operation\n        };\n        const overridingSublayerProps = overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n        const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;\n        const sublayerId = sublayerProps.id || 'sublayer';\n        if (overridingSublayerProps) {\n            const propTypes = this.props[PROP_TYPES_SYMBOL];\n            const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n            for (const key in overridingSublayerProps) {\n                const propType = subLayerPropTypes[key] || propTypes[key];\n                // eslint-disable-next-line\n                if (propType && propType.type === 'accessor') {\n                    overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n                }\n            }\n        }\n        Object.assign(newProps, sublayerProps, \n        // experimental feature that allows users to override sublayer props via parent layer prop\n        overridingSublayerProps);\n        newProps.id = `${this.props.id}-${sublayerId}`;\n        newProps.updateTriggers = {\n            all: this.props.updateTriggers?.all,\n            ...sublayerProps.updateTriggers,\n            ...overridingSublayerTriggers\n        };\n        // Pass through extension props\n        // @ts-ignore (TS2532) extensions is always defined after merging with default props\n        for (const extension of extensions) {\n            const passThroughProps = extension.getSubLayerProps.call(this, extension);\n            if (passThroughProps) {\n                Object.assign(newProps, passThroughProps, {\n                    updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n                });\n            }\n        }\n        return newProps;\n    }\n    /** Update sub layers to highlight the hovered object */\n    _updateAutoHighlight(info) {\n        for (const layer of this.getSubLayers()) {\n            layer.updateAutoHighlight(info);\n        }\n    }\n    /** Override base Layer method */\n    _getAttributeManager() {\n        return null;\n    }\n    /** (Internal) Called after an update to rerender sub layers */\n    _postUpdate(updateParams, forceUpdate) {\n        // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n        let subLayers = this.internalState.subLayers;\n        const shouldUpdate = !subLayers || this.needsUpdate();\n        if (shouldUpdate) {\n            const subLayersList = this.renderLayers();\n            // Flatten the returned array, removing any null, undefined or false\n            // this allows layers to render sublayers conditionally\n            // (see CompositeLayer.renderLayers docs)\n            subLayers = flatten(subLayersList, Boolean);\n            // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n            this.internalState.subLayers = subLayers;\n        }\n        debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n        // populate reference to parent layer (this layer)\n        // NOTE: needs to be done even when reusing layers as the parent may have changed\n        for (const layer of subLayers) {\n            layer.parent = this;\n        }\n    }\n}\n", "import { Matrix4 } from '@math.gl/core';\nimport Viewport from \"./viewport.js\";\nimport { PROJECTION_MODE } from \"../lib/constants.js\";\nimport { vec3, vec4 } from '@math.gl/core';\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst RADIANS_TO_DEGREES = 180 / Math.PI;\nconst EARTH_RADIUS = 6370972;\nconst GLOBE_RADIUS = 256;\nfunction getDistanceScales() {\n    const unitsPerMeter = GLOBE_RADIUS / EARTH_RADIUS;\n    const unitsPerDegree = (Math.PI / 180) * GLOBE_RADIUS;\n    return {\n        unitsPerMeter: [unitsPerMeter, unitsPerMeter, unitsPerMeter],\n        unitsPerMeter2: [0, 0, 0],\n        metersPerUnit: [1 / unitsPerMeter, 1 / unitsPerMeter, 1 / unitsPerMeter],\n        unitsPerDegree: [unitsPerDegree, unitsPerDegree, unitsPerMeter],\n        unitsPerDegree2: [0, 0, 0],\n        degreesPerUnit: [1 / unitsPerDegree, 1 / unitsPerDegree, 1 / unitsPerMeter]\n    };\n}\nexport default class GlobeViewport extends Viewport {\n    constructor(opts = {}) {\n        const { latitude = 0, longitude = 0, zoom = 0, nearZMultiplier = 0.1, farZMultiplier = 2, resolution = 10 } = opts;\n        let { height, altitude = 1.5 } = opts;\n        height = height || 1;\n        altitude = Math.max(0.75, altitude);\n        // Calculate view matrix\n        const viewMatrix = new Matrix4().lookAt({ eye: [0, -altitude, 0], up: [0, 0, 1] });\n        const scale = Math.pow(2, zoom);\n        viewMatrix.rotateX(latitude * DEGREES_TO_RADIANS);\n        viewMatrix.rotateZ(-longitude * DEGREES_TO_RADIANS);\n        viewMatrix.scale(scale / height);\n        const halfFov = Math.atan(0.5 / altitude);\n        const relativeScale = (GLOBE_RADIUS * 2 * scale) / height;\n        super({\n            ...opts,\n            // x, y, width,\n            height,\n            // view matrix\n            viewMatrix,\n            longitude,\n            latitude,\n            zoom,\n            // projection matrix parameters\n            distanceScales: getDistanceScales(),\n            fovyRadians: halfFov * 2,\n            focalDistance: altitude,\n            near: nearZMultiplier,\n            far: Math.min(2, 1 / relativeScale + 1) * altitude * farZMultiplier\n        });\n        this.latitude = latitude;\n        this.longitude = longitude;\n        this.resolution = resolution;\n    }\n    get projectionMode() {\n        return PROJECTION_MODE.GLOBE;\n    }\n    getDistanceScales() {\n        return this.distanceScales;\n    }\n    getBounds(options = {}) {\n        const unprojectOption = { targetZ: options.z || 0 };\n        const left = this.unproject([0, this.height / 2], unprojectOption);\n        const top = this.unproject([this.width / 2, 0], unprojectOption);\n        const right = this.unproject([this.width, this.height / 2], unprojectOption);\n        const bottom = this.unproject([this.width / 2, this.height], unprojectOption);\n        if (right[0] < this.longitude)\n            right[0] += 360;\n        if (left[0] > this.longitude)\n            left[0] -= 360;\n        return [\n            Math.min(left[0], right[0], top[0], bottom[0]),\n            Math.min(left[1], right[1], top[1], bottom[1]),\n            Math.max(left[0], right[0], top[0], bottom[0]),\n            Math.max(left[1], right[1], top[1], bottom[1])\n        ];\n    }\n    unproject(xyz, { topLeft = true, targetZ } = {}) {\n        const [x, y, z] = xyz;\n        const y2 = topLeft ? y : this.height - y;\n        const { pixelUnprojectionMatrix } = this;\n        let coord;\n        if (Number.isFinite(z)) {\n            // Has depth component\n            coord = transformVector(pixelUnprojectionMatrix, [x, y2, z, 1]);\n        }\n        else {\n            // since we don't know the correct projected z value for the point,\n            // unproject two points to get a line and then find the point on that line that intersects with the sphere\n            const coord0 = transformVector(pixelUnprojectionMatrix, [x, y2, -1, 1]);\n            const coord1 = transformVector(pixelUnprojectionMatrix, [x, y2, 1, 1]);\n            const lt = ((targetZ || 0) / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n            const lSqr = vec3.sqrLen(vec3.sub([], coord0, coord1));\n            const l0Sqr = vec3.sqrLen(coord0);\n            const l1Sqr = vec3.sqrLen(coord1);\n            const sSqr = (4 * l0Sqr * l1Sqr - (lSqr - l0Sqr - l1Sqr) ** 2) / 16;\n            const dSqr = (4 * sSqr) / lSqr;\n            const r0 = Math.sqrt(l0Sqr - dSqr);\n            const dr = Math.sqrt(Math.max(0, lt * lt - dSqr));\n            const t = (r0 - dr) / Math.sqrt(lSqr);\n            coord = vec3.lerp([], coord0, coord1, t);\n        }\n        const [X, Y, Z] = this.unprojectPosition(coord);\n        if (Number.isFinite(z)) {\n            return [X, Y, Z];\n        }\n        return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    }\n    projectPosition(xyz) {\n        const [lng, lat, Z = 0] = xyz;\n        const lambda = lng * DEGREES_TO_RADIANS;\n        const phi = lat * DEGREES_TO_RADIANS;\n        const cosPhi = Math.cos(phi);\n        const D = (Z / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n        return [Math.sin(lambda) * cosPhi * D, -Math.cos(lambda) * cosPhi * D, Math.sin(phi) * D];\n    }\n    unprojectPosition(xyz) {\n        const [x, y, z] = xyz;\n        const D = vec3.len(xyz);\n        const phi = Math.asin(z / D);\n        const lambda = Math.atan2(x, -y);\n        const lng = lambda * RADIANS_TO_DEGREES;\n        const lat = phi * RADIANS_TO_DEGREES;\n        const Z = (D / GLOBE_RADIUS - 1) * EARTH_RADIUS;\n        return [lng, lat, Z];\n    }\n    projectFlat(xyz) {\n        return xyz;\n    }\n    unprojectFlat(xyz) {\n        return xyz;\n    }\n    panByPosition(coords, pixel) {\n        const fromPosition = this.unproject(pixel);\n        return {\n            longitude: coords[0] - fromPosition[0] + this.longitude,\n            latitude: coords[1] - fromPosition[1] + this.latitude\n        };\n    }\n}\nfunction transformVector(matrix, vector) {\n    const result = vec4.transformMat4([], vector, matrix);\n    vec4.scale(result, result, 1 / result[3]);\n    return result;\n}\n", "import Viewport from \"../viewports/viewport.js\";\nimport { Matrix4 } from '@math.gl/core';\nimport { pixelsToWorld, fovyToAltitude } from '@math.gl/web-mercator';\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nfunction getViewMatrix({ height, focalDistance, orbitAxis, rotationX, rotationOrbit, zoom }) {\n    // We position the camera so that one common space unit (world space unit scaled by zoom)\n    // at the target maps to one screen pixel.\n    // This is a similar technique to that used in web mercator projection\n    // By doing so we are able to convert between common space and screen space sizes efficiently\n    // in the vertex shader.\n    const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n    const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n    const viewMatrix = new Matrix4().lookAt({ eye, up });\n    viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n    if (orbitAxis === 'Z') {\n        viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n    }\n    else {\n        viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n    }\n    // When height increases, we need to increase the distance from the camera to the target to\n    // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n    // moving them further away between the near/far plane.\n    // Without modifying the default near/far planes, we instead scale down the common space to\n    // remove the distortion to the depth field.\n    const projectionScale = Math.pow(2, zoom) / height;\n    viewMatrix.scale(projectionScale);\n    return viewMatrix;\n}\nexport default class OrbitViewport extends Viewport {\n    constructor(props) {\n        const { height, projectionMatrix, fovy = 50, // For setting camera position\n        orbitAxis = 'Z', // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n        target = [0, 0, 0], // Which point is camera looking at, default origin\n        rotationX = 0, // Rotating angle around X axis\n        rotationOrbit = 0, // Rotating angle around orbit axis\n        zoom = 0 } = props;\n        const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n        super({\n            ...props,\n            // in case viewState contains longitude/latitude values,\n            // make sure that the base Viewport class does not treat this as a geospatial viewport\n            longitude: undefined,\n            viewMatrix: getViewMatrix({\n                height: height || 1,\n                focalDistance,\n                orbitAxis,\n                rotationX,\n                rotationOrbit,\n                zoom\n            }),\n            fovy,\n            focalDistance,\n            position: target,\n            zoom\n        });\n        this.projectedCenter = this.project(this.center);\n    }\n    unproject(xyz, { topLeft = true } = {}) {\n        const [x, y, z = this.projectedCenter[2]] = xyz;\n        const y2 = topLeft ? y : this.height - y;\n        const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n        return [X, Y, Z];\n    }\n    panByPosition(coords, pixel) {\n        const p0 = this.project(coords);\n        const nextCenter = [\n            this.width / 2 + p0[0] - pixel[0],\n            this.height / 2 + p0[1] - pixel[1],\n            this.projectedCenter[2]\n        ];\n        return {\n            target: this.unproject(nextCenter)\n        };\n    }\n}\n", "import Viewport from \"../viewports/viewport.js\";\nimport { Matrix4, clamp, vec2 } from '@math.gl/core';\nimport { pixelsToWorld } from '@math.gl/web-mercator';\nconst viewMatrix = new Matrix4().lookAt({ eye: [0, 0, 1] });\nfunction getProjectionMatrix({ width, height, near, far, padding }) {\n    let left = -width / 2;\n    let right = width / 2;\n    let bottom = -height / 2;\n    let top = height / 2;\n    if (padding) {\n        const { left: l = 0, right: r = 0, top: t = 0, bottom: b = 0 } = padding;\n        const offsetX = clamp((l + width - r) / 2, 0, width) - width / 2;\n        const offsetY = clamp((t + height - b) / 2, 0, height) - height / 2;\n        left -= offsetX;\n        right -= offsetX;\n        bottom += offsetY;\n        top += offsetY;\n    }\n    return new Matrix4().ortho({\n        left,\n        right,\n        bottom,\n        top,\n        near,\n        far\n    });\n}\nexport default class OrthographicViewport extends Viewport {\n    constructor(props) {\n        const { width, height, near = 0.1, far = 1000, zoom = 0, target = [0, 0, 0], padding = null, flipY = true } = props;\n        const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n        const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n        const zoom_ = Math.min(zoomX, zoomY);\n        const scale = Math.pow(2, zoom_);\n        let distanceScales;\n        if (zoomX !== zoomY) {\n            const scaleX = Math.pow(2, zoomX);\n            const scaleY = Math.pow(2, zoomY);\n            distanceScales = {\n                unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n                metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n            };\n        }\n        super({\n            ...props,\n            // in case viewState contains longitude/latitude values,\n            // make sure that the base Viewport class does not treat this as a geospatial viewport\n            longitude: undefined,\n            position: target,\n            viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n            projectionMatrix: getProjectionMatrix({\n                width: width || 1,\n                height: height || 1,\n                padding,\n                near,\n                far\n            }),\n            zoom: zoom_,\n            distanceScales\n        });\n    }\n    projectFlat([X, Y]) {\n        const { unitsPerMeter } = this.distanceScales;\n        return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n    }\n    unprojectFlat([x, y]) {\n        const { metersPerUnit } = this.distanceScales;\n        return [x * metersPerUnit[0], y * metersPerUnit[1]];\n    }\n    /* Needed by LinearInterpolator */\n    panByPosition(coords, pixel) {\n        const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n        const toLocation = this.projectFlat(coords);\n        const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n        const newCenter = vec2.add([], this.center, translate);\n        return { target: this.unprojectFlat(newCenter) };\n    }\n}\n", "import Viewport from \"../viewports/viewport.js\";\nimport { getMeterZoom } from '@math.gl/web-mercator';\nimport { Matrix4, _SphericalCoordinates as SphericalCoordinates } from '@math.gl/core';\nexport default class FirstPersonViewport extends Viewport {\n    constructor(props) {\n        // TODO - push direction handling into Matrix4.lookAt\n        const { longitude, latitude, modelMatrix, bearing = 0, pitch = 0, up = [0, 0, 1] } = props;\n        // Always calculate direction from bearing and pitch\n        const spherical = new SphericalCoordinates({\n            bearing,\n            // Avoid \"pixel project matrix not invertible\" error\n            pitch: pitch === -90 ? 0.0001 : 90 + pitch\n        });\n        const dir = spherical.toVector3().normalize();\n        // Direction is relative to model coordinates, of course\n        const center = modelMatrix ? new Matrix4(modelMatrix).transformAsVector(dir) : dir;\n        // Just the direction. All the positioning is done in viewport.js\n        const zoom = Number.isFinite(latitude) ? getMeterZoom({ latitude: latitude }) : 0;\n        const scale = Math.pow(2, zoom);\n        const viewMatrix = new Matrix4().lookAt({ eye: [0, 0, 0], center, up }).scale(scale);\n        super({\n            ...props,\n            zoom,\n            viewMatrix\n        });\n        this.latitude = latitude;\n        this.longitude = longitude;\n    }\n}\n", "import Controller from \"./controller.js\";\nimport ViewState from \"./view-state.js\";\nimport { mod } from \"../utils/math-utils.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nimport { Vector3, _SphericalCoordinates as SphericalCoordinates, clamp } from '@math.gl/core';\nconst MOVEMENT_SPEED = 20;\nconst PAN_SPEED = 500;\nclass FirstPersonState extends ViewState {\n    constructor(options) {\n        const { \n        /* Viewport arguments */\n        width, // Width of viewport\n        height, // Height of viewport\n        // Position and orientation\n        position = [0, 0, 0], // typically in meters from anchor point\n        bearing = 0, // Rotation around y axis\n        pitch = 0, // Rotation around x axis\n        // Geospatial anchor\n        longitude = null, latitude = null, maxPitch = 90, minPitch = -90, \n        // Model state when the rotate operation first started\n        startRotatePos, startBearing, startPitch, startZoomPosition, startPanPos, startPanPosition } = options;\n        super({\n            width,\n            height,\n            position,\n            bearing,\n            pitch,\n            longitude,\n            latitude,\n            maxPitch,\n            minPitch\n        }, {\n            startRotatePos,\n            startBearing,\n            startPitch,\n            startZoomPosition,\n            startPanPos,\n            startPanPosition\n        });\n        this.makeViewport = options.makeViewport;\n    }\n    /* Public API */\n    /**\n     * Start panning\n     * @param {[Number, Number]} pos - position on screen where the pointer grabs\n     */\n    panStart({ pos }) {\n        const { position } = this.getViewportProps();\n        return this._getUpdatedState({\n            startPanPos: pos,\n            startPanPosition: position\n        });\n    }\n    /**\n     * Pan\n     * @param {[Number, Number]} pos - position on screen where the pointer is\n     */\n    pan({ pos }) {\n        if (!pos) {\n            return this;\n        }\n        const { startPanPos = [0, 0], startPanPosition = [0, 0] } = this.getState();\n        const { width, height, bearing, pitch } = this.getViewportProps();\n        const deltaScaleX = (PAN_SPEED * (pos[0] - startPanPos[0])) / width;\n        const deltaScaleY = (PAN_SPEED * (pos[1] - startPanPos[1])) / height;\n        const up = new SphericalCoordinates({ bearing, pitch });\n        const forward = new SphericalCoordinates({ bearing, pitch: -90 });\n        const yDirection = up.toVector3().normalize();\n        const xDirection = forward.toVector3().cross(yDirection).normalize();\n        return this._getUpdatedState({\n            position: new Vector3(startPanPosition)\n                .add(xDirection.scale(deltaScaleX))\n                .add(yDirection.scale(deltaScaleY))\n        });\n    }\n    /**\n     * End panning\n     * Must call if `panStart()` was called\n     */\n    panEnd() {\n        return this._getUpdatedState({\n            startPanPos: null,\n            startPanPosition: null\n        });\n    }\n    /**\n     * Start rotating\n     * @param {[Number, Number]} pos - position on screen where the pointer grabs\n     */\n    rotateStart({ pos }) {\n        return this._getUpdatedState({\n            startRotatePos: pos,\n            startBearing: this.getViewportProps().bearing,\n            startPitch: this.getViewportProps().pitch\n        });\n    }\n    /**\n     * Rotate\n     * @param {[Number, Number]} pos - position on screen where the pointer is\n     */\n    rotate({ pos, deltaAngleX = 0, deltaAngleY = 0 }) {\n        const { startRotatePos, startBearing, startPitch } = this.getState();\n        const { width, height } = this.getViewportProps();\n        if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n            return this;\n        }\n        let newRotation;\n        if (pos) {\n            const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n            const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n            newRotation = {\n                bearing: startBearing - deltaScaleX * 180,\n                pitch: startPitch - deltaScaleY * 90\n            };\n        }\n        else {\n            newRotation = {\n                bearing: startBearing - deltaAngleX,\n                pitch: startPitch - deltaAngleY\n            };\n        }\n        return this._getUpdatedState(newRotation);\n    }\n    /**\n     * End rotating\n     * Must call if `rotateStart()` was called\n     */\n    rotateEnd() {\n        return this._getUpdatedState({\n            startRotatePos: null,\n            startBearing: null,\n            startPitch: null\n        });\n    }\n    /**\n     * Start zooming\n     * @param {[Number, Number]} pos - position on screen where the pointer grabs\n     */\n    zoomStart() {\n        return this._getUpdatedState({\n            startZoomPosition: this.getViewportProps().position\n        });\n    }\n    /**\n     * Zoom\n     * @param {[Number, Number]} pos - position on screen where the current center is\n     * @param {[Number, Number]} startPos - the center position at\n     *   the start of the operation. Must be supplied of `zoomStart()` was not called\n     * @param {Number} scale - a number between [0, 1] specifying the accumulated\n     *   relative scale.\n     */\n    zoom({ pos, scale }) {\n        const viewportProps = this.getViewportProps();\n        const startZoomPosition = this.getState().startZoomPosition || viewportProps.position;\n        const viewport = this.makeViewport(viewportProps);\n        const { projectionMatrix, width } = viewport;\n        const fovxRadians = 2.0 * Math.atan(1.0 / projectionMatrix[0]);\n        const angle = fovxRadians * (pos[0] / width - 0.5);\n        const direction = this.getDirection(true);\n        return this._move(direction.rotateZ({ radians: -angle }), Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n    }\n    /**\n     * End zooming\n     * Must call if `zoomStart()` was called\n     */\n    zoomEnd() {\n        return this._getUpdatedState({\n            startZoomPosition: null\n        });\n    }\n    moveLeft(speed = MOVEMENT_SPEED) {\n        const direction = this.getDirection(true);\n        return this._move(direction.rotateZ({ radians: Math.PI / 2 }), speed);\n    }\n    moveRight(speed = MOVEMENT_SPEED) {\n        const direction = this.getDirection(true);\n        return this._move(direction.rotateZ({ radians: -Math.PI / 2 }), speed);\n    }\n    // forward\n    moveUp(speed = MOVEMENT_SPEED) {\n        const direction = this.getDirection(true);\n        return this._move(direction, speed);\n    }\n    // backward\n    moveDown(speed = MOVEMENT_SPEED) {\n        const direction = this.getDirection(true);\n        return this._move(direction.negate(), speed);\n    }\n    rotateLeft(speed = 15) {\n        return this._getUpdatedState({\n            bearing: this.getViewportProps().bearing - speed\n        });\n    }\n    rotateRight(speed = 15) {\n        return this._getUpdatedState({\n            bearing: this.getViewportProps().bearing + speed\n        });\n    }\n    rotateUp(speed = 10) {\n        return this._getUpdatedState({\n            pitch: this.getViewportProps().pitch + speed\n        });\n    }\n    rotateDown(speed = 10) {\n        return this._getUpdatedState({\n            pitch: this.getViewportProps().pitch - speed\n        });\n    }\n    zoomIn(speed = MOVEMENT_SPEED) {\n        return this._move(new Vector3(0, 0, 1), speed);\n    }\n    zoomOut(speed = MOVEMENT_SPEED) {\n        return this._move(new Vector3(0, 0, -1), speed);\n    }\n    // shortest path between two view states\n    shortestPathFrom(viewState) {\n        const fromProps = viewState.getViewportProps();\n        const props = { ...this.getViewportProps() };\n        const { bearing, longitude } = props;\n        if (Math.abs(bearing - fromProps.bearing) > 180) {\n            props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n        }\n        if (longitude !== null &&\n            fromProps.longitude !== null &&\n            Math.abs(longitude - fromProps.longitude) > 180) {\n            props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n        }\n        return props;\n    }\n    /* Private methods */\n    _move(direction, speed, fromPosition = this.getViewportProps().position) {\n        const delta = direction.scale(speed);\n        return this._getUpdatedState({\n            position: new Vector3(fromPosition).add(delta)\n        });\n    }\n    getDirection(use2D = false) {\n        const spherical = new SphericalCoordinates({\n            bearing: this.getViewportProps().bearing,\n            pitch: use2D ? 90 : 90 + this.getViewportProps().pitch\n        });\n        const direction = spherical.toVector3().normalize();\n        return direction;\n    }\n    _getUpdatedState(newProps) {\n        // Update _viewportProps\n        return new FirstPersonState({\n            makeViewport: this.makeViewport,\n            ...this.getViewportProps(),\n            ...this.getState(),\n            ...newProps\n        });\n    }\n    // Apply any constraints (mathematical or defined by _viewportProps) to map state\n    applyConstraints(props) {\n        // Ensure pitch and zoom are within specified range\n        const { pitch, maxPitch, minPitch, longitude, bearing } = props;\n        props.pitch = clamp(pitch, minPitch, maxPitch);\n        // Normalize degrees\n        if (longitude !== null && (longitude < -180 || longitude > 180)) {\n            props.longitude = mod(longitude + 180, 360) - 180;\n        }\n        if (bearing < -180 || bearing > 180) {\n            props.bearing = mod(bearing + 180, 360) - 180;\n        }\n        return props;\n    }\n}\nexport default class FirstPersonController extends Controller {\n    constructor() {\n        super(...arguments);\n        this.ControllerState = FirstPersonState;\n        this.transition = {\n            transitionDuration: 300,\n            transitionInterpolator: new LinearInterpolator(['position', 'pitch', 'bearing'])\n        };\n    }\n}\n", "import View from \"./view.js\";\nimport FirstPersonViewport from \"../viewports/first-person-viewport.js\";\nimport FirstPersonController from \"../controllers/first-person-controller.js\";\nexport default class FirstPersonView extends View {\n    static { this.displayName = 'FirstPersonView'; }\n    constructor(props = {}) {\n        super(props);\n    }\n    get ViewportType() {\n        return FirstPersonViewport;\n    }\n    get ControllerType() {\n        return FirstPersonController;\n    }\n}\n", "import { clamp } from '@math.gl/core';\nimport Controller from \"./controller.js\";\nimport ViewState from \"./view-state.js\";\nimport { mod } from \"../utils/math-utils.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nexport class OrbitState extends ViewState {\n    constructor(options) {\n        const { \n        /* Viewport arguments */\n        width, // Width of viewport\n        height, // Height of viewport\n        rotationX = 0, // Rotation around x axis\n        rotationOrbit = 0, // Rotation around orbit axis\n        target = [0, 0, 0], zoom = 0, \n        /* Viewport constraints */\n        minRotationX = -90, maxRotationX = 90, minZoom = -Infinity, maxZoom = Infinity, \n        /** Interaction states, required to calculate change during transform */\n        // Model state when the pan operation first started\n        startPanPosition, \n        // Model state when the rotate operation first started\n        startRotatePos, startRotationX, startRotationOrbit, \n        // Model state when the zoom operation first started\n        startZoomPosition, startZoom } = options;\n        super({\n            width,\n            height,\n            rotationX,\n            rotationOrbit,\n            target,\n            zoom,\n            minRotationX,\n            maxRotationX,\n            minZoom,\n            maxZoom\n        }, {\n            startPanPosition,\n            startRotatePos,\n            startRotationX,\n            startRotationOrbit,\n            startZoomPosition,\n            startZoom\n        });\n        this.makeViewport = options.makeViewport;\n    }\n    /**\n     * Start panning\n     * @param {[Number, Number]} pos - position on screen where the pointer grabs\n     */\n    panStart({ pos }) {\n        return this._getUpdatedState({\n            startPanPosition: this._unproject(pos)\n        });\n    }\n    /**\n     * Pan\n     * @param {[Number, Number]} pos - position on screen where the pointer is\n     */\n    pan({ pos, startPosition }) {\n        const startPanPosition = this.getState().startPanPosition || startPosition;\n        if (!startPanPosition) {\n            return this;\n        }\n        const viewport = this.makeViewport(this.getViewportProps());\n        const newProps = viewport.panByPosition(startPanPosition, pos);\n        return this._getUpdatedState(newProps);\n    }\n    /**\n     * End panning\n     * Must call if `panStart()` was called\n     */\n    panEnd() {\n        return this._getUpdatedState({\n            startPanPosition: null\n        });\n    }\n    /**\n     * Start rotating\n     * @param {[Number, Number]} pos - position on screen where the pointer grabs\n     */\n    rotateStart({ pos }) {\n        return this._getUpdatedState({\n            startRotatePos: pos,\n            startRotationX: this.getViewportProps().rotationX,\n            startRotationOrbit: this.getViewportProps().rotationOrbit\n        });\n    }\n    /**\n     * Rotate\n     * @param {[Number, Number]} pos - position on screen where the pointer is\n     */\n    rotate({ pos, deltaAngleX = 0, deltaAngleY = 0 }) {\n        const { startRotatePos, startRotationX, startRotationOrbit } = this.getState();\n        const { width, height } = this.getViewportProps();\n        if (!startRotatePos || startRotationX === undefined || startRotationOrbit === undefined) {\n            return this;\n        }\n        let newRotation;\n        if (pos) {\n            let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n            const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n            if (startRotationX < -90 || startRotationX > 90) {\n                // When looking at the \"back\" side of the scene, invert horizontal drag\n                // so that the camera movement follows user input\n                deltaScaleX *= -1;\n            }\n            newRotation = {\n                rotationX: startRotationX + deltaScaleY * 180,\n                rotationOrbit: startRotationOrbit + deltaScaleX * 180\n            };\n        }\n        else {\n            newRotation = {\n                rotationX: startRotationX + deltaAngleY,\n                rotationOrbit: startRotationOrbit + deltaAngleX\n            };\n        }\n        return this._getUpdatedState(newRotation);\n    }\n    /**\n     * End rotating\n     * Must call if `rotateStart()` was called\n     */\n    rotateEnd() {\n        return this._getUpdatedState({\n            startRotationX: null,\n            startRotationOrbit: null\n        });\n    }\n    // shortest path between two view states\n    shortestPathFrom(viewState) {\n        const fromProps = viewState.getViewportProps();\n        const props = { ...this.getViewportProps() };\n        const { rotationOrbit } = props;\n        if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n            props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n        }\n        return props;\n    }\n    /**\n     * Start zooming\n     * @param {[Number, Number]} pos - position on screen where the pointer grabs\n     */\n    zoomStart({ pos }) {\n        return this._getUpdatedState({\n            startZoomPosition: this._unproject(pos),\n            startZoom: this.getViewportProps().zoom\n        });\n    }\n    /**\n     * Zoom\n     * @param {[Number, Number]} pos - position on screen where the current target is\n     * @param {[Number, Number]} startPos - the target position at\n     *   the start of the operation. Must be supplied of `zoomStart()` was not called\n     * @param {Number} scale - a number between [0, 1] specifying the accumulated\n     *   relative scale.\n     */\n    zoom({ pos, startPos, scale }) {\n        let { startZoom, startZoomPosition } = this.getState();\n        if (!startZoomPosition) {\n            // We have two modes of zoom:\n            // scroll zoom that are discrete events (transform from the current zoom level),\n            // and pinch zoom that are continuous events (transform from the zoom level when\n            // pinch started).\n            // If startZoom state is defined, then use the startZoom state;\n            // otherwise assume discrete zooming\n            startZoom = this.getViewportProps().zoom;\n            startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n        }\n        if (!startZoomPosition) {\n            return this;\n        }\n        const newZoom = this._calculateNewZoom({ scale, startZoom });\n        const zoomedViewport = this.makeViewport({ ...this.getViewportProps(), zoom: newZoom });\n        return this._getUpdatedState({\n            zoom: newZoom,\n            ...zoomedViewport.panByPosition(startZoomPosition, pos)\n        });\n    }\n    /**\n     * End zooming\n     * Must call if `zoomStart()` was called\n     */\n    zoomEnd() {\n        return this._getUpdatedState({\n            startZoomPosition: null,\n            startZoom: null\n        });\n    }\n    zoomIn(speed = 2) {\n        return this._getUpdatedState({\n            zoom: this._calculateNewZoom({ scale: speed })\n        });\n    }\n    zoomOut(speed = 2) {\n        return this._getUpdatedState({\n            zoom: this._calculateNewZoom({ scale: 1 / speed })\n        });\n    }\n    moveLeft(speed = 50) {\n        return this._panFromCenter([-speed, 0]);\n    }\n    moveRight(speed = 50) {\n        return this._panFromCenter([speed, 0]);\n    }\n    moveUp(speed = 50) {\n        return this._panFromCenter([0, -speed]);\n    }\n    moveDown(speed = 50) {\n        return this._panFromCenter([0, speed]);\n    }\n    rotateLeft(speed = 15) {\n        return this._getUpdatedState({\n            rotationOrbit: this.getViewportProps().rotationOrbit - speed\n        });\n    }\n    rotateRight(speed = 15) {\n        return this._getUpdatedState({\n            rotationOrbit: this.getViewportProps().rotationOrbit + speed\n        });\n    }\n    rotateUp(speed = 10) {\n        return this._getUpdatedState({\n            rotationX: this.getViewportProps().rotationX - speed\n        });\n    }\n    rotateDown(speed = 10) {\n        return this._getUpdatedState({\n            rotationX: this.getViewportProps().rotationX + speed\n        });\n    }\n    /* Private methods */\n    _unproject(pos) {\n        const viewport = this.makeViewport(this.getViewportProps());\n        // @ts-ignore\n        return pos && viewport.unproject(pos);\n    }\n    // Calculates new zoom\n    _calculateNewZoom({ scale, startZoom }) {\n        const { maxZoom, minZoom } = this.getViewportProps();\n        if (startZoom === undefined) {\n            startZoom = this.getViewportProps().zoom;\n        }\n        const zoom = startZoom + Math.log2(scale);\n        return clamp(zoom, minZoom, maxZoom);\n    }\n    _panFromCenter(offset) {\n        const { width, height, target } = this.getViewportProps();\n        return this.pan({\n            startPosition: target,\n            pos: [width / 2 + offset[0], height / 2 + offset[1]]\n        });\n    }\n    _getUpdatedState(newProps) {\n        // @ts-ignore\n        return new this.constructor({\n            makeViewport: this.makeViewport,\n            ...this.getViewportProps(),\n            ...this.getState(),\n            ...newProps\n        });\n    }\n    // Apply any constraints (mathematical or defined by _viewportProps) to map state\n    applyConstraints(props) {\n        // Ensure zoom is within specified range\n        const { maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit } = props;\n        props.zoom = Array.isArray(zoom)\n            ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n            : clamp(zoom, minZoom, maxZoom);\n        props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n        if (rotationOrbit < -180 || rotationOrbit > 180) {\n            props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n        }\n        return props;\n    }\n}\nexport default class OrbitController extends Controller {\n    constructor() {\n        super(...arguments);\n        this.ControllerState = OrbitState;\n        this.transition = {\n            transitionDuration: 300,\n            transitionInterpolator: new LinearInterpolator({\n                transitionProps: {\n                    compare: ['target', 'zoom', 'rotationX', 'rotationOrbit'],\n                    required: ['target', 'zoom']\n                }\n            })\n        };\n    }\n}\n", "import View from \"./view.js\";\nimport OrbitViewport from \"../viewports/orbit-viewport.js\";\nimport OrbitController from \"../controllers/orbit-controller.js\";\nexport default class OrbitView extends View {\n    static { this.displayName = 'OrbitView'; }\n    constructor(props = {}) {\n        super(props);\n        this.props.orbitAxis = props.orbitAxis || 'Z';\n    }\n    get ViewportType() {\n        return OrbitViewport;\n    }\n    get ControllerType() {\n        return OrbitController;\n    }\n}\n", "import { clamp } from '@math.gl/core';\nimport Controller from \"./controller.js\";\nimport { OrbitState } from \"./orbit-controller.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nclass OrthographicState extends OrbitState {\n    constructor(props) {\n        super(props);\n        this.zoomAxis = props.zoomAxis || 'all';\n    }\n    _calculateNewZoom({ scale, startZoom }) {\n        const { maxZoom, minZoom } = this.getViewportProps();\n        if (startZoom === undefined) {\n            startZoom = this.getViewportProps().zoom;\n        }\n        let deltaZoom = Math.log2(scale);\n        if (Array.isArray(startZoom)) {\n            let [newZoomX, newZoomY] = startZoom;\n            switch (this.zoomAxis) {\n                case 'X':\n                    // Scale x only\n                    newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n                    break;\n                case 'Y':\n                    // Scale y only\n                    newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n                    break;\n                default:\n                    // Lock aspect ratio\n                    let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n                    if (z < minZoom) {\n                        deltaZoom += minZoom - z;\n                    }\n                    z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n                    if (z > maxZoom) {\n                        deltaZoom += maxZoom - z;\n                    }\n                    newZoomX += deltaZoom;\n                    newZoomY += deltaZoom;\n            }\n            return [newZoomX, newZoomY];\n        }\n        // Ignore `zoomAxis`\n        // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n        // So if zoom is a number (legacy use case), new zoom still has to be a number\n        return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n    }\n}\nexport default class OrthographicController extends Controller {\n    constructor() {\n        super(...arguments);\n        this.ControllerState = OrthographicState;\n        this.transition = {\n            transitionDuration: 300,\n            transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n        };\n        this.dragMode = 'pan';\n    }\n    _onPanRotate() {\n        // No rotation in orthographic view\n        return false;\n    }\n}\n", "import View from \"./view.js\";\nimport OrthographicViewport from \"../viewports/orthographic-viewport.js\";\nimport OrthographicController from \"../controllers/orthographic-controller.js\";\nexport default class OrthographicView extends View {\n    static { this.displayName = 'OrthographicView'; }\n    constructor(props = {}) {\n        super(props);\n    }\n    get ViewportType() {\n        return OrthographicViewport;\n    }\n    get ControllerType() {\n        return OrthographicController;\n    }\n}\n", "import { clamp } from '@math.gl/core';\nimport Controller from \"./controller.js\";\nimport { MapState } from \"./map-controller.js\";\nimport { mod } from \"../utils/math-utils.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nclass GlobeState extends MapState {\n    // Apply any constraints (mathematical or defined by _viewportProps) to map state\n    applyConstraints(props) {\n        // Ensure zoom is within specified range\n        const { maxZoom, minZoom, zoom } = props;\n        props.zoom = clamp(zoom, minZoom, maxZoom);\n        const { longitude, latitude } = props;\n        if (longitude < -180 || longitude > 180) {\n            props.longitude = mod(longitude + 180, 360) - 180;\n        }\n        props.latitude = clamp(latitude, -89, 89);\n        return props;\n    }\n}\nexport default class GlobeController extends Controller {\n    constructor() {\n        super(...arguments);\n        this.ControllerState = GlobeState;\n        this.transition = {\n            transitionDuration: 300,\n            transitionInterpolator: new LinearInterpolator(['longitude', 'latitude', 'zoom'])\n        };\n        this.dragMode = 'pan';\n    }\n    setProps(props) {\n        super.setProps(props);\n        // TODO - support pitching?\n        this.dragRotate = false;\n        this.touchRotate = false;\n    }\n}\n", "import View from \"./view.js\";\nimport GlobeViewport from \"../viewports/globe-viewport.js\";\nimport GlobeController from \"../controllers/globe-controller.js\";\nexport default class GlobeView extends View {\n    static { this.displayName = 'GlobeView'; }\n    constructor(props = {}) {\n        super(props);\n    }\n    get ViewportType() {\n        return GlobeViewport;\n    }\n    get ControllerType() {\n        return GlobeController;\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { deepEqual } from \"../utils/deep-equal.js\";\nexport default class LayerExtension {\n    static { this.defaultProps = {}; }\n    static { this.extensionName = 'LayerExtension'; }\n    static get componentName() {\n        return Object.prototype.hasOwnProperty.call(this, 'extensionName') ? this.extensionName : '';\n    }\n    constructor(opts) {\n        if (opts) {\n            this.opts = opts;\n        }\n    }\n    /** Returns true if two extensions are equivalent */\n    equals(extension) {\n        if (this === extension) {\n            return true;\n        }\n        // Compare extensions shallowly\n        return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts, 1);\n    }\n    /** Only called if attached to a primitive layer */\n    getShaders(extension) {\n        return null;\n    }\n    /** Only called if attached to a CompositeLayer */\n    getSubLayerProps(extension) {\n        const { defaultProps } = extension.constructor;\n        const newProps = {\n            updateTriggers: {}\n        };\n        /* eslint-disable max-depth */\n        for (const key in defaultProps) {\n            if (key in this.props) {\n                const propDef = defaultProps[key];\n                const propValue = this.props[key];\n                newProps[key] = propValue;\n                if (propDef && propDef.type === 'accessor') {\n                    newProps.updateTriggers[key] = this.props.updateTriggers[key];\n                    if (typeof propValue === 'function') {\n                        newProps[key] = this.getSubLayerAccessor(propValue);\n                    }\n                }\n            }\n        }\n        /* eslint-enable max-depth */\n        return newProps;\n    }\n    /* eslint-disable @typescript-eslint/no-empty-function */\n    initializeState(context, extension) { }\n    updateState(params, extension) { }\n    onNeedsRedraw(extension) { }\n    getNeedsPickingBuffer(extension) {\n        return false;\n    }\n    draw(params, extension) { }\n    finalizeState(context, extension) { }\n}\n", "import TransitionInterpolator from \"./transition-interpolator.js\";\nimport { lerp } from '@math.gl/core';\nimport { flyToViewport, getFlyToDuration } from '@math.gl/web-mercator';\nconst LINEARLY_INTERPOLATED_PROPS = {\n    bearing: 0,\n    pitch: 0,\n    position: [0, 0, 0]\n};\nconst DEFAULT_OPTS = {\n    speed: 1.2,\n    curve: 1.414\n};\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements \u201CSmooth and efficient zooming and panning.\u201D algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class FlyToInterpolator extends TransitionInterpolator {\n    constructor(opts = {}) {\n        super({\n            compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n            extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n            required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n        });\n        this.opts = { ...DEFAULT_OPTS, ...opts };\n    }\n    interpolateProps(startProps, endProps, t) {\n        const viewport = flyToViewport(startProps, endProps, t, this.opts);\n        // Linearly interpolate 'bearing', 'pitch' and 'position'.\n        // If they are not supplied, they are interpreted as zeros in viewport calculation\n        // (fallback defined in WebMercatorViewport)\n        // Because there is no guarantee that the current controller's ViewState normalizes\n        // these props, safe guard is needed to avoid generating NaNs\n        for (const key in LINEARLY_INTERPOLATED_PROPS) {\n            viewport[key] = lerp(startProps[key] || LINEARLY_INTERPOLATED_PROPS[key], endProps[key] || LINEARLY_INTERPOLATED_PROPS[key], t);\n        }\n        return viewport;\n    }\n    // computes the transition duration\n    getDuration(startProps, endProps) {\n        let { transitionDuration } = endProps;\n        if (transitionDuration === 'auto') {\n            // auto calculate duration based on start and end props\n            transitionDuration = getFlyToDuration(startProps, endProps, this.opts);\n        }\n        return transitionDuration;\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { createIterable, getAccessorFromBuffer } from \"./iterable-utils.js\";\nimport defaultTypedArrayManager from \"./typed-array-manager.js\";\nimport assert from \"./assert.js\";\nimport { Buffer } from '@luma.gl/core';\nexport default class Tesselator {\n    constructor(opts) {\n        this.indexStarts = [0];\n        this.vertexStarts = [0];\n        this.vertexCount = 0;\n        this.instanceCount = 0;\n        const { attributes = {} } = opts;\n        this.typedArrayManager = defaultTypedArrayManager;\n        this.attributes = {};\n        this._attributeDefs = attributes;\n        this.opts = opts;\n        this.updateGeometry(opts);\n    }\n    /* Public methods */\n    updateGeometry(opts) {\n        Object.assign(this.opts, opts);\n        const { data, buffers = {}, getGeometry, geometryBuffer, positionFormat, dataChanged, normalize = true } = this.opts;\n        this.data = data;\n        this.getGeometry = getGeometry;\n        this.positionSize =\n            // @ts-ignore (2339) when geometryBuffer is a luma Buffer, size falls back to positionFormat\n            (geometryBuffer && geometryBuffer.size) || (positionFormat === 'XY' ? 2 : 3);\n        this.buffers = buffers;\n        this.normalize = normalize;\n        // Handle external logical value\n        if (geometryBuffer) {\n            assert(data.startIndices); // binary data missing startIndices\n            this.getGeometry = this.getGeometryFromBuffer(geometryBuffer);\n            if (!normalize) {\n                // skip packing and set attribute value directly\n                // TODO - avoid mutating user-provided object\n                buffers.vertexPositions = geometryBuffer;\n            }\n        }\n        this.geometryBuffer = buffers.vertexPositions;\n        if (Array.isArray(dataChanged)) {\n            // is partial update\n            for (const dataRange of dataChanged) {\n                this._rebuildGeometry(dataRange);\n            }\n        }\n        else {\n            this._rebuildGeometry();\n        }\n    }\n    updatePartialGeometry({ startRow, endRow }) {\n        this._rebuildGeometry({ startRow, endRow });\n    }\n    getGeometryFromBuffer(geometryBuffer) {\n        const value = geometryBuffer.value || geometryBuffer;\n        if (!ArrayBuffer.isView(value)) {\n            // Cannot read binary geometries\n            return null;\n        }\n        // @ts-ignore (2322) NumericArray not assignable to GeometryT\n        return getAccessorFromBuffer(value, {\n            size: this.positionSize,\n            offset: geometryBuffer.offset,\n            stride: geometryBuffer.stride,\n            startIndices: this.data.startIndices\n        });\n    }\n    /* Private utility methods */\n    _allocate(instanceCount, copy) {\n        // allocate attributes\n        const { attributes, buffers, _attributeDefs, typedArrayManager } = this;\n        for (const name in _attributeDefs) {\n            if (name in buffers) {\n                // Use external buffer\n                typedArrayManager.release(attributes[name]);\n                attributes[name] = null;\n            }\n            else {\n                const def = _attributeDefs[name];\n                // If dataRange is supplied, this is a partial update.\n                // In case we need to reallocate the typed array, it will need the old values copied\n                // before performing partial update.\n                def.copy = copy;\n                attributes[name] = typedArrayManager.allocate(attributes[name], instanceCount, def);\n            }\n        }\n    }\n    /**\n     * Visit all objects\n     * `data` is expected to be an iterable consistent with the base Layer expectation\n     */\n    _forEachGeometry(visitor, startRow, endRow) {\n        const { data, getGeometry } = this;\n        const { iterable, objectInfo } = createIterable(data, startRow, endRow);\n        for (const object of iterable) {\n            objectInfo.index++;\n            const geometry = getGeometry ? getGeometry(object, objectInfo) : null;\n            visitor(geometry, objectInfo.index);\n        }\n    }\n    /* eslint-disable complexity,max-statements */\n    _rebuildGeometry(dataRange) {\n        if (!this.data) {\n            return;\n        }\n        let { indexStarts, vertexStarts, instanceCount } = this;\n        const { data, geometryBuffer } = this;\n        const { startRow = 0, endRow = Infinity } = dataRange || {};\n        const normalizedData = {};\n        if (!dataRange) {\n            // Full update - regenerate buffer layout from scratch\n            indexStarts = [0];\n            vertexStarts = [0];\n        }\n        if (this.normalize || !geometryBuffer) {\n            this._forEachGeometry((geometry, dataIndex) => {\n                const normalizedGeometry = geometry && this.normalizeGeometry(geometry);\n                normalizedData[dataIndex] = normalizedGeometry;\n                vertexStarts[dataIndex + 1] =\n                    vertexStarts[dataIndex] +\n                        (normalizedGeometry ? this.getGeometrySize(normalizedGeometry) : 0);\n            }, startRow, endRow);\n            // count instances\n            instanceCount = vertexStarts[vertexStarts.length - 1];\n        }\n        else {\n            // assume user provided data is already normalized\n            vertexStarts = data.startIndices;\n            instanceCount = vertexStarts[data.length] || 0;\n            if (ArrayBuffer.isView(geometryBuffer)) {\n                instanceCount = instanceCount || geometryBuffer.length / this.positionSize;\n            }\n            else if (geometryBuffer instanceof Buffer) {\n                const byteStride = this.positionSize * 4;\n                instanceCount = instanceCount || geometryBuffer.byteLength / byteStride;\n            }\n            else if (geometryBuffer.buffer) {\n                const byteStride = geometryBuffer.stride || this.positionSize * 4;\n                instanceCount = instanceCount || geometryBuffer.buffer.byteLength / byteStride;\n            }\n            else if (geometryBuffer.value) {\n                const bufferValue = geometryBuffer.value;\n                const elementStride = \n                // @ts-ignore (2339) if stride is not specified, will fall through to positionSize\n                geometryBuffer.stride / bufferValue.BYTES_PER_ELEMENT || this.positionSize;\n                instanceCount = instanceCount || bufferValue.length / elementStride;\n            }\n        }\n        // allocate attributes\n        this._allocate(instanceCount, Boolean(dataRange));\n        this.indexStarts = indexStarts;\n        this.vertexStarts = vertexStarts;\n        this.instanceCount = instanceCount;\n        // @ts-ignore (2739) context will be populated in the loop\n        const context = {};\n        this._forEachGeometry((geometry, dataIndex) => {\n            const normalizedGeometry = normalizedData[dataIndex] || geometry;\n            context.vertexStart = vertexStarts[dataIndex];\n            context.indexStart = indexStarts[dataIndex];\n            const vertexEnd = dataIndex < vertexStarts.length - 1 ? vertexStarts[dataIndex + 1] : instanceCount;\n            context.geometrySize = vertexEnd - vertexStarts[dataIndex];\n            context.geometryIndex = dataIndex;\n            this.updateGeometryAttributes(normalizedGeometry, context);\n        }, startRow, endRow);\n        this.vertexCount = indexStarts[indexStarts.length - 1];\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_shadertools", "import_core", "viewMatrix", "vs", "import_core", "vs", "fs", "VECTOR_TO_POINT_MATRIX", "viewMatrix", "import_shadertools", "import_core", "DEFAULT_LIGHT_COLOR", "DEFAULT_LIGHT_INTENSITY", "idCount", "import_core", "DEFAULT_SHADOW_COLOR", "viewMatrix", "count", "import_core", "count", "import_core", "import_web_mercator", "ZERO_VECTOR", "viewMatrix", "import_web_mercator", "import_core", "import_core", "import_web_mercator", "DEFAULT_COORDINATE_ORIGIN", "DEFAULT_LIGHT_COLOR", "DEFAULT_LIGHT_INTENSITY", "idCount", "import_shadertools", "module", "fs", "module", "fs", "import_engine", "count", "import_core", "viewport", "module", "Controller", "import_core", "import_core", "import_core", "import_web_mercator", "import_core", "import_engine", "import_constants", "import_stats", "noop", "module", "import_core", "import_core", "import_engine", "import_constants", "vs", "import_engine", "getTransform", "vs", "fs", "import_core", "import_core", "TRANSITION_TYPES", "transition", "module", "import_core", "defaultProps", "defaultProps", "count", "import_web_mercator", "import_core", "EMPTY_ARRAY", "defaultProps", "picking", "TRACE_RENDER_LAYERS", "import_core", "import_core", "DEGREES_TO_RADIANS", "getDistanceScales", "unitsPerMeter", "viewMatrix", "import_core", "import_web_mercator", "DEGREES_TO_RADIANS", "getViewMatrix", "viewMatrix", "import_core", "import_web_mercator", "unitsPerMeter", "import_web_mercator", "import_core", "SphericalCoordinates", "viewMatrix", "import_core", "SphericalCoordinates", "import_core", "import_core", "import_core", "defaultProps", "import_core", "import_web_mercator", "import_core"]
}
