import { default as H3TileLayer } from "./layers/h3-tile-layer.js";
import { default as _PointLabelLayer } from "./layers/point-label-layer.js";
import { default as QuadbinTileLayer } from "./layers/quadbin-tile-layer.js";
import { default as RasterTileLayer } from "./layers/raster-tile-layer.js";
import { default as VectorTileLayer } from "./layers/vector-tile-layer.js";
declare const CARTO_LAYERS: {
    H3TileLayer: typeof H3TileLayer;
    _PointLabelLayer: typeof _PointLabelLayer;
    QuadbinTileLayer: typeof QuadbinTileLayer;
    RasterTileLayer: typeof RasterTileLayer;
    VectorTileLayer: typeof VectorTileLayer;
};
export { CARTO_LAYERS, H3TileLayer, _PointLabelLayer, QuadbinTileLayer, RasterTileLayer, VectorTileLayer };
export { default as BASEMAP } from "./basemap.js";
export { default as colorBins } from "./style/color-bins-style.js";
export { default as colorCategories } from "./style/color-categories-style.js";
export { default as colorContinuous } from "./style/color-continuous-style.js";
export { CartoAPIError, fetchMap, query } from "./api/index.js";
export type { APIErrorContext, FetchMapOptions, Format, MapType, RequestType, QueryParameters, QueryOptions } from "./api/index.js";
import { boundaryQuerySource, boundaryTableSource, h3QuerySource, h3TableSource, h3TilesetSource, rasterSource, quadbinQuerySource, quadbinTableSource, quadbinTilesetSource, vectorQuerySource, vectorTableSource, vectorTilesetSource, SOURCE_DEFAULTS } from "./sources/index.js";
declare const CARTO_SOURCES: {
    boundaryQuerySource: (options: import("./sources/boundary-query-source").BoundaryQuerySourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    boundaryTableSource: (options: import("./sources/boundary-table-source").BoundaryTableSourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    h3QuerySource: (options: import("./sources/h3-query-source").H3QuerySourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    h3TableSource: (options: import("./sources/h3-table-source").H3TableSourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    h3TilesetSource: (options: import("./sources/h3-tileset-source").H3TilesetSourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    rasterSource: (options: import("./sources/raster-source").RasterSourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    quadbinQuerySource: (options: import("./sources/quadbin-query-source").QuadbinQuerySourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    quadbinTableSource: (options: import("./sources/quadbin-table-source").QuadbinTableSourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    quadbinTilesetSource: (options: import("./sources/quadbin-tileset-source").QuadbinTilesetSourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    vectorQuerySource: (options: import("./sources/vector-query-source").VectorQuerySourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    vectorTableSource: (options: import("./sources/vector-table-source").VectorTableSourceOptions) => Promise<import("./sources/types").TilejsonResult>;
    vectorTilesetSource: (options: import("./sources/vector-tileset-source").VectorTilesetSourceOptions) => Promise<import("./sources/types").TilejsonResult>;
};
export { boundaryQuerySource, boundaryTableSource, h3QuerySource, h3TableSource, h3TilesetSource, rasterSource, quadbinQuerySource, quadbinTableSource, quadbinTilesetSource, vectorQuerySource, vectorTableSource, vectorTilesetSource, CARTO_SOURCES, SOURCE_DEFAULTS };
export type { GeojsonResult, JsonResult, TilejsonResult, SourceOptions, QuerySourceOptions, TableSourceOptions, TilesetSourceOptions, BoundaryQuerySourceOptions, BoundaryTableSourceOptions, H3QuerySourceOptions, H3TableSourceOptions, H3TilesetSourceOptions, RasterSourceOptions, QuadbinQuerySourceOptions, QuadbinTableSourceOptions, QuadbinTilesetSourceOptions, VectorQuerySourceOptions, VectorTableSourceOptions, VectorTilesetSourceOptions } from "./sources/index.js";
//# sourceMappingURL=index.d.ts.map