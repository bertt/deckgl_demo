import { CartoAPIError } from "./carto-api-error.js";
import { DEFAULT_HEADERS, DEFAULT_PARAMETERS, MAX_GET_LENGTH } from "./common.js";
/**
 * Simple encode parameter
 */
function encodeParameter(name, value) {
    return `${name}=${encodeURIComponent(value)}`;
}
const REQUEST_CACHE = new Map();
export async function requestWithParameters({ baseUrl, parameters, headers: customHeaders, errorContext }) {
    const key = createCacheKey(baseUrl, parameters || {}, customHeaders || {});
    if (REQUEST_CACHE.has(key)) {
        return REQUEST_CACHE.get(key);
    }
    const url = parameters ? createURLWithParameters(baseUrl, parameters) : baseUrl;
    const headers = { ...DEFAULT_HEADERS, ...customHeaders };
    /* global fetch */
    const fetchPromise = url.length > MAX_GET_LENGTH
        ? fetch(baseUrl, { method: 'POST', body: JSON.stringify(parameters), headers })
        : fetch(url, { headers });
    let response;
    const jsonPromise = fetchPromise
        .then((_response) => {
        response = _response;
        return response.json();
    })
        .then((json) => {
        if (!response || !response.ok) {
            throw new Error(json.error);
        }
        return json;
    })
        .catch((error) => {
        REQUEST_CACHE.delete(key);
        throw new CartoAPIError(error, errorContext, response);
    });
    REQUEST_CACHE.set(key, jsonPromise);
    return jsonPromise;
}
function createCacheKey(baseUrl, parameters, headers) {
    const parameterEntries = Object.entries(parameters).sort(([a], [b]) => (a > b ? 1 : -1));
    const headerEntries = Object.entries(headers).sort(([a], [b]) => (a > b ? 1 : -1));
    return JSON.stringify({ baseUrl, parameters: parameterEntries, headers: headerEntries });
}
function createURLWithParameters(baseUrl, parameters) {
    const encodedParameters = Object.entries({ ...DEFAULT_PARAMETERS, ...parameters }).map(([key, value]) => {
        return encodeParameter(key, value);
    });
    return `${baseUrl}?${encodedParameters.join('&')}`;
}
