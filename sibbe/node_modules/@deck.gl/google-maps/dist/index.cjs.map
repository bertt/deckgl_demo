{
  "version": 3,
  "sources": ["index.js", "google-maps-overlay.js", "utils.js"],
  "sourcesContent": ["export { default as GoogleMapsOverlay } from \"./google-maps-overlay.js\";\n", "/* global google */\nimport { GL } from '@luma.gl/constants';\nimport { createDeckInstance, destroyDeckInstance, getViewPropsFromOverlay, getViewPropsFromCoordinateTransformer } from \"./utils.js\";\nconst HIDE_ALL_LAYERS = () => false;\nconst GL_STATE = {\n    depthMask: true,\n    depthTest: true,\n    blend: true,\n    blendFunc: [770, 771, 1, 771],\n    blendEquation: 32774\n};\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() { }\nconst defaultProps = {\n    interleaved: true\n};\nexport default class GoogleMapsOverlay {\n    constructor(props) {\n        this.props = {};\n        this._map = null;\n        this._deck = null;\n        this._overlay = null;\n        this.setProps({ ...defaultProps, ...props });\n    }\n    /* Public API */\n    /** Add/remove the overlay from a map. */\n    setMap(map) {\n        if (map === this._map) {\n            return;\n        }\n        const { VECTOR, UNINITIALIZED } = google.maps.RenderingType;\n        if (this._map) {\n            if (!map && this._map.getRenderingType() === VECTOR && this.props.interleaved) {\n                this._overlay.requestRedraw();\n            }\n            this._overlay?.setMap(null);\n            this._map = null;\n        }\n        if (map) {\n            this._map = map;\n            const renderingType = map.getRenderingType();\n            if (renderingType !== UNINITIALIZED) {\n                this._createOverlay(map);\n            }\n            else {\n                map.addListener('renderingtype_changed', () => {\n                    this._createOverlay(map);\n                });\n            }\n        }\n    }\n    /**\n     * Update (partial) props.\n     */\n    setProps(props) {\n        Object.assign(this.props, props);\n        if (this._deck) {\n            const canvas = this._deck.getCanvas();\n            if (props.style && canvas?.parentElement) {\n                const parentStyle = canvas.parentElement.style;\n                Object.assign(parentStyle, props.style);\n                props.style = null;\n            }\n            this._deck.setProps(props);\n        }\n    }\n    /** Equivalent of `deck.pickObject`. */\n    pickObject(params) {\n        return this._deck && this._deck.pickObject(params);\n    }\n    /** Equivalent of `deck.pickObjects`.  */\n    pickMultipleObjects(params) {\n        return this._deck && this._deck.pickMultipleObjects(params);\n    }\n    /** Equivalent of `deck.pickMultipleObjects`. */\n    pickObjects(params) {\n        return this._deck && this._deck.pickObjects(params);\n    }\n    /** Remove the overlay and release all underlying resources. */\n    finalize() {\n        this.setMap(null);\n        if (this._deck) {\n            destroyDeckInstance(this._deck);\n            this._deck = null;\n        }\n    }\n    /* Private API */\n    _createOverlay(map) {\n        const { interleaved } = this.props;\n        const { VECTOR, UNINITIALIZED } = google.maps.RenderingType;\n        const renderingType = map.getRenderingType();\n        if (renderingType === UNINITIALIZED) {\n            return;\n        }\n        const isVectorMap = renderingType === VECTOR && google.maps.WebGLOverlayView;\n        const OverlayView = isVectorMap ? google.maps.WebGLOverlayView : google.maps.OverlayView;\n        const overlay = new OverlayView();\n        if (overlay instanceof google.maps.WebGLOverlayView) {\n            if (interleaved) {\n                overlay.onAdd = noop;\n                overlay.onContextRestored = this._onContextRestored.bind(this);\n                overlay.onDraw = this._onDrawVectorInterleaved.bind(this);\n            }\n            else {\n                overlay.onAdd = this._onAdd.bind(this);\n                overlay.onContextRestored = noop;\n                overlay.onDraw = this._onDrawVectorOverlay.bind(this);\n            }\n            overlay.onContextLost = this._onContextLost.bind(this);\n        }\n        else {\n            overlay.onAdd = this._onAdd.bind(this);\n            overlay.draw = this._onDrawRaster.bind(this);\n        }\n        overlay.onRemove = this._onRemove.bind(this);\n        this._overlay = overlay;\n        this._overlay.setMap(map);\n    }\n    _onAdd() {\n        // @ts-ignore (TS2345) map is defined at this stage\n        this._deck = createDeckInstance(this._map, this._overlay, this._deck, this.props);\n    }\n    _onContextRestored({ gl }) {\n        if (!this._map || !this._overlay) {\n            return;\n        }\n        const _customRender = () => {\n            if (this._overlay) {\n                this._overlay.requestRedraw();\n            }\n        };\n        const deck = createDeckInstance(this._map, this._overlay, this._deck, {\n            gl,\n            _customRender,\n            ...this.props\n        });\n        this._deck = deck;\n        // By default, animationLoop._renderFrame invokes\n        // animationLoop.onRender. We override this to wrap\n        // in withParameters so we don't modify the GL state\n        // @ts-ignore accessing protected member\n        const animationLoop = deck.animationLoop;\n        animationLoop._renderFrame = () => {\n            const ab = gl.getParameter(34964);\n            // @ts-expect-error accessing protected member\n            const device = deck.device;\n            device.withParametersWebGL({}, () => {\n                animationLoop.props.onRender(animationLoop.animationProps);\n            });\n            gl.bindBuffer(34962, ab);\n        };\n    }\n    _onContextLost() {\n        // TODO this isn't working\n        if (this._deck) {\n            destroyDeckInstance(this._deck);\n            this._deck = null;\n        }\n    }\n    _onRemove() {\n        this._deck?.setProps({ layerFilter: HIDE_ALL_LAYERS });\n    }\n    _onDrawRaster() {\n        if (!this._deck || !this._map) {\n            return;\n        }\n        const deck = this._deck;\n        const { width, height, left, top, ...rest } = getViewPropsFromOverlay(this._map, this._overlay);\n        const canvas = deck.getCanvas();\n        if (canvas?.parentElement) {\n            const parentStyle = canvas.parentElement.style;\n            parentStyle.left = `${left}px`;\n            parentStyle.top = `${top}px`;\n        }\n        const altitude = 10000;\n        deck.setProps({\n            width,\n            height,\n            // @ts-expect-error altitude is accepted by WebMercatorViewport but not exposed by type\n            viewState: { altitude, ...rest }\n        });\n        // Deck is initialized\n        deck.redraw();\n    }\n    // Vector code path\n    _onDrawVectorInterleaved({ gl, transformer }) {\n        if (!this._deck || !this._map) {\n            return;\n        }\n        const deck = this._deck;\n        deck.setProps({\n            ...getViewPropsFromCoordinateTransformer(this._map, transformer),\n            // Using external gl context - do not set css size\n            width: null,\n            height: null\n        });\n        if (deck.isInitialized) {\n            // @ts-expect-error\n            const device = deck.device;\n            // As an optimization, some renders are to an separate framebuffer\n            // which we need to pass onto deck\n            const _framebuffer = device.getParametersWebGL(36006);\n            // @ts-expect-error\n            deck.setProps({ _framebuffer });\n            // With external gl context, animation loop doesn't resize webgl-canvas and thus fails to\n            // calculate corrext pixel ratio. Force this manually.\n            device.getCanvasContext().resize();\n            // Camera changed, will trigger a map repaint right after this\n            // Clear any change flag triggered by setting viewState so that deck does not request\n            // a second repaint\n            deck.needsRedraw({ clearRedrawFlags: true });\n            // Workaround for bug in Google maps where viewport state is wrong\n            // TODO remove once fixed\n            device.setParametersWebGL({\n                viewport: [0, 0, gl.canvas.width, gl.canvas.height],\n                scissor: [0, 0, gl.canvas.width, gl.canvas.height],\n                stencilFunc: [519, 0, 255, 519, 0, 255]\n            });\n            device.withParametersWebGL(GL_STATE, () => {\n                deck._drawLayers('google-vector', {\n                    clearCanvas: false\n                });\n            });\n        }\n    }\n    _onDrawVectorOverlay({ transformer }) {\n        if (!this._deck || !this._map) {\n            return;\n        }\n        const deck = this._deck;\n        deck.setProps({\n            ...getViewPropsFromCoordinateTransformer(this._map, transformer)\n        });\n        deck.redraw();\n    }\n}\n", "/* global google, document */\nimport { Deck, MapView } from '@deck.gl/core';\nimport { Matrix4, Vector2 } from '@math.gl/core';\n// https://en.wikipedia.org/wiki/Web_Mercator_projection#Formulas\nconst MAX_LATITUDE = 85.05113;\n/**\n * Get a new deck instance\n * @param map (google.maps.Map) - The parent Map instance\n * @param overlay (google.maps.OverlayView) - A maps Overlay instance\n * @param [deck] (Deck) - a previously created instances\n */\nexport function createDeckInstance(map, overlay, deck, props) {\n    if (deck) {\n        if (deck.userData._googleMap === map) {\n            return deck;\n        }\n        // deck instance was created for a different map\n        destroyDeckInstance(deck);\n    }\n    const eventListeners = {\n        click: null,\n        rightclick: null,\n        dblclick: null,\n        mousemove: null,\n        mouseout: null\n    };\n    const newDeck = new Deck({\n        ...props,\n        useDevicePixels: props.interleaved ? true : props.useDevicePixels,\n        style: props.interleaved ? null : { pointerEvents: 'none' },\n        parent: getContainer(overlay, props.style),\n        views: new MapView({ repeat: true }),\n        initialViewState: {\n            longitude: 0,\n            latitude: 0,\n            zoom: 1\n        },\n        controller: false\n    });\n    // Register event listeners\n    for (const eventType in eventListeners) {\n        eventListeners[eventType] = map.addListener(eventType, evt => handleMouseEvent(newDeck, eventType, evt));\n    }\n    // Attach userData directly to Deck instance\n    newDeck.userData._googleMap = map;\n    newDeck.userData._eventListeners = eventListeners;\n    return newDeck;\n}\n// Create a container that will host the deck canvas and tooltip\nfunction getContainer(overlay, style) {\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    Object.assign(container.style, style);\n    // The DOM structure has a different structure depending on whether\n    // the Google map is rendered as vector or raster\n    if ('getPanes' in overlay) {\n        overlay.getPanes()?.overlayLayer.appendChild(container);\n    }\n    else {\n        overlay.getMap()?.getDiv().appendChild(container);\n    }\n    return container;\n}\n/**\n * Safely remove a deck instance\n * @param deck (Deck) - a previously created instances\n */\nexport function destroyDeckInstance(deck) {\n    const { _eventListeners: eventListeners } = deck.userData;\n    // Unregister event listeners\n    for (const eventType in eventListeners) {\n        // Check that event listener was set before trying to remove.\n        if (eventListeners[eventType]) {\n            eventListeners[eventType].remove();\n        }\n    }\n    deck.finalize();\n}\n/* eslint-disable max-statements */\n/**\n * Get the current view state\n * @param map (google.maps.Map) - The parent Map instance\n * @param overlay (google.maps.OverlayView) - A maps Overlay instance\n */\n// eslint-disable-next-line complexity\nexport function getViewPropsFromOverlay(map, overlay) {\n    const { width, height } = getMapSize(map);\n    // Canvas position relative to draggable map's container depends on\n    // overlayView's projection, not the map's. Have to use the center of the\n    // map for this, not the top left, for the same reason as above.\n    const projection = overlay.getProjection();\n    const bounds = map.getBounds();\n    if (!bounds) {\n        return { width, height, left: 0, top: 0 };\n    }\n    const ne = bounds.getNorthEast();\n    const sw = bounds.getSouthWest();\n    const topRight = projection.fromLatLngToDivPixel(ne);\n    const bottomLeft = projection.fromLatLngToDivPixel(sw);\n    // google maps places overlays in a container anchored at the map center.\n    // the container CSS is manipulated during dragging.\n    // We need to update left/top of the deck canvas to match the base map.\n    const centerLngLat = pixelToLngLat(projection, width / 2, height / 2);\n    const centerH = new google.maps.LatLng(0, centerLngLat[0]);\n    const centerContainerPx = projection.fromLatLngToContainerPixel(centerH);\n    const centerDivPx = projection.fromLatLngToDivPixel(centerH);\n    if (!topRight || !bottomLeft || !centerDivPx || !centerContainerPx) {\n        return { width, height, left: 0, top: 0 };\n    }\n    const leftOffset = Math.round(centerDivPx.x - centerContainerPx.x);\n    let topOffset = centerDivPx.y - centerContainerPx.y;\n    const topLngLat = pixelToLngLat(projection, width / 2, 0);\n    const bottomLngLat = pixelToLngLat(projection, width / 2, height);\n    // Compute fractional center.\n    let latitude = centerLngLat[1];\n    const longitude = centerLngLat[0];\n    // Adjust vertical offset - limit latitude\n    if (Math.abs(latitude) > MAX_LATITUDE) {\n        latitude = latitude > 0 ? MAX_LATITUDE : -MAX_LATITUDE;\n        const center = new google.maps.LatLng(latitude, longitude);\n        const centerPx = projection.fromLatLngToContainerPixel(center);\n        // @ts-ignore (TS2531) Object is possibly 'null'\n        topOffset += centerPx.y - height / 2;\n    }\n    topOffset = Math.round(topOffset);\n    // Compute fractional bearing\n    const delta = new Vector2(topLngLat).sub(bottomLngLat);\n    let bearing = (180 * delta.verticalAngle()) / Math.PI;\n    if (bearing < 0)\n        bearing += 360;\n    // Maps sometimes returns undefined instead of 0\n    const heading = map.getHeading() || 0;\n    let zoom = map.getZoom() - 1;\n    let scale;\n    if (bearing === 0) {\n        // At full world view (always unrotated) simply compare height, as diagonal\n        // is incorrect due to multiple world copies\n        scale = height ? (bottomLeft.y - topRight.y) / height : 1;\n    }\n    else if (bearing === heading) {\n        // Fractional zoom calculation only correct when bearing is not animating\n        const viewDiagonal = new Vector2([topRight.x, topRight.y])\n            .sub([bottomLeft.x, bottomLeft.y])\n            .len();\n        const mapDiagonal = new Vector2([width, -height]).len();\n        scale = mapDiagonal ? viewDiagonal / mapDiagonal : 1;\n    }\n    // When resizing aggressively, occasionally ne and sw are the same points\n    // See https://github.com/visgl/deck.gl/issues/4218\n    zoom += Math.log2(scale || 1);\n    return {\n        width,\n        height,\n        left: leftOffset,\n        top: topOffset,\n        zoom,\n        bearing,\n        pitch: map.getTilt(),\n        latitude,\n        longitude\n    };\n}\n/* eslint-enable max-statements */\n/**\n * Get the current view state\n * @param map (google.maps.Map) - The parent Map instance\n * @param transformer (google.maps.CoordinateTransformer) - A CoordinateTransformer instance\n */\nexport function getViewPropsFromCoordinateTransformer(map, transformer) {\n    const { width, height } = getMapSize(map);\n    const { center, heading: bearing, tilt: pitch, zoom } = transformer.getCameraParams();\n    // Match Google projection matrix\n    const fovy = 25;\n    const aspect = height ? width / height : 1;\n    // Match depth range (crucial for correct z-sorting)\n    const near = 0.75;\n    const far = 300000000000000;\n    // const far = Infinity;\n    const projectionMatrix = new Matrix4().perspective({\n        fovy: (fovy * Math.PI) / 180,\n        aspect,\n        near,\n        far\n    });\n    const focalDistance = 0.5 * projectionMatrix[5];\n    return {\n        width,\n        height,\n        viewState: {\n            altitude: focalDistance,\n            bearing,\n            latitude: center.lat(),\n            longitude: center.lng(),\n            pitch,\n            projectionMatrix,\n            repeat: true,\n            zoom: zoom - 1\n        }\n    };\n}\nfunction getMapSize(map) {\n    // The map fills the container div unless it's in fullscreen mode\n    // at which point the first child of the container is promoted\n    const container = map.getDiv().firstChild;\n    return {\n        // @ts-ignore (TS2531) Object is possibly 'null'\n        width: container.offsetWidth,\n        // @ts-ignore (TS2531) Object is possibly 'null'\n        height: container.offsetHeight\n    };\n}\nfunction pixelToLngLat(projection, x, y) {\n    const point = new google.maps.Point(x, y);\n    const latLng = projection.fromContainerPixelToLatLng(point);\n    // @ts-ignore (TS2531) Object is possibly 'null'\n    return [latLng.lng(), latLng.lat()];\n}\nfunction getEventPixel(event, deck) {\n    if (event.pixel) {\n        return event.pixel;\n    }\n    // event.pixel may not exist when clicking on a POI\n    // https://developers.google.com/maps/documentation/javascript/reference/map#MouseEvent\n    const point = deck.getViewports()[0].project([event.latLng.lng(), event.latLng.lat()]);\n    return {\n        x: point[0],\n        y: point[1]\n    };\n}\n// Triggers picking on a mouse event\nfunction handleMouseEvent(deck, type, event) {\n    if (!deck.isInitialized) {\n        return;\n    }\n    const mockEvent = {\n        type,\n        offsetCenter: getEventPixel(event, deck),\n        srcEvent: event\n    };\n    switch (type) {\n        case 'click':\n        case 'rightclick':\n            mockEvent.type = 'click';\n            mockEvent.tapCount = 1;\n            // Hack: because we do not listen to pointer down, perform picking now\n            deck._onPointerDown(mockEvent);\n            deck._onEvent(mockEvent);\n            break;\n        case 'dblclick':\n            mockEvent.type = 'click';\n            mockEvent.tapCount = 2;\n            deck._onEvent(mockEvent);\n            break;\n        case 'mousemove':\n            mockEvent.type = 'pointermove';\n            deck._onPointerMove(mockEvent);\n            break;\n        case 'mouseout':\n            mockEvent.type = 'pointerleave';\n            deck._onPointerMove(mockEvent);\n            break;\n        default:\n            return;\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_core"]
}
