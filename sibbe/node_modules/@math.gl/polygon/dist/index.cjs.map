{
  "version": 3,
  "sources": ["index.js", "polygon.js", "polygon-utils.js", "earcut.js", "utils.js", "lineclip.js", "cut-by-grid.js", "cut-by-mercator-bounds.js"],
  "sourcesContent": ["export { Polygon } from \"./polygon.js\";\nexport { getPolygonSignedArea, getPolygonWindingDirection, forEachSegmentInPolygon, modifyPolygonWindingDirection, WINDING } from \"./polygon-utils.js\";\nexport { earcut } from \"./earcut.js\";\nexport { clipPolygon, clipPolyline } from \"./lineclip.js\";\nexport { cutPolygonByGrid, cutPolylineByGrid } from \"./cut-by-grid.js\";\nexport { cutPolylineByMercatorBounds, cutPolygonByMercatorBounds } from \"./cut-by-mercator-bounds.js\";\n/** @deprecated */\nexport { Polygon as _Polygon } from \"./polygon.js\";\n", "/* eslint-disable no-undef, no-console */\nimport { isArray } from '@math.gl/core';\nimport { getPolygonSignedArea, forEachSegmentInPolygon, modifyPolygonWindingDirection, getPolygonSignedAreaPoints, forEachSegmentInPolygonPoints, modifyPolygonWindingDirectionPoints } from \"./polygon-utils.js\";\nexport class Polygon {\n    constructor(points, options = {}) {\n        this.points = points;\n        this.isFlatArray = !isArray(points[0]);\n        this.options = {\n            start: options.start || 0,\n            end: options.end || points.length,\n            size: options.size || 2,\n            isClosed: options.isClosed\n        };\n        Object.freeze(this);\n    }\n    /**\n     * Returns signed area of the polygon.\n     * @returns Signed area of the polygon.\n     */\n    getSignedArea() {\n        if (this.isFlatArray)\n            return getPolygonSignedArea(this.points, this.options);\n        return getPolygonSignedAreaPoints(this.points, this.options);\n    }\n    /**\n     * Returns absolute area of the polygon.\n     * @returns Absolute area of the polygon.\n     */\n    getArea() {\n        return Math.abs(this.getSignedArea());\n    }\n    /**\n     * Returns winding direction of the polygon.\n     * @returns Winding direction of the polygon. 1 is for clockwise, -1 for counterclockwise winding direction.\n     */\n    getWindingDirection() {\n        return Math.sign(this.getSignedArea());\n    }\n    /**\n     * Calls the visitor callback for each segment in the polygon.\n     * @param visitor A callback to call for each segment.\n     */\n    forEachSegment(visitor) {\n        if (this.isFlatArray) {\n            forEachSegmentInPolygon(this.points, \n            // eslint-disable-next-line max-params\n            (x1, y1, x2, y2, i1, i2) => {\n                // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n                visitor([x1, y1], [x2, y2], i1, i2);\n            }, this.options);\n        }\n        else {\n            forEachSegmentInPolygonPoints(this.points, visitor, this.options);\n        }\n    }\n    /**\n     * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n     * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n     * @return Returns true if the winding direction was changed.\n     */\n    modifyWindingDirection(direction) {\n        if (this.isFlatArray) {\n            return modifyPolygonWindingDirection(this.points, direction, this.options);\n        }\n        return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);\n    }\n}\n", "/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\nimport { equals } from '@math.gl/core';\nexport const WINDING = {\n    CLOCKWISE: 1,\n    COUNTER_CLOCKWISE: -1\n};\n/**\n * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n * Note: points are modified in-place.\n * @param points An array that represents points of the polygon.\n * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n * @param options Parameters of the polygon.\n * @return Returns true if the winding direction was changed.\n */\nexport function modifyPolygonWindingDirection(points, direction, options = {}) {\n    const windingDirection = getPolygonWindingDirection(points, options);\n    if (windingDirection !== direction) {\n        reversePolygon(points, options);\n        return true;\n    }\n    return false;\n}\n/**\n * Returns winding direction of the polygon.\n * @param points An array that represents points of the polygon.\n * @param options Parameters of the polygon.\n * @returns Winding direction of the polygon.\n */\nexport function getPolygonWindingDirection(points, options = {}) {\n    return Math.sign(getPolygonSignedArea(points, options));\n}\nexport const DimIndex = {\n    x: 0,\n    y: 1,\n    z: 2\n};\n/**\n * Returns signed area of the polygon.\n * @param points An array that represents points of the polygon.\n * @param options Parameters of the polygon.\n * @returns Signed area of the polygon.\n * https://en.wikipedia.org/wiki/Shoelace_formula\n */\nexport function getPolygonSignedArea(points, options = {}) {\n    const { start = 0, end = points.length, plane = 'xy' } = options;\n    const dim = options.size || 2;\n    let area = 0;\n    const i0 = DimIndex[plane[0]];\n    const i1 = DimIndex[plane[1]];\n    for (let i = start, j = end - dim; i < end; i += dim) {\n        area += (points[i + i0] - points[j + i0]) * (points[i + i1] + points[j + i1]);\n        j = i;\n    }\n    return area / 2;\n}\n/**\n * Calls the visitor callback for each segment in the polygon.\n * @param points An array that represents points of the polygon\n * @param visitor A callback to call for each segment.\n * @param options Parameters of the polygon.\n */\nexport function forEachSegmentInPolygon(points, visitor, options = {}) {\n    const { start = 0, end = points.length, size = 2, isClosed } = options;\n    const numPoints = (end - start) / size;\n    for (let i = 0; i < numPoints - 1; ++i) {\n        visitor(points[start + i * size], points[start + i * size + 1], points[start + (i + 1) * size], points[start + (i + 1) * size + 1], i, i + 1);\n    }\n    const endPointIndex = start + (numPoints - 1) * size;\n    const isClosedEx = isClosed ||\n        (equals(points[start], points[endPointIndex]) &&\n            equals(points[start + 1], points[endPointIndex + 1]));\n    if (!isClosedEx) {\n        visitor(points[endPointIndex], points[endPointIndex + 1], points[start], points[start + 1], numPoints - 1, 0);\n    }\n}\nfunction reversePolygon(points, options) {\n    const { start = 0, end = points.length, size = 2 } = options;\n    const numPoints = (end - start) / size;\n    const numSwaps = Math.floor(numPoints / 2);\n    for (let i = 0; i < numSwaps; ++i) {\n        const b1 = start + i * size;\n        const b2 = start + (numPoints - 1 - i) * size;\n        for (let j = 0; j < size; ++j) {\n            const tmp = points[b1 + j];\n            points[b1 + j] = points[b2 + j];\n            points[b2 + j] = tmp;\n        }\n    }\n}\n/**\n * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n * Note: points are modified in-place.\n * @param points Array of points that represent the polygon.\n * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n * @param options Parameters of the polygon.\n * @return Returns true if the winding direction was changed.\n */\nexport function modifyPolygonWindingDirectionPoints(points, direction, options = {}) {\n    const currentDirection = getPolygonWindingDirectionPoints(points, options);\n    if (currentDirection !== direction) {\n        points.reverse();\n        return true;\n    }\n    return false;\n}\n/**\n * Returns winding direction of the polygon.\n * @param points Array of points that represent the polygon.\n * @param options Parameters of the polygon.\n * @returns Winding direction of the polygon.\n */\nexport function getPolygonWindingDirectionPoints(points, options = {}) {\n    return Math.sign(getPolygonSignedAreaPoints(points, options));\n}\n/**\n * Returns signed area of the polygon.\n * @param points Array of points that represent the polygon.\n * @param options Parameters of the polygon.\n * @returns Signed area of the polygon.\n */\nexport function getPolygonSignedAreaPoints(points, options = {}) {\n    // https://en.wikipedia.org/wiki/Shoelace_formula\n    const { start = 0, end = points.length, plane = 'xy' } = options;\n    let area = 0;\n    const i0 = DimIndex[plane[0]];\n    const i1 = DimIndex[plane[1]];\n    for (let i = start, j = end - 1; i < end; ++i) {\n        area += (points[i][i0] - points[j][i0]) * (points[i][i1] + points[j][i1]);\n        j = i;\n    }\n    return area / 2;\n}\n/**\n * Calls visitor callback for each segment in the polygon.\n * @param points Array of points that represent the polygon.\n * @param visitor A callback to call for each segment.\n * @param options Parameters of the polygon.\n */\nexport function forEachSegmentInPolygonPoints(points, visitor, options = {}) {\n    const { start = 0, end = points.length, isClosed } = options;\n    for (let i = start; i < end - 1; ++i) {\n        visitor(points[i], points[i + 1], i, i + 1);\n    }\n    const isClosedEx = isClosed || equals(points[end - 1], points[0]);\n    if (!isClosedEx) {\n        visitor(points[end - 1], points[0], end - 1, 0);\n    }\n}\n", "/*\n  Adapted from https://github.com/mapbox/earcut to allow passing in\n  of outline and hole areas using the `areas` parameter. As the\n  areas are calcuted as part of classifying the polygon rings\n  we can pass them in again to avoid recomputation\n\n  ISC License\n\n  Copyright (c) 2016, Mapbox\n\n  Permission to use, copy, modify, and/or distribute this software for any purpose\n  with or without fee is hereby granted, provided that the above copyright notice\n  and this permission notice appear in all copies.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n  THIS SOFTWARE.\n\n */\nimport { getPolygonSignedArea, DimIndex } from \"./polygon-utils.js\";\n/**\n * Computes a triangulation of a polygon\n * @param positions a flat array of the vertex positions that define the polygon.\n * @param holeIndices an array of hole indices if any (e.g. [5, 8] for a 12-vertex input would mean one hole with vertices 5\u20137 and another with 8\u201311).\n * @param dim the number of elements in each vertex. Size `2` will interpret `positions` as `[x0, y0, x1, y1, ...]` and size `3` will interpret `positions` as `[x0, y0, z0, x1, y1, z1, ...]`. Default `2`.\n * @param areas areas of outer polygon and holes as computed by `getPolygonSignedArea()`. Can be optionally supplied to speed up triangulation\n * @returns array of indices into the `positions` array that describes the triangulation of the polygon\n * Adapted from https://github.com/mapbox/earcut\n */\nexport function earcut(positions, holeIndices, dim = 2, areas, plane = 'xy') {\n    const hasHoles = holeIndices && holeIndices.length;\n    const outerLen = hasHoles ? holeIndices[0] * dim : positions.length;\n    let outerNode = linkedList(positions, 0, outerLen, dim, true, areas && areas[0], plane);\n    const triangles = [];\n    if (!outerNode || outerNode.next === outerNode.prev)\n        return triangles;\n    let invSize;\n    let maxX;\n    let maxY;\n    let minX;\n    let minY;\n    let x;\n    let y;\n    if (hasHoles)\n        outerNode = eliminateHoles(positions, holeIndices, outerNode, dim, areas, plane);\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (positions.length > 80 * dim) {\n        minX = maxX = positions[0];\n        minY = maxY = positions[1];\n        for (let i = dim; i < outerLen; i += dim) {\n            x = positions[i];\n            y = positions[i + 1];\n            if (x < minX)\n                minX = x;\n            if (y < minY)\n                minY = y;\n            if (x > maxX)\n                maxX = x;\n            if (y > maxY)\n                maxY = y;\n        }\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n    return triangles;\n}\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise, area, plane) {\n    let i;\n    let last;\n    if (area === undefined) {\n        area = getPolygonSignedArea(data, { start, end, size: dim, plane });\n    }\n    let i0 = DimIndex[plane[0]];\n    let i1 = DimIndex[plane[1]];\n    // Note that the signed area calculation in math.gl\n    // has the opposite sign to that which was originally\n    // present in earcut, thus the `< 0` is reversed\n    if (clockwise === area < 0) {\n        for (i = start; i < end; i += dim)\n            last = insertNode(i, data[i + i0], data[i + i1], last);\n    }\n    else {\n        for (i = end - dim; i >= start; i -= dim)\n            last = insertNode(i, data[i + i0], data[i + i1], last);\n    }\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n    return last;\n}\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start)\n        return start;\n    if (!end)\n        end = start;\n    let p = start;\n    let again;\n    do {\n        again = false;\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next)\n                break;\n            again = true;\n        }\n        else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n    return end;\n}\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear)\n        return;\n    // interlink polygon nodes in z-order\n    if (!pass && invSize)\n        indexCurve(ear, minX, minY, invSize);\n    let stop = ear;\n    let prev;\n    let next;\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push((prev.i / dim) | 0);\n            triangles.push((ear.i / dim) | 0);\n            triangles.push((next.i / dim) | 0);\n            removeNode(ear);\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n            continue;\n        }\n        ear = next;\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n                // if this didn't work, try curing all small self-intersections locally\n            }\n            else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n                // as a last resort, try splitting the remaining polygon into two\n            }\n            else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n            break;\n        }\n    }\n}\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    const a = ear.prev;\n    const b = ear;\n    const c = ear.next;\n    if (area(a, b, c) >= 0)\n        return false; // reflex, can't be an ear\n    // now make sure we don't have other points inside the potential ear\n    const ax = a.x;\n    const bx = b.x;\n    const cx = c.x;\n    const ay = a.y;\n    const by = b.y;\n    const cy = c.y;\n    // triangle bbox; min & max are calculated like this for speed\n    const x0 = ax < bx ? (ax < cx ? ax : cx) : bx < cx ? bx : cx;\n    const y0 = ay < by ? (ay < cy ? ay : cy) : by < cy ? by : cy;\n    const x1 = ax > bx ? (ax > cx ? ax : cx) : bx > cx ? bx : cx;\n    const y1 = ay > by ? (ay > cy ? ay : cy) : by > cy ? by : cy;\n    let p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 &&\n            p.x <= x1 &&\n            p.y >= y0 &&\n            p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0)\n            return false;\n        p = p.next;\n    }\n    return true;\n}\nfunction isEarHashed(ear, minX, minY, invSize) {\n    const a = ear.prev;\n    const b = ear;\n    const c = ear.next;\n    if (area(a, b, c) >= 0)\n        return false; // reflex, can't be an ear\n    const ax = a.x;\n    const bx = b.x;\n    const cx = c.x;\n    const ay = a.y;\n    const by = b.y;\n    const cy = c.y;\n    // triangle bbox; min & max are calculated like this for speed\n    const x0 = ax < bx ? (ax < cx ? ax : cx) : bx < cx ? bx : cx;\n    const y0 = ay < by ? (ay < cy ? ay : cy) : by < cy ? by : cy;\n    const x1 = ax > bx ? (ax > cx ? ax : cx) : bx > cx ? bx : cx;\n    const y1 = ay > by ? (ay > cy ? ay : cy) : by > cy ? by : cy;\n    // z-order range for the current triangle bbox;\n    const minZ = zOrder(x0, y0, minX, minY, invSize);\n    const maxZ = zOrder(x1, y1, minX, minY, invSize);\n    let p = ear.prevZ;\n    let n = ear.nextZ;\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 &&\n            p.x <= x1 &&\n            p.y >= y0 &&\n            p.y <= y1 &&\n            p !== a &&\n            p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0)\n            return false;\n        p = p.prevZ;\n        if (n.x >= x0 &&\n            n.x <= x1 &&\n            n.y >= y0 &&\n            n.y <= y1 &&\n            n !== a &&\n            n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0)\n            return false;\n        n = n.nextZ;\n    }\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 &&\n            p.x <= x1 &&\n            p.y >= y0 &&\n            p.y <= y1 &&\n            p !== a &&\n            p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0)\n            return false;\n        p = p.prevZ;\n    }\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 &&\n            n.x <= x1 &&\n            n.y >= y0 &&\n            n.y <= y1 &&\n            n !== a &&\n            n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0)\n            return false;\n        n = n.nextZ;\n    }\n    return true;\n}\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    let p = start;\n    do {\n        const a = p.prev;\n        const b = p.next.next;\n        if (!equals(a, b) &&\n            intersects(a, p, p.next, b) &&\n            locallyInside(a, b) &&\n            locallyInside(b, a)) {\n            triangles.push((a.i / dim) | 0);\n            triangles.push((p.i / dim) | 0);\n            triangles.push((b.i / dim) | 0);\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n    return filterPoints(p);\n}\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    let a = start;\n    do {\n        let b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                let c = splitPolygon(a, b);\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim, areas, plane) {\n    const queue = [];\n    let i;\n    let len;\n    let start;\n    let end;\n    let list;\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false, areas && areas[i + 1], plane);\n        if (list === list.next)\n            list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n    queue.sort(compareX);\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n    return outerNode;\n}\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    const bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n    const bridgeReverse = splitPolygon(bridge, hole);\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    let p = outerNode;\n    const hx = hole.x;\n    const hy = hole.y;\n    let qx = -Infinity;\n    let m;\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            const x = p.x + ((hy - p.y) * (p.next.x - p.x)) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx)\n                    return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n    if (!m)\n        return null;\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n    const stop = m;\n    const mx = m.x;\n    const my = m.y;\n    let tanMin = Infinity;\n    let tan;\n    p = m;\n    do {\n        if (hx >= p.x &&\n            p.x >= mx &&\n            hx !== p.x &&\n            pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n            if (locallyInside(p, hole) &&\n                (tan < tanMin ||\n                    (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n        p = p.next;\n    } while (p !== stop);\n    return m;\n}\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    let p = start;\n    do {\n        if (p.z === 0)\n            p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n    sortLinked(p);\n}\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    let e;\n    let i;\n    let inSize = 1;\n    let numMerges;\n    let p;\n    let pSize;\n    let q;\n    let qSize;\n    let tail;\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q)\n                    break;\n            }\n            qSize = inSize;\n            while (pSize > 0 || (qSize > 0 && q)) {\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                }\n                else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n                if (tail)\n                    tail.nextZ = e;\n                else\n                    list = e;\n                e.prevZ = tail;\n                tail = e;\n            }\n            p = q;\n        }\n        tail.nextZ = null;\n        inSize *= 2;\n    } while (numMerges > 1);\n    return list;\n}\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = ((x - minX) * invSize) | 0;\n    y = ((y - minY) * invSize) | 0;\n    x = (x | (x << 8)) & 0x00ff00ff;\n    x = (x | (x << 4)) & 0x0f0f0f0f;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n    y = (y | (y << 8)) & 0x00ff00ff;\n    y = (y | (y << 4)) & 0x0f0f0f0f;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n    return x | (y << 1);\n}\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    let p = start;\n    let leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y))\n            leftmost = p;\n        p = p.next;\n    } while (p !== start);\n    return leftmost;\n}\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return ((cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n        (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n        (bx - px) * (cy - py) >= (cx - px) * (by - py));\n}\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return (a.next.i !== b.i &&\n        a.prev.i !== b.i &&\n        !intersectsPolygon(a, b) && // dones't intersect other edges\n        ((locallyInside(a, b) &&\n            locallyInside(b, a) &&\n            middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b))) || // does not create opposite-facing sectors\n            (equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0))); // special zero-length case\n}\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    const o1 = sign(area(p1, q1, p2));\n    const o2 = sign(area(p1, q1, q2));\n    const o3 = sign(area(p2, q2, p1));\n    const o4 = sign(area(p2, q2, q1));\n    if (o1 !== o2 && o3 !== o4)\n        return true; // general case\n    if (o1 === 0 && onSegment(p1, p2, q1))\n        return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1))\n        return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2))\n        return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2))\n        return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n    return false;\n}\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return (q.x <= Math.max(p.x, r.x) &&\n        q.x >= Math.min(p.x, r.x) &&\n        q.y <= Math.max(p.y, r.y) &&\n        q.y >= Math.min(p.y, r.y));\n}\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    let p = a;\n    do {\n        if (p.i !== a.i &&\n            p.next.i !== a.i &&\n            p.i !== b.i &&\n            p.next.i !== b.i &&\n            intersects(p, p.next, a, b))\n            return true;\n        p = p.next;\n    } while (p !== a);\n    return false;\n}\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0\n        ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0\n        : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    let p = a;\n    let inside = false;\n    const px = (a.x + b.x) / 2;\n    const py = (a.y + b.y) / 2;\n    do {\n        if (p.y > py !== p.next.y > py &&\n            p.next.y !== p.y &&\n            px < ((p.next.x - p.x) * (py - p.y)) / (p.next.y - p.y) + p.x)\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n    return inside;\n}\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    const a2 = new Vertex(a.i, a.x, a.y);\n    const b2 = new Vertex(b.i, b.x, b.y);\n    const an = a.next;\n    const bp = b.prev;\n    a.next = b;\n    b.prev = a;\n    a2.next = an;\n    an.prev = a2;\n    b2.next = a2;\n    a2.prev = b2;\n    bp.next = b2;\n    b2.prev = bp;\n    return b2;\n}\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    const p = new Vertex(i, x, y);\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n    }\n    else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n    if (p.prevZ)\n        p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ)\n        p.nextZ.prevZ = p.prevZ;\n}\nclass Vertex {\n    constructor(i, x, y) {\n        // previous and next vertex nodes in a polygon ring\n        this.prev = null;\n        this.next = null;\n        // z-order curve value\n        this.z = 0;\n        // previous and next nodes in z-order\n        this.prevZ = null;\n        this.nextZ = null;\n        // indicates whether this is a steiner point\n        this.steiner = false;\n        this.i = i;\n        this.x = x;\n        this.y = y;\n    }\n}\n", "export function push(target, source) {\n    const size = source.length;\n    const startIndex = target.length;\n    // dedupe, if source is the same point as the last vertex\n    if (startIndex > 0) {\n        let isDuplicate = true;\n        for (let i = 0; i < size; i++) {\n            if (target[startIndex - size + i] !== source[i]) {\n                isDuplicate = false;\n                break;\n            }\n        }\n        if (isDuplicate) {\n            return false;\n        }\n    }\n    for (let i = 0; i < size; i++) {\n        target[startIndex + i] = source[i];\n    }\n    return true;\n}\nexport function copy(target, source) {\n    const size = source.length;\n    for (let i = 0; i < size; i++) {\n        target[i] = source[i];\n    }\n}\nexport function getPointAtIndex(positions, index, size, offset, out = []) {\n    const startI = offset + index * size;\n    for (let i = 0; i < size; i++) {\n        out[i] = positions[startI + i];\n    }\n    return out;\n}\n", "/*\n  Adapted from https://github.com/mapbox/lineclip to work with flat arrays\n  and 3d positions\n\n  ISC License\n\n  Copyright (c) 2015, Mapbox\n\n  Permission to use, copy, modify, and/or distribute this software for any purpose\n  with or without fee is hereby granted, provided that the above copyright notice\n  and this permission notice appear in all copies.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n  THIS SOFTWARE.\n\n */\n/* eslint-disable max-statements, max-depth, complexity */\nimport { push, copy, getPointAtIndex } from \"./utils.js\";\n/**\n * Cohen-Sutherland line clipping algorithm, adapted to efficiently\n * handle polylines rather than just segments\n */\nexport function clipPolyline(positions, bbox, options) {\n    const { size = 2, startIndex = 0, endIndex = positions.length } = options || {};\n    const numPoints = (endIndex - startIndex) / size;\n    const result = [];\n    let part = [];\n    let a;\n    let b;\n    let codeA = -1;\n    let codeB;\n    let lastCode;\n    for (let i = 1; i < numPoints; i++) {\n        a = getPointAtIndex(positions, i - 1, size, startIndex, a);\n        b = getPointAtIndex(positions, i, size, startIndex, b);\n        if (codeA < 0) {\n            codeA = bitCode(a, bbox);\n        }\n        codeB = lastCode = bitCode(b, bbox);\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            if (!(codeA | codeB)) {\n                // accept\n                push(part, a);\n                if (codeB !== lastCode) {\n                    // segment went outside\n                    push(part, b);\n                    if (i < numPoints - 1) {\n                        // start a new line\n                        result.push(part);\n                        part = [];\n                    }\n                }\n                else if (i === numPoints - 1) {\n                    push(part, b);\n                }\n                break;\n            }\n            else if (codeA & codeB) {\n                // trivial reject\n                break;\n            }\n            else if (codeA) {\n                // a outside, intersect with clip edge\n                intersect(a, b, codeA, bbox, a);\n                codeA = bitCode(a, bbox);\n            }\n            else {\n                // b outside\n                intersect(a, b, codeB, bbox, b);\n                codeB = bitCode(b, bbox);\n            }\n        }\n        codeA = lastCode;\n    }\n    if (part.length)\n        result.push(part);\n    return result;\n}\n/**\n * Sutherland-Hodgeman polygon clipping algorithm\n * polygon must be closed (first vertex == last vertex)\n */\nexport function clipPolygon(positions, bbox, options) {\n    const { size = 2, endIndex = positions.length } = options || {};\n    let { startIndex = 0 } = options || {};\n    let numPoints = (endIndex - startIndex) / size;\n    let result;\n    let p;\n    let prev;\n    let inside;\n    let prevInside;\n    // clip against each side of the clip rectangle\n    for (let edge = 1; edge <= 8; edge *= 2) {\n        result = [];\n        prev = getPointAtIndex(positions, numPoints - 1, size, startIndex, prev);\n        prevInside = !(bitCode(prev, bbox) & edge);\n        for (let i = 0; i < numPoints; i++) {\n            p = getPointAtIndex(positions, i, size, startIndex, p);\n            inside = !(bitCode(p, bbox) & edge);\n            // if segment goes through the clip window, add an intersection\n            if (inside !== prevInside)\n                push(result, intersect(prev, p, edge, bbox));\n            if (inside)\n                push(result, p); // add a point if it's inside\n            copy(prev, p);\n            prevInside = inside;\n        }\n        // close loop\n        positions = result;\n        startIndex = 0;\n        numPoints = result.length / size;\n        if (!numPoints)\n            break;\n    }\n    return result;\n}\n/** intersect a segment against one of the 4 lines that make up the bbox */\nexport function intersect(a, b, edge, bbox, out = []) {\n    let t;\n    // Forces out[snapI] to be on the bbox edge\n    // Interpolation introduces precision issue which may cause lineclip to be\n    // stuck in an infinite loop\n    let snap;\n    if (edge & 8) {\n        // top\n        t = (bbox[3] - a[1]) / (b[1] - a[1]);\n        snap = 3;\n    }\n    else if (edge & 4) {\n        // bottom\n        t = (bbox[1] - a[1]) / (b[1] - a[1]);\n        snap = 1;\n    }\n    else if (edge & 2) {\n        // right\n        t = (bbox[2] - a[0]) / (b[0] - a[0]);\n        snap = 2;\n    }\n    else if (edge & 1) {\n        // left\n        t = (bbox[0] - a[0]) / (b[0] - a[0]);\n        snap = 0;\n    }\n    else {\n        return null;\n    }\n    for (let i = 0; i < a.length; i++) {\n        out[i] = (snap & 1) === i ? bbox[snap] : t * (b[i] - a[i]) + a[i];\n    }\n    return out;\n}\n/**\n * bit code reflects the point position relative to the bbox:\n *         left  mid  right\n *    top  1001  1000  1010\n *    mid  0001  0000  0010\n * bottom  0101  0100  0110\n */\nexport function bitCode(p, bbox) {\n    let code = 0;\n    if (p[0] < bbox[0])\n        code |= 1;\n    // left\n    else if (p[0] > bbox[2])\n        code |= 2; // right\n    if (p[1] < bbox[1])\n        code |= 4;\n    // bottom\n    else if (p[1] > bbox[3])\n        code |= 8; // top\n    return code;\n}\n", "/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\nimport { bitCode, intersect } from \"./lineclip.js\";\nimport { getPointAtIndex, copy, push } from \"./utils.js\";\nexport function cutPolylineByGrid(positions, options) {\n    const { size = 2, broken = false, gridResolution = 10, gridOffset = [0, 0], startIndex = 0, endIndex = positions.length } = options || {};\n    const numPoints = (endIndex - startIndex) / size;\n    let part = [];\n    const result = [part];\n    const a = getPointAtIndex(positions, 0, size, startIndex);\n    let b;\n    let codeB;\n    const cell = getGridCell(a, gridResolution, gridOffset, []);\n    const scratchPoint = [];\n    push(part, a);\n    for (let i = 1; i < numPoints; i++) {\n        b = getPointAtIndex(positions, i, size, startIndex, b);\n        codeB = bitCode(b, cell);\n        while (codeB) {\n            // find the intersection with the current cell\n            intersect(a, b, codeB, cell, scratchPoint);\n            const codeAlt = bitCode(scratchPoint, cell);\n            if (codeAlt) {\n                intersect(a, scratchPoint, codeAlt, cell, scratchPoint);\n                codeB = codeAlt;\n            }\n            push(part, scratchPoint);\n            // move to the next cell\n            copy(a, scratchPoint);\n            moveToNeighborCell(cell, gridResolution, codeB);\n            if (broken && part.length > size) {\n                part = [];\n                result.push(part);\n                push(part, a);\n            }\n            codeB = bitCode(b, cell);\n        }\n        push(part, b);\n        copy(a, b);\n    }\n    return broken ? result : result[0];\n}\nconst TYPE_INSIDE = 0;\nconst TYPE_BORDER = 1;\n/**\n * Cuts a polygon by a pre-defined grid\n */\nexport function cutPolygonByGrid(positions, holeIndices = null, options) {\n    if (!positions.length) {\n        // input is empty\n        return [];\n    }\n    const { size = 2, gridResolution = 10, gridOffset = [0, 0], edgeTypes = false } = options || {};\n    const result = [];\n    const queue = [\n        {\n            pos: positions,\n            types: edgeTypes ? new Array(positions.length / size).fill(TYPE_BORDER) : null,\n            holes: holeIndices || []\n        }\n    ];\n    const bbox = [[], []];\n    // @ts-ignore\n    let cell = [];\n    // Recursively bisect polygon until every part fit in a single grid cell\n    while (queue.length) {\n        const { pos, types, holes } = queue.shift();\n        // Get the bounding box of the outer polygon\n        getBoundingBox(pos, size, holes[0] || pos.length, bbox);\n        cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);\n        const code = bitCode(bbox[1], cell);\n        if (code) {\n            // Split the outer ring at the boundary\n            let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);\n            const polygonLow = { pos: parts[0].pos, types: parts[0].types, holes: [] };\n            const polygonHigh = { pos: parts[1].pos, types: parts[1].types, holes: [] };\n            queue.push(polygonLow, polygonHigh);\n            // Split each hole at the boundary\n            for (let i = 0; i < holes.length; i++) {\n                parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);\n                if (parts[0]) {\n                    polygonLow.holes.push(polygonLow.pos.length);\n                    polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);\n                    if (edgeTypes) {\n                        polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);\n                    }\n                }\n                if (parts[1]) {\n                    polygonHigh.holes.push(polygonHigh.pos.length);\n                    polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);\n                    if (edgeTypes) {\n                        polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);\n                    }\n                }\n            }\n        }\n        else {\n            // Polygon fits in a single cell, no more processing required\n            const polygon = { positions: pos };\n            if (edgeTypes) {\n                polygon.edgeTypes = types;\n            }\n            if (holes.length) {\n                polygon.holeIndices = holes;\n            }\n            result.push(polygon);\n        }\n    }\n    return result;\n}\n// edgeTypes:\n// TYPE_BORDER - edge from the original polygon\n// TYPE_INSIDE - inside the original polygon\n// eslint-disable-next-line max-params\nfunction bisectPolygon(positions, edgeTypes, size, startIndex, endIndex, bbox, edge) {\n    const numPoints = (endIndex - startIndex) / size;\n    const resultLow = [];\n    const resultHigh = [];\n    const typesLow = [];\n    const typesHigh = [];\n    const scratchPoint = [];\n    let p;\n    let side;\n    let type;\n    const prev = getPointAtIndex(positions, numPoints - 1, size, startIndex);\n    let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);\n    let prevType = edgeTypes && edgeTypes[numPoints - 1];\n    let lowPointCount = 0;\n    let highPointCount = 0;\n    for (let i = 0; i < numPoints; i++) {\n        p = getPointAtIndex(positions, i, size, startIndex, p);\n        side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);\n        type = edgeTypes && edgeTypes[startIndex / size + i];\n        // if segment goes through the boundary, add an intersection\n        if (side && prevSide && prevSide !== side) {\n            intersect(prev, p, edge, bbox, scratchPoint);\n            push(resultLow, scratchPoint) && typesLow.push(prevType);\n            push(resultHigh, scratchPoint) && typesHigh.push(prevType);\n        }\n        if (side <= 0) {\n            push(resultLow, p) && typesLow.push(type);\n            lowPointCount -= side;\n        }\n        else if (typesLow.length) {\n            typesLow[typesLow.length - 1] = TYPE_INSIDE;\n        }\n        if (side >= 0) {\n            push(resultHigh, p) && typesHigh.push(type);\n            highPointCount += side;\n        }\n        else if (typesHigh.length) {\n            typesHigh[typesHigh.length - 1] = TYPE_INSIDE;\n        }\n        copy(prev, p);\n        prevSide = side;\n        prevType = type;\n    }\n    return [\n        lowPointCount ? { pos: resultLow, types: edgeTypes && typesLow } : null,\n        highPointCount ? { pos: resultHigh, types: edgeTypes && typesHigh } : null\n    ];\n}\nfunction getGridCell(p, gridResolution, gridOffset, out) {\n    const left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];\n    const bottom = Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];\n    out[0] = left;\n    out[1] = bottom;\n    out[2] = left + gridResolution;\n    out[3] = bottom + gridResolution;\n    return out;\n}\nfunction moveToNeighborCell(cell, gridResolution, edge) {\n    if (edge & 8) {\n        // top\n        cell[1] += gridResolution;\n        cell[3] += gridResolution;\n    }\n    else if (edge & 4) {\n        // bottom\n        cell[1] -= gridResolution;\n        cell[3] -= gridResolution;\n    }\n    else if (edge & 2) {\n        // right\n        cell[0] += gridResolution;\n        cell[2] += gridResolution;\n    }\n    else if (edge & 1) {\n        // left\n        cell[0] -= gridResolution;\n        cell[2] -= gridResolution;\n    }\n}\nfunction getBoundingBox(positions, size, endIndex, out) {\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n    for (let i = 0; i < endIndex; i += size) {\n        const x = positions[i];\n        const y = positions[i + 1];\n        minX = x < minX ? x : minX;\n        maxX = x > maxX ? x : maxX;\n        minY = y < minY ? y : minY;\n        maxY = y > maxY ? y : maxY;\n    }\n    out[0][0] = minX;\n    out[0][1] = minY;\n    out[1][0] = maxX;\n    out[1][1] = maxY;\n    return out;\n}\nfunction concatInPlace(arr1, arr2) {\n    for (let i = 0; i < arr2.length; i++) {\n        arr1.push(arr2[i]);\n    }\n    return arr1;\n}\n", "import { cutPolylineByGrid, cutPolygonByGrid } from \"./cut-by-grid.js\";\nimport { getPointAtIndex, push } from \"./utils.js\";\n// https://en.wikipedia.org/wiki/Web_Mercator_projection\nconst DEFAULT_MAX_LATITUDE = 85.051129;\n/** https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png */\nexport function cutPolylineByMercatorBounds(positions, options) {\n    const { size = 2, startIndex = 0, endIndex = positions.length, normalize = true } = options || {};\n    // Remap longitudes so that each segment takes the shorter path\n    const newPositions = positions.slice(startIndex, endIndex);\n    wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n    const parts = cutPolylineByGrid(newPositions, {\n        size,\n        broken: true,\n        gridResolution: 360,\n        gridOffset: [-180, -180]\n    });\n    if (normalize) {\n        // Each part is guaranteed to be in a single copy of the world\n        // Map longitudes back to [-180, 180]\n        for (const part of parts) {\n            shiftLongitudesIntoRange(part, size);\n        }\n    }\n    return parts;\n}\n/** https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png */\nexport function cutPolygonByMercatorBounds(positions, holeIndices = null, options) {\n    const { size = 2, normalize = true, edgeTypes = false } = options || {};\n    holeIndices = holeIndices || [];\n    const newPositions = [];\n    const newHoleIndices = [];\n    let srcStartIndex = 0;\n    let targetIndex = 0;\n    for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n        // srcStartIndex/srcEndIndex define the ring in the original positions\n        const srcEndIndex = holeIndices[ringIndex] || positions.length;\n        // targetStartIndex/targetIndex define the ring in newPositions\n        const targetStartIndex = targetIndex;\n        // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices\n        // The insertion point is defined by the vertex closest to the pole\n        // Split the the ring by the insertion point when copying to newPositions\n        const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n        for (let i = splitIndex; i < srcEndIndex; i++) {\n            newPositions[targetIndex++] = positions[i];\n        }\n        for (let i = srcStartIndex; i < splitIndex; i++) {\n            newPositions[targetIndex++] = positions[i];\n        }\n        // Remap longitudes so that each segment takes the shorter path\n        wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n        // Handle the case when the ring contains a pole\n        insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options?.maxLatitude);\n        srcStartIndex = srcEndIndex;\n        newHoleIndices[ringIndex] = targetIndex;\n    }\n    newHoleIndices.pop();\n    const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n        size,\n        gridResolution: 360,\n        gridOffset: [-180, -180],\n        edgeTypes\n    });\n    if (normalize) {\n        // Each part is guaranteed to be in a single copy of the world\n        // Map longitudes back to [-180, 180]\n        for (const part of parts) {\n            // @ts-expect-error (mutates readonly array) May mutate newPositions, which is created by us\n            shiftLongitudesIntoRange(part.positions, size);\n        }\n    }\n    return parts;\n}\n/* Helpers */\n// See comments for insertPoleVertices\nfunction findSplitIndex(positions, size, startIndex, endIndex) {\n    let maxLat = -1;\n    let pointIndex = -1;\n    for (let i = startIndex + 1; i < endIndex; i += size) {\n        const lat = Math.abs(positions[i]);\n        if (lat > maxLat) {\n            maxLat = lat;\n            pointIndex = i - 1;\n        }\n    }\n    return pointIndex;\n}\n// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png\n//\n// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge\n// of map into the polygon. This requires adding two vertices that represent the pole, by\n// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.\n//\n// We select the insertion position carefully so that the inserted line segments do not\n// intersect with the ring itself. This is ensured by findSplitIndex, which returns the\n// vertex closest to the pole.\nfunction insertPoleVertices(positions, size, startIndex, endIndex, maxLatitude = DEFAULT_MAX_LATITUDE) {\n    // Check if the ring contains a pole\n    const firstLng = positions[startIndex];\n    const lastLng = positions[endIndex - size];\n    if (Math.abs(firstLng - lastLng) > 180) {\n        // The ring does not make a round trip\n        // Add the nearest pole to the vertices so that the polygon tesselates correctly\n        const p = getPointAtIndex(positions, 0, size, startIndex);\n        // Copy the first vertex to the world of the last vertex\n        p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n        push(positions, p);\n        // Project the copied vertex to the edge of the map\n        p[1] = Math.sign(p[1]) * maxLatitude;\n        push(positions, p);\n        // Project the first vertex to the edge of the map\n        p[0] = firstLng;\n        push(positions, p);\n    }\n}\nfunction wrapLongitudesForShortestPath(positions, size, startIndex, endIndex) {\n    let prevLng = positions[0];\n    let lng;\n    for (let i = startIndex; i < endIndex; i += size) {\n        lng = positions[i];\n        const delta = lng - prevLng;\n        if (delta > 180 || delta < -180) {\n            lng -= Math.round(delta / 360) * 360;\n        }\n        positions[i] = prevLng = lng;\n    }\n}\nfunction shiftLongitudesIntoRange(positions, size) {\n    let refLng;\n    const pointCount = positions.length / size;\n    // Find a longitude that is not on the edge of a world\n    // Which we will use to determine which world copy it is\n    for (let i = 0; i < pointCount; i++) {\n        refLng = positions[i * size];\n        if ((refLng + 180) % 360 !== 0) {\n            break;\n        }\n    }\n    const delta = -Math.round(refLng / 360) * 360;\n    if (delta === 0) {\n        return;\n    }\n    for (let i = 0; i < pointCount; i++) {\n        positions[i * size] += delta;\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_core", "area", "area", "equals"]
}
