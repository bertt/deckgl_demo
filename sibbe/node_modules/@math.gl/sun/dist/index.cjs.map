{
  "version": 3,
  "sources": ["index.js", "suncalc.js"],
  "sourcesContent": ["export { getSunPosition, getSunDirection } from \"./suncalc.js\";\n", "const DEGREES_TO_RADIANS = Math.PI / 180;\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588; // Julian Day year 1970\nconst JD2000 = 2451545; // Julian Day year 2000\n// This angle \u03B5 [epsilon] is called the obliquity of the ecliptic and its value at the beginning of 2000 was 23.4397\u00B0\nconst e = DEGREES_TO_RADIANS * 23.4397; // obliquity of the Earth\n// Refer https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Mean Anomaly\" section for explanation\nconst M0 = 357.5291; // Earth mean anomaly on start day\nconst M1 = 0.98560028; // Earth angle traverses on average per day seen from the sun\nconst THETA0 = 280.147; // The sidereal time (in degrees) at longitude 0\u00B0 at the instant defined by JD2000\nconst THETA1 = 360.9856235; // The rate of change of the sidereal time, in degrees per day.\n/**\n * Calculate sun position\n * based on https://www.aa.quae.nl/en/reken/zonpositie.html\n * inspired by https://github.com/mourner/suncalc/blob/master/suncalc.js\n */\nexport function getSunPosition(timestamp, latitude, longitude) {\n    const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n    const phi = DEGREES_TO_RADIANS * latitude;\n    const d = toDays(timestamp);\n    const c = getSunCoords(d);\n    // hour angle\n    const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n    return {\n        azimuth: getAzimuth(H, phi, c.declination),\n        altitude: getAltitude(H, phi, c.declination)\n    };\n}\nexport function getSunDirection(timestamp, latitude, longitude) {\n    const { azimuth, altitude } = getSunPosition(timestamp, latitude, longitude);\n    // solar position to light direction\n    return [\n        Math.sin(azimuth) * Math.cos(altitude),\n        Math.cos(azimuth) * Math.cos(altitude),\n        -Math.sin(altitude)\n    ];\n}\nfunction toJulianDay(timestamp) {\n    const ts = typeof timestamp === 'number' ? timestamp : timestamp.getTime();\n    return ts / DAY_IN_MS - 0.5 + JD1970;\n}\nfunction toDays(timestamp) {\n    return toJulianDay(timestamp) - JD2000;\n}\nfunction getRightAscension(eclipticLongitude, b) {\n    const lambda = eclipticLongitude;\n    return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\nfunction getDeclination(eclipticLongitude, b) {\n    const lambda = eclipticLongitude;\n    return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\nfunction getAzimuth(hourAngle, latitudeInRadians, declination) {\n    const H = hourAngle;\n    const phi = latitudeInRadians;\n    const delta = declination;\n    return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\nfunction getAltitude(hourAngle, latitudeInRadians, declination) {\n    const H = hourAngle;\n    const phi = latitudeInRadians;\n    const delta = declination;\n    return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n// https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Observer section\"\nfunction getSiderealTime(dates, longitudeWestInRadians) {\n    return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\nfunction getSolarMeanAnomaly(days) {\n    return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\nfunction getEclipticLongitude(meanAnomaly) {\n    const M = meanAnomaly;\n    // equation of center\n    const C = DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n    // perihelion of the Earth\n    const P = DEGREES_TO_RADIANS * 102.9372;\n    return M + C + P + Math.PI;\n}\nfunction getSunCoords(dates) {\n    const M = getSolarMeanAnomaly(dates);\n    const L = getEclipticLongitude(M);\n    return {\n        declination: getDeclination(L, 0),\n        rightAscension: getRightAscension(L, 0)\n    };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAM,qBAAqB,KAAK,KAAK;AACrC,IAAM,YAAY,MAAO,KAAK,KAAK;AACnC,IAAM,SAAS;AACf,IAAM,SAAS;AAEf,IAAM,IAAI,qBAAqB;AAG/B,IAAM,KAAK;AACX,IAAM,KAAK;AACX,IAAM,SAAS;AACf,IAAM,SAAS;AAMR,SAAS,eAAe,WAAW,UAAU,WAAW;AAC3D,QAAM,yBAAyB,qBAAqB,CAAC;AACrD,QAAM,MAAM,qBAAqB;AACjC,QAAM,IAAI,OAAO,SAAS;AAC1B,QAAM,IAAI,aAAa,CAAC;AAExB,QAAM,IAAI,gBAAgB,GAAG,sBAAsB,IAAI,EAAE;AACzD,SAAO;AAAA,IACH,SAAS,WAAW,GAAG,KAAK,EAAE,WAAW;AAAA,IACzC,UAAU,YAAY,GAAG,KAAK,EAAE,WAAW;AAAA,EAC/C;AACJ;AACO,SAAS,gBAAgB,WAAW,UAAU,WAAW;AAC5D,QAAM,EAAE,SAAS,SAAS,IAAI,eAAe,WAAW,UAAU,SAAS;AAE3E,SAAO;AAAA,IACH,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,QAAQ;AAAA,IACrC,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,QAAQ;AAAA,IACrC,CAAC,KAAK,IAAI,QAAQ;AAAA,EACtB;AACJ;AACA,SAAS,YAAY,WAAW;AAC5B,QAAM,KAAK,OAAO,cAAc,WAAW,YAAY,UAAU,QAAQ;AACzE,SAAO,KAAK,YAAY,MAAM;AAClC;AACA,SAAS,OAAO,WAAW;AACvB,SAAO,YAAY,SAAS,IAAI;AACpC;AACA,SAAS,kBAAkB,mBAAmB,GAAG;AAC7C,QAAM,SAAS;AACf,SAAO,KAAK,MAAM,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,KAAK,IAAI,MAAM,CAAC;AAClG;AACA,SAAS,eAAe,mBAAmB,GAAG;AAC1C,QAAM,SAAS;AACf,SAAO,KAAK,KAAK,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,MAAM,CAAC;AAC7F;AACA,SAAS,WAAW,WAAW,mBAAmB,aAAa;AAC3D,QAAM,IAAI;AACV,QAAM,MAAM;AACZ,QAAM,QAAQ;AACd,SAAO,KAAK,MAAM,KAAK,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG,CAAC;AAChG;AACA,SAAS,YAAY,WAAW,mBAAmB,aAAa;AAC5D,QAAM,IAAI;AACV,QAAM,MAAM;AACZ,QAAM,QAAQ;AACd,SAAO,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,CAAC,CAAC;AACpG;AAGA,SAAS,gBAAgB,OAAO,wBAAwB;AACpD,SAAO,sBAAsB,SAAS,SAAS,SAAS;AAC5D;AACA,SAAS,oBAAoB,MAAM;AAC/B,SAAO,sBAAsB,KAAK,KAAK;AAC3C;AACA,SAAS,qBAAqB,aAAa;AACvC,QAAM,IAAI;AAEV,QAAM,IAAI,sBAAsB,SAAS,KAAK,IAAI,CAAC,IAAI,OAAO,KAAK,IAAI,IAAI,CAAC,IAAI,OAAS,KAAK,IAAI,IAAI,CAAC;AAEvG,QAAM,IAAI,qBAAqB;AAC/B,SAAO,IAAI,IAAI,IAAI,KAAK;AAC5B;AACA,SAAS,aAAa,OAAO;AACzB,QAAM,IAAI,oBAAoB,KAAK;AACnC,QAAM,IAAI,qBAAqB,CAAC;AAChC,SAAO;AAAA,IACH,aAAa,eAAe,GAAG,CAAC;AAAA,IAChC,gBAAgB,kBAAkB,GAAG,CAAC;AAAA,EAC1C;AACJ;",
  "names": []
}
