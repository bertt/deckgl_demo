{"version":3,"file":"expression-eval.modern.js","sources":["../index.ts"],"sourcesContent":["import jsep from 'jsep';\n\n/**\n * Evaluation code from JSEP project, under MIT License.\n * Copyright (c) 2013 Stephen Oney, http://jsep.from.so/\n */\n\n// Default operator precedence from https://github.com/EricSmekens/jsep/blob/master/src/jsep.js#L55\nconst DEFAULT_PRECEDENCE = {\n  '||': 1,\n  '&&': 2,\n  '|': 3,\n  '^': 4,\n  '&': 5,\n  '==': 6,\n  '!=': 6,\n  '===': 6,\n  '!==': 6,\n  '<': 7,\n  '>': 7,\n  '<=': 7,\n  '>=': 7,\n  '<<': 8,\n  '>>': 8,\n  '>>>': 8,\n  '+': 9,\n  '-': 9,\n  '*': 10,\n  '/': 10,\n  '%': 10\n};\n\nconst binops = {\n  '||': function (a, b) { return a || b; },\n  '&&': function (a, b) { return a && b; },\n  '|': function (a, b) { return a | b; },\n  '^': function (a, b) { return a ^ b; },\n  '&': function (a, b) { return a & b; },\n  '==': function (a, b) { return a == b; }, // jshint ignore:line\n  '!=': function (a, b) { return a != b; }, // jshint ignore:line\n  '===': function (a, b) { return a === b; },\n  '!==': function (a, b) { return a !== b; },\n  '<': function (a, b) { return a < b; },\n  '>': function (a, b) { return a > b; },\n  '<=': function (a, b) { return a <= b; },\n  '>=': function (a, b) { return a >= b; },\n  '<<': function (a, b) { return a << b; },\n  '>>': function (a, b) { return a >> b; },\n  '>>>': function (a, b) { return a >>> b; },\n  '+': function (a, b) { return a + b; },\n  '-': function (a, b) { return a - b; },\n  '*': function (a, b) { return a * b; },\n  '/': function (a, b) { return a / b; },\n  '%': function (a, b) { return a % b; }\n};\n\nconst unops = {\n  '-': function (a) { return -a; },\n  '+': function (a) { return +a; },\n  '~': function (a) { return ~a; },\n  '!': function (a) { return !a; },\n};\n\ndeclare type operand = number | string;\ndeclare type unaryCallback = (a: operand) => operand;\ndeclare type binaryCallback = (a: operand, b: operand) => operand;\n\ntype AnyExpression = jsep.ArrayExpression\n  | jsep.BinaryExpression\n  | jsep.MemberExpression\n  | jsep.CallExpression\n  | jsep.ConditionalExpression\n  | jsep.Identifier\n  | jsep.Literal\n  | jsep.LogicalExpression\n  | jsep.ThisExpression\n  | jsep.UnaryExpression;\n\nfunction evaluateArray(list, context) {\n  return list.map(function (v) { return evaluate(v, context); });\n}\n\nasync function evaluateArrayAsync(list, context) {\n  const res = await Promise.all(list.map((v) => evalAsync(v, context)));\n  return res;\n}\n\nfunction evaluateMember(node: jsep.MemberExpression, context: object) {\n  const object = evaluate(node.object, context);\n  let key: string;\n  if (node.computed) {\n    key = evaluate(node.property, context);\n  } else {\n    key = (node.property as jsep.Identifier).name;\n  }\n  if (/^__proto__|prototype|constructor$/.test(key)) {\n    throw Error(`Access to member \"${key}\" disallowed.`);\n  }\n  return [object, object[key]];\n}\n\nasync function evaluateMemberAsync(node: jsep.MemberExpression, context: object) {\n  const object = await evalAsync(node.object, context);\n  let key: string;\n  if (node.computed) {\n    key = await evalAsync(node.property, context);\n  } else {\n    key = (node.property as jsep.Identifier).name;\n  }\n  if (/^__proto__|prototype|constructor$/.test(key)) {\n    throw Error(`Access to member \"${key}\" disallowed.`);\n  }\n  return [object, object[key]];\n}\n\nfunction evaluate(_node: jsep.Expression, context: object) {\n\n  const node = _node as AnyExpression;\n\n  switch (node.type) {\n\n    case 'ArrayExpression':\n      return evaluateArray(node.elements, context);\n\n    case 'BinaryExpression':\n      return binops[node.operator](evaluate(node.left, context), evaluate(node.right, context));\n\n    case 'CallExpression':\n      let caller, fn, assign;\n      if (node.callee.type === 'MemberExpression') {\n        assign = evaluateMember(node.callee as jsep.MemberExpression, context);\n        caller = assign[0];\n        fn = assign[1];\n      } else {\n        fn = evaluate(node.callee, context);\n      }\n      if (typeof fn !== 'function') { return undefined; }\n      return fn.apply(caller, evaluateArray(node.arguments, context));\n\n    case 'ConditionalExpression':\n      return evaluate(node.test, context)\n        ? evaluate(node.consequent, context)\n        : evaluate(node.alternate, context);\n\n    case 'Identifier':\n      return context[node.name];\n\n    case 'Literal':\n      return node.value;\n\n    case 'LogicalExpression':\n      if (node.operator === '||') {\n        return evaluate(node.left, context) || evaluate(node.right, context);\n      } else if (node.operator === '&&') {\n        return evaluate(node.left, context) && evaluate(node.right, context);\n      }\n      return binops[node.operator](evaluate(node.left, context), evaluate(node.right, context));\n\n    case 'MemberExpression':\n      return evaluateMember(node, context)[1];\n\n    case 'ThisExpression':\n      return context;\n\n    case 'UnaryExpression':\n      return unops[node.operator](evaluate(node.argument, context));\n\n    default:\n      return undefined;\n  }\n\n}\n\nasync function evalAsync(_node: jsep.Expression, context: object) {\n\n  const node = _node as AnyExpression;\n\n  // Brackets used for some case blocks here, to avoid edge cases related to variable hoisting.\n  // See: https://stackoverflow.com/questions/57759348/const-and-let-variable-shadowing-in-a-switch-statement\n  switch (node.type) {\n\n    case 'ArrayExpression':\n      return await evaluateArrayAsync(node.elements, context);\n\n    case 'BinaryExpression': {\n      const [left, right] = await Promise.all([\n        evalAsync(node.left, context),\n        evalAsync(node.right, context)\n      ]);\n      return binops[node.operator](left, right);\n    }\n\n    case 'CallExpression': {\n      let caller, fn, assign;\n      if (node.callee.type === 'MemberExpression') {\n        assign = await evaluateMemberAsync(node.callee as jsep.MemberExpression, context);\n        caller = assign[0];\n        fn = assign[1];\n      } else {\n        fn = await evalAsync(node.callee, context);\n      }\n      if (typeof fn !== 'function') {\n        return undefined;\n      }\n      return await fn.apply(\n        caller,\n        await evaluateArrayAsync(node.arguments, context)\n      );\n    }\n\n    case 'ConditionalExpression':\n      return (await evalAsync(node.test, context))\n        ? await evalAsync(node.consequent, context)\n        : await evalAsync(node.alternate, context);\n\n    case 'Identifier':\n      return context[node.name];\n\n    case 'Literal':\n      return node.value;\n\n    case 'LogicalExpression': {\n      if (node.operator === '||') {\n        return (\n          (await evalAsync(node.left, context)) ||\n          (await evalAsync(node.right, context))\n        );\n      } else if (node.operator === '&&') {\n        return (\n          (await evalAsync(node.left, context)) &&\n          (await evalAsync(node.right, context))\n        );\n      }\n\n      const [left, right] = await Promise.all([\n        evalAsync(node.left, context),\n        evalAsync(node.right, context)\n      ]);\n\n      return binops[node.operator](left, right);\n    }\n\n    case 'MemberExpression':\n      return (await evaluateMemberAsync(node, context))[1];\n\n    case 'ThisExpression':\n      return context;\n\n    case 'UnaryExpression':\n      return unops[node.operator](await evalAsync(node.argument, context));\n\n    default:\n      return undefined;\n  }\n}\n\nfunction compile(expression: string | jsep.Expression): (context: object) => any {\n  return evaluate.bind(null, jsep(expression));\n}\n\nfunction compileAsync(expression: string | jsep.Expression): (context: object) => Promise<any> {\n  return evalAsync.bind(null, jsep(expression));\n}\n\n// Added functions to inject Custom Unary Operators (and override existing ones)\nfunction addUnaryOp(operator: string, _function: unaryCallback): void {\n  jsep.addUnaryOp(operator);\n  unops[operator] = _function;\n}\n\n// Added functions to inject Custom Binary Operators (and override existing ones)\nfunction addBinaryOp(operator: string, precedence_or_fn: number | binaryCallback, _function: binaryCallback): void {\n  if (_function) {\n    jsep.addBinaryOp(operator, precedence_or_fn as number);\n    binops[operator] = _function;\n  } else {\n    jsep.addBinaryOp(operator, DEFAULT_PRECEDENCE[operator] || 1);\n    binops[operator] = precedence_or_fn;\n  }\n}\n\nexport {\n  jsep as parse,\n  evaluate as eval,\n  evalAsync,\n  compile,\n  compileAsync,\n  addUnaryOp,\n  addBinaryOp\n};\n"],"names":["DEFAULT_PRECEDENCE","binops","a","b","unops","evaluateArray","list","context","map","v","evaluate","async","evaluateArrayAsync","Promise","all","evalAsync","evaluateMember","node","object","key","computed","property","name","test","Error","evaluateMemberAsync","_node","type","elements","operator","left","right","caller","fn","assign","callee","apply","arguments","consequent","alternate","value","argument","compile","expression","bind","jsep","compileAsync","addUnaryOp","_function","addBinaryOp","precedence_or_fn"],"mappings":"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"}