import { ShaderDataType, ShaderAttributeType } from "../types/shader-types.js";
import { VertexFormat } from "../types/vertex-formats.js";
/** Information extracted from a ShaderAttributeInfo constant */
export type ShaderAttributeTypeInfo = {
    /** WGSL-style primitive data type, f32, i32, u32 */
    dataType: ShaderDataType;
    /** Whether this is a normalized integer (that must be used as float) */
    components: 1 | 2 | 3 | 4;
    /** Length in bytes of the data for one vertex */
    byteLength?: number;
    /** Whether this is for integer or float vert */
    integer: boolean;
    /** Whether this data type is signed */
    signed: boolean;
    /** The simplest vertex format that matches the shader attribute's data type */
    defaultVertexFormat?: VertexFormat;
};
/** Decodes a vertex type, returning byte length and flags (integer, signed, normalized) */
export declare function decodeShaderAttributeType(attributeType: ShaderAttributeType): ShaderAttributeTypeInfo;
//# sourceMappingURL=decode-attribute-type.d.ts.map