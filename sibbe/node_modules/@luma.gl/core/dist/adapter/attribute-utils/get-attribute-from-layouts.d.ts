import type { ShaderLayout } from "../types/shader-layout.js";
import type { BufferLayout } from "../types/buffer-layout.js";
import type { ShaderDataType, ShaderAttributeType } from "../types/shader-types.js";
import type { VertexFormat, VertexType } from "../types/vertex-formats.js";
/** Resolved info for a buffer / attribute combination to help backend configure it correctly */
export type AttributeInfo = {
    /** Attribute name */
    attributeName: string;
    /** Location in shader */
    location: number;
    /** Type / precision used in shader (buffer values may be converted) */
    shaderType: ShaderAttributeType;
    /** Calculations are done in this type in the shader's attribute declaration */
    shaderDataType: ShaderDataType;
    /** Components refer to the number of components in the shader's attribute declaration */
    shaderComponents: 1 | 2 | 3 | 4;
    /** It is the shader attribute declaration that determines whether GPU will process as integer or float */
    integer: boolean;
    /** BufferName */
    bufferName: string;
    /** Format of buffer data */
    vertexFormat: VertexFormat;
    /** Memory data type refers to the data type in the buffer */
    bufferDataType: VertexType;
    /** Components refer to the number of components in the buffer's vertex format */
    bufferComponents: 1 | 2 | 3 | 4;
    /** Normalization is encoded in the buffer layout's vertex format... */
    normalized: boolean;
    /** If not specified, the step mode is inferred from the attribute name in the shader (contains string instance) */
    stepMode: 'vertex' | 'instance';
    /** The byteOffset is encoded in or calculated from the buffer layout */
    byteOffset: number;
    /** The byteStride is encoded in or calculated from the buffer layout */
    byteStride: number;
};
/**
 * Map from "attribute names" to "resolved attribute infos"
 * containing information about both buffer layouts and shader attribute declarations
 */
export declare function getAttributeInfosFromLayouts(shaderLayout: ShaderLayout, bufferLayout: BufferLayout[]): Record<string, AttributeInfo>;
/**
 * Array indexed by "location" holding "resolved attribute infos"
 */
export declare function getAttributeInfosByLocation(shaderLayout: ShaderLayout, bufferLayout: BufferLayout[], maxVertexAttributes?: number): AttributeInfo[];
/**
 * Merges an provided shader layout into a base shader layout
 * In WebGL, this allows the auto generated shader layout to be overridden by the application
 * Typically to change the format of the vertex attributes (from float32x4 to uint8x4 etc).
 * @todo Drop this? Aren't all use cases covered by mergeBufferLayout()?
 */
export declare function mergeShaderLayout(baseLayout: ShaderLayout, overrideLayout: ShaderLayout): ShaderLayout;
//# sourceMappingURL=get-attribute-from-layouts.d.ts.map