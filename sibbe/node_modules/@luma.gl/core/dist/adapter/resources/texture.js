// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
import { Resource } from "./resource.js";
/**
 * Abstract Texture interface
 * Texture Object
 * https://gpuweb.github.io/gpuweb/#gputexture
 */
export class Texture extends Resource {
    static defaultProps = {
        ...Resource.defaultProps,
        data: null,
        dimension: '2d',
        format: 'rgba8unorm',
        width: undefined,
        height: undefined,
        depth: 1,
        mipmaps: true,
        // type: undefined,
        compressed: false,
        // mipLevels: 1,
        usage: 0,
        // usage: GPUTextureUsage.COPY_DST
        mipLevels: undefined,
        samples: undefined,
        type: undefined,
        sampler: {},
        view: undefined
    };
    static COPY_SRC = 0x01;
    static COPY_DST = 0x02;
    static TEXTURE_BINDING = 0x04;
    static STORAGE_BINDING = 0x08;
    static RENDER_ATTACHMENT = 0x10;
    get [Symbol.toStringTag]() {
        return 'Texture';
    }
    /** dimension of this texture */
    dimension;
    /** format of this texture */
    format;
    /** width in pixels of this texture */
    width;
    /** height in pixels of this texture */
    height;
    /** depth of this texture */
    depth;
    /** "Time" of last update. Monotonically increasing timestamp */
    updateTimestamp;
    /** Do not use directly. Create with device.createTexture() */
    constructor(device, props, defaultProps = Texture.defaultProps) {
        super(device, props, defaultProps);
        this.dimension = this.props.dimension;
        this.format = this.props.format;
        this.width = this.props.width;
        this.height = this.props.height;
        this.depth = this.props.depth;
        // TODO - perhaps this should be set on async write completion?
        this.updateTimestamp = device.incrementTimestamp();
    }
}
