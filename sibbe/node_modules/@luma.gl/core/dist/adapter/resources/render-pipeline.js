// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// import {normalizeAttributeMap} from '../helpers/attribute-bindings';
import { Resource } from "./resource.js";
/**
 * A compiled and linked shader program
 */
export class RenderPipeline extends Resource {
    static defaultProps = {
        ...Resource.defaultProps,
        vs: null,
        vertexEntryPoint: 'vertexMain',
        vsConstants: {},
        fs: null,
        fragmentEntryPoint: 'fragmentMain',
        fsConstants: {},
        shaderLayout: null,
        bufferLayout: [],
        topology: 'triangle-list',
        parameters: {},
        vertexCount: 0,
        instanceCount: 0,
        bindings: {},
        uniforms: {}
    };
    get [Symbol.toStringTag]() {
        return 'RenderPipeline';
    }
    /** The merged layout */
    shaderLayout;
    /** Buffer map describing buffer interleaving etc */
    bufferLayout;
    /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */
    linkStatus = 'pending';
    /** The hash of the pipeline */
    hash = '';
    constructor(device, props) {
        super(device, props, RenderPipeline.defaultProps);
        this.shaderLayout = this.props.shaderLayout;
        this.bufferLayout = this.props.bufferLayout || [];
    }
    // DEPRECATED METHODS
    /**
     * Uniforms
     * @deprecated Use uniforms buffers
     * @note textures, samplers and uniform buffers should be set via `setBindings()`, these are not considered uniforms.
     * @note In WebGL uniforms have a performance penalty, they are reset before each call to enable pipeline sharing.
     */
    setUniformsWebGL(uniforms) {
        throw new Error('Use uniform blocks');
    }
}
