import type { Log } from '@probe.gl/log';
import type { DeviceProps } from "../adapter/device.js";
import { Device } from "../adapter/device.js";
import { StatsManager } from "../utils/stats-manager.js";
/** Properties for creating a new device */
export type CreateDeviceProps = DeviceProps & {
    /** Selects the type of device. `best-available` uses webgpu if available, then webgl. */
    type?: 'webgl' | 'webgpu' | 'unknown' | 'best-available';
    devices?: any[];
};
/** Properties for attaching an existing WebGL context or WebGPU device to a new luma Device */
export type AttachDeviceProps = DeviceProps & {
    /** Externally created WebGL context or WebGPU device */
    handle: WebGL2RenderingContext;
    devices?: any[];
};
/**
 * Entry point to the luma.gl GPU abstraction
 * Register WebGPU and/or WebGL devices (controls application bundle size)
 * Run-time selection of the first available Device
 */
export declare class luma {
    static defaultProps: Required<CreateDeviceProps>;
    /** Global stats for all devices */
    static stats: StatsManager;
    /** Global log */
    static log: Log;
    static registerDevices(deviceClasses: any[]): void;
    static getAvailableDevices(): string[];
    static getSupportedDevices(): string[];
    static setDefaultDeviceProps(props: CreateDeviceProps): void;
    /** Attach to an existing GPU API handle (WebGL2RenderingContext or GPUDevice). */
    static attachDevice(props: AttachDeviceProps): Promise<Device>;
    /** Creates a device. Asynchronously. */
    static createDevice(props?: CreateDeviceProps): Promise<Device>;
}
//# sourceMappingURL=luma.d.ts.map