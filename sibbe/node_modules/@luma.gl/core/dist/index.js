// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
export { VERSION } from "./init.js";
export { isTypedArray, isNumberArray } from "./utils/is-array.js";
// MAIN API ACCESS POINTS
export { luma } from "./lib/luma.js";
export { Device, DeviceFeatures, DeviceLimits } from "./adapter/device.js";
export { CanvasContext } from "./adapter/canvas-context.js";
export { Resource } from "./adapter/resources/resource.js";
export { Buffer } from "./adapter/resources/buffer.js";
export { Texture } from "./adapter/resources/texture.js";
export { TextureView } from "./adapter/resources/texture-view.js";
export { ExternalTexture } from "./adapter/resources/external-texture.js";
export { Shader } from "./adapter/resources/shader.js";
export { Sampler } from "./adapter/resources/sampler.js";
export { Framebuffer } from "./adapter/resources/framebuffer.js";
export { RenderPipeline } from "./adapter/resources/render-pipeline.js";
export { RenderPass } from "./adapter/resources/render-pass.js";
export { ComputePipeline } from "./adapter/resources/compute-pipeline.js";
export { ComputePass } from "./adapter/resources/compute-pass.js";
export { CommandEncoder } from "./adapter/resources/command-encoder.js";
export { CommandBuffer } from "./adapter/resources/command-buffer.js";
export { VertexArray } from "./adapter/resources/vertex-array.js";
export { TransformFeedback } from "./adapter/resources/transform-feedback.js";
export { QuerySet } from "./adapter/resources/query-set.js";
export { UniformBufferLayout } from "./lib/uniforms/uniform-buffer-layout.js";
export { UniformBlock } from "./lib/uniforms/uniform-block.js";
export { UniformStore } from "./lib/uniforms/uniform-store.js";
// TYPE UTILS
export { decodeVertexFormat } from "./adapter/type-utils/decode-vertex-format.js";
export { decodeTextureFormat } from "./adapter/type-utils/decode-texture-format.js";
export { getDataTypeFromTypedArray, getTypedArrayFromDataType, getVertexFormatFromAttribute } from "./adapter/type-utils/vertex-format-from-attribute.js";
// SHADER TYPE UTILS
export { decodeShaderUniformType } from "./adapter/type-utils/decode-shader-types.js";
export { decodeShaderAttributeType } from "./adapter/type-utils/decode-attribute-type.js";
export { formatCompilerLog } from "./lib/compiler-log/format-compiler-log.js";
export { getAttributeInfosFromLayouts, mergeShaderLayout } from "./adapter/attribute-utils/get-attribute-from-layouts.js";
// GENERAL UTILS
export { StatsManager } from "./utils/stats-manager.js";
export { assert } from "./utils/assert.js";
export { cast } from "./utils/cast.js";
export { log } from "./utils/log.js";
export { uid, isObjectEmpty } from "./utils/utils.js";
export { isUniformValue, splitUniformsAndBindings } from "./lib/uniforms/uniform.js";
export { formatValue } from "./utils/format-value.js";
export { stubRemovedMethods } from "./utils/stub-methods.js";
export { checkProps } from "./utils/check-props.js";
export { setPathPrefix, loadFile, loadImage, loadImageBitmap, loadScript } from "./utils/load-file.js";
export { getScratchArrayBuffer, getScratchArray, fillArray } from "./utils/array-utils-flat.js";
export { makeRandomNumberGenerator, random } from "./utils/random.js";
export { deepEqual } from "./utils/deep-equal.js";
// ENGINE - TODO/move to @luma.gl/engine once that module is webgl-independent?
export { requestAnimationFrame, cancelAnimationFrame } from "./utils/request-animation-frame.js";
// SHADER HELPERS
/**
 * Marks GLSL shaders for syntax highlighting: glsl`...`
 * Install https://marketplace.visualstudio.com/items?itemName=boyswan.glsl-literal
 */
export const glsl = (x) => `${x}`;
