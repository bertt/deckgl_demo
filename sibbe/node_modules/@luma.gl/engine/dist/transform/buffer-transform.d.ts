import { Device, Buffer, BufferRange, TransformFeedback, RenderPassProps } from '@luma.gl/core';
import { Model } from "../model/model.js";
import type { ModelProps } from "../model/model.js";
/**
 * Properties for creating a {@link BufferTransform}
 * @deprecated
 */
export type BufferTransformProps = Omit<ModelProps, 'fs'> & {
    fs?: ModelProps['fs'];
    feedbackBuffers?: Record<string, Buffer | BufferRange>;
};
/**
 * Creates a pipeline for bufferâ†’buffer transforms.
 * @deprecated
 */
export declare class BufferTransform {
    readonly device: Device;
    readonly model: Model;
    readonly transformFeedback: TransformFeedback;
    /** @deprecated Use device feature test. */
    static isSupported(device: Device): boolean;
    constructor(device: Device, props?: BufferTransformProps);
    /** Destroy owned resources. */
    destroy(): void;
    /** @deprecated Use {@link destroy}. */
    delete(): void;
    /** Run one transform loop. */
    run(options?: RenderPassProps): void;
    /** @deprecated */
    update(...args: any[]): void;
    /** Returns the {@link Buffer} or {@link BufferRange} for given varying name. */
    getBuffer(varyingName: string): Buffer | BufferRange | null;
    readAsync(varyingName: string): Promise<Uint8Array>;
}
//# sourceMappingURL=buffer-transform.d.ts.map