// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
import { glsl } from "../../../lib/glsl-utils/highlight.js";
import { random } from "../..//math/random/random.js";
const fs = `\
uniform triangleBlurUniforms {
float radius;
vec2 delta;
} triangleBlur;
vec4 triangleBlur_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
vec2 adjustedDelta = triangleBlur.delta * triangleBlur.radius / texSize;
vec4 color = vec4(0.0);
float total = 0.0;
float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);
for (float t = -30.0; t <= 30.0; t++) {
float percent = (t + offset - 0.5) / 30.0;
float weight = 1.0 - abs(percent);
vec4 offsetColor = texture(source, texCoord + adjustedDelta * percent);
offsetColor.rgb *= offsetColor.a;
color += offsetColor * weight;
total += weight;
}
color = color / total;
color.rgb /= color.a + 0.00001;
return color;
}
`;
/**
 * @filter       Triangle Blur
 * @description  This is the most basic blur filter, which convolves the image with a
 *               pyramid filter. The pyramid filter is separable and is applied as two
 *               perpendicular triangle filters.
 */
export const triangleBlur = {
    name: 'triangleBlur',
    uniformTypes: {
        radius: 'f32',
        delta: 'vec2<f32>'
    },
    uniformPropTypes: {
        radius: { value: 20, min: 0, softMax: 100 },
        delta: { value: [1, 0], private: true }
    },
    fs,
    dependencies: [random],
    passes: [
        { sampler: true, uniforms: { delta: [1, 0] } },
        { sampler: true, uniforms: { delta: [0, 1] } }
    ]
};
