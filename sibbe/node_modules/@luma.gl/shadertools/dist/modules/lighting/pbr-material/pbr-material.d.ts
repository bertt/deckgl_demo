import type { NumberArray, Texture } from '@luma.gl/core';
import type { Vector2, Vector3, Vector4 } from '@math.gl/core';
import { ShaderModule } from "../../../lib/shader-module/shader-module.js";
export type PBRMaterialProps = PBRMaterialBindings & {
    unlit: boolean;
    baseColorMapEnabled: boolean;
    baseColorFactor: Readonly<Vector4 | NumberArray>;
    normalMapEnabled: boolean;
    normalScale: number;
    emissiveMapEnabled: boolean;
    emissiveFactor: Readonly<Vector3 | NumberArray>;
    metallicRoughnessValues: Readonly<Vector2 | NumberArray>;
    metallicRoughnessMapEnabled: boolean;
    occlusionMapEnabled: boolean;
    occlusionStrength: number;
    alphaCutoffEnabled: boolean;
    alphaCutoff: number;
    IBLenabled: boolean;
    scaleIBLAmbient: Readonly<Vector2 | NumberArray>;
    scaleDiffBaseMR: Readonly<Vector4 | NumberArray>;
    scaleFGDSpec: Readonly<Vector4 | NumberArray>;
};
/** Non-uniform block bindings for pbr module */
type PBRMaterialBindings = {
    baseColorSampler?: Texture | null;
    normalSampler?: Texture | null;
    emissiveSampler?: Texture | null;
    metallicRoughnessSampler?: Texture | null;
    occlusionSampler?: Texture | null;
    diffuseEnvSampler: Texture | null;
    specularEnvSampler: Texture | null;
    brdfLUT?: Texture | null;
};
export type PBRMaterialUniforms = {
    unlit: boolean;
    baseColorMapEnabled: boolean;
    baseColorFactor: Readonly<Vector4 | NumberArray>;
    normalMapEnabled: boolean;
    normalScale: number;
    emissiveMapEnabled: boolean;
    emissiveFactor: Readonly<Vector3 | NumberArray>;
    metallicRoughnessValues: Readonly<Vector2 | NumberArray>;
    metallicRoughnessMapEnabled: boolean;
    occlusionMapEnabled: boolean;
    occlusionStrength: number;
    alphaCutoffEnabled: boolean;
    alphaCutoff: number;
    IBLenabled: boolean;
    scaleIBLAmbient: Readonly<Vector2 | NumberArray>;
    scaleDiffBaseMR: Readonly<Vector4 | NumberArray>;
    scaleFGDSpec: Readonly<Vector4 | NumberArray>;
};
/**
 * An implementation of PBR (Physically-Based Rendering).
 * Physically Based Shading of a microfacet surface defined by a glTF material.
 */
export declare const pbrMaterial: ShaderModule<PBRMaterialProps, PBRMaterialUniforms>;
export {};
//# sourceMappingURL=pbr-material.d.ts.map