import type { NumberArray } from '@math.gl/types';
import { ShaderModule } from "../../../lib/shader-module/shader-module.js";
export type DirlightProps = {
    lightDirection?: NumberArray | [number, number, number];
};
export type DirlightUniforms = DirlightProps;
export declare const VS_WGSL = "  \nvoid dirlight_setNormal(normal: vec3<f32>) {\n  dirlight_vNormal = normalize(normal);\n}\n";
export declare const FS_WGSL = "uniform dirlightUniforms {\n  vec3 lightDirection;\n} dirlight;\n\n// Returns color attenuated by angle from light source\nfn dirlight_filterColor(color: vec4<f32>, dirlightInputs): vec4<f32> {\n  const d: float = abs(dot(dirlight_vNormal, normalize(dirlight.lightDirection)));\n  return vec4<f32>(color.rgb * d, color.a);\n}\n";
/**
 * Cheap lighting - single directional light, single dot product, one uniform
 */
export declare const dirlight: ShaderModule<DirlightProps, DirlightUniforms>;
//# sourceMappingURL=dirlight.d.ts.map