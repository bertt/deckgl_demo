/**
 * For use by shader module and shader pass writers to describe the types of the
 * properties they expose (properties ultimately map to uniforms).
 */
export type PropType = {
    type?: string;
    value?: unknown;
    max?: number;
    min?: number;
    softMax?: number;
    softMin?: number;
    hint?: string;
    /** @deprecated internal uniform */
    private?: boolean;
} | number;
/**
 * Internal property validators generated by processing the prop types ,
 * The `validate()` method can be used to validate the type of properties passed in to
 * shader module or shader pass
 */
export type PropValidator = {
    type: string;
    value?: unknown;
    max?: number;
    min?: number;
    private?: boolean;
    validate?(value: unknown, propDef: PropValidator): boolean;
};
/**
 * Parse a list of property types into property definitions that can be used to validate
 * values passed in by applications.
 * @param propTypes
 * @returns
 */
export declare function makePropValidators(propTypes: Record<string, PropType>): Record<string, PropValidator>;
/**
 * Validate a map of user supplied properties against a map of validators
 * Inject default values when user doesn't supply a property
 * @param properties
 * @param propValidators
 * @returns
 */
export declare function getValidatedProperties(properties: Record<string, unknown>, propValidators: Record<string, PropValidator>, errorMessage: string): Record<string, unknown>;
//# sourceMappingURL=prop-types.d.ts.map