import { PropValidator } from "../filters/prop-types.js";
import { ShaderModule, ShaderModuleDeprecation } from "./shader-module.js";
import { ShaderInjection } from "../shader-assembly/shader-injections.js";
/** An initialized ShaderModule, ready to use with `assembleShaders()` */
export declare class ShaderModuleInstance {
    name: string;
    vs?: string;
    fs?: string;
    getModuleUniforms: Function;
    dependencies: ShaderModuleInstance[];
    deprecations: ShaderModuleDeprecation[];
    defines: Record<string, string | number>;
    injections: {
        vertex: Record<string, ShaderInjection>;
        fragment: Record<string, ShaderInjection>;
    };
    uniforms: Record<string, PropValidator>;
    uniformTypes: Record<string, PropValidator>;
    static instantiateModules(modules: (ShaderModule | ShaderModuleInstance)[]): ShaderModuleInstance[];
    constructor(props: ShaderModule);
    getModuleSource(stage: 'vertex' | 'fragment'): string;
    getUniforms(userProps: Record<string, any>, uniforms: Record<string, any>): Record<string, any>;
    getDefines(): Record<string, string | number>;
    checkDeprecations(shaderSource: string, log: any): void;
    _parseDeprecationDefinitions(deprecations: ShaderModuleDeprecation[]): ShaderModuleDeprecation[];
    _defaultGetUniforms(opts?: Record<string, any>): Record<string, any>;
}
//# sourceMappingURL=shader-module-instance.d.ts.map