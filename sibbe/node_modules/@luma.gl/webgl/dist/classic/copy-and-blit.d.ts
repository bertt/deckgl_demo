import { Buffer, Texture, Framebuffer, FramebufferProps } from '@luma.gl/core';
import { GL } from '@luma.gl/constants';
import { WEBGLBuffer } from "../adapter/resources/webgl-buffer.js";
/**
 * Copies data from a type  or a Texture object into ArrayBuffer object.
 * App can provide targetPixelArray or have it auto allocated by this method
 *  newly allocated by this method unless provided by app.
 * @deprecated Use CommandEncoder.copyTextureToBuffer and Buffer.read
 * @note Slow requires roundtrip to GPU
 *
 * @param source
 * @param options
 * @returns pixel array,
 */
export declare function readPixelsToArray(source: Framebuffer | Texture, options?: {
    sourceX?: number;
    sourceY?: number;
    sourceFormat?: number;
    sourceAttachment?: number;
    target?: Uint8Array | Uint16Array | Float32Array;
    sourceWidth?: number;
    sourceHeight?: number;
    sourceType?: number;
}): Uint8Array | Uint16Array | Float32Array;
/**
 * Copies data from a Framebuffer or a Texture object into a Buffer object.
 * NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.
 * @deprecated Use CommandEncoder
 * @param source
 * @param options
 */
export declare function readPixelsToBuffer(source: Framebuffer | Texture, options?: {
    sourceX?: number;
    sourceY?: number;
    sourceFormat?: number;
    target?: Buffer;
    targetByteOffset?: number;
    sourceWidth?: number;
    sourceHeight?: number;
    sourceType?: number;
}): WEBGLBuffer;
/**
 * Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)
 * @deprecated Use CommandEncoder
 */
export declare function copyToTexture(source: Framebuffer | Texture, target: Texture | GL, options?: {
    sourceX?: number;
    sourceY?: number;
    targetX?: number;
    targetY?: number;
    targetZ?: number;
    targetMipmaplevel?: number;
    targetInternalFormat?: number;
    width?: number;
    height?: number;
}): Texture;
/**
 * Wraps a given texture into a framebuffer object, that can be further used
 * to read data from the texture object.
 */
export declare function toFramebuffer(texture: Texture, props?: FramebufferProps): Framebuffer;
//# sourceMappingURL=copy-and-blit.d.ts.map