import type { Device, ResourceProps } from '@luma.gl/core';
import { Resource } from '@luma.gl/core';
import { GL } from '@luma.gl/constants';
import { WebGLDevice } from "../webgl-device.js";
/**
 * Base class for WebGL object wrappers
 */
export declare abstract class WebGLResource<Props extends ResourceProps> extends Resource<Props> {
    readonly device: WebGLDevice;
    readonly gl: WebGL2RenderingContext;
    readonly gl2: WebGL2RenderingContext;
    private _handle;
    private _bound;
    byteLength: number;
    constructor(device: Device, props: Props, defaultProps: Required<Props>);
    toString(): string;
    get handle(): any;
    delete({ deleteChildren }?: {
        deleteChildren?: boolean;
    }): this;
    bind(funcOrHandle?: any): any;
    unbind(): void;
    stubRemovedMethods(className: string, version: string, methodNames: string[]): void;
    initialize(props: ResourceProps): void;
    _createHandle(): void;
    _deleteHandle(): void;
    _bindHandle(handle: any): void;
    _getOptsFromHandle(): void;
    _getParameter(pname: GL, props: Record<string, any>): number;
    _setParameter(pname: GL | string, value: any): void;
}
//# sourceMappingURL=webgl-resource.d.ts.map