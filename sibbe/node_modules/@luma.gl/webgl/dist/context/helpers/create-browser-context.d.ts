/**
 * ContextProps
 * @param onContextLost
 * @param onContextRestored
 *
 * BROWSER CONTEXT PARAMETERS
 * @param debug Instrument context (at the expense of performance).
 * @param alpha Default render target has an alpha buffer.
 * @param depth Default render target has a depth buffer of at least 16 bits.
 * @param stencil Default render target has a stencil buffer of at least 8 bits.
 * @param antialias Boolean that indicates whether or not to perform anti-aliasing.
 * @param premultipliedAlpha Boolean that indicates that the page compositor will assume the drawing buffer contains colors with pre-multiplied alpha.
 * @param preserveDrawingBuffer Default render target buffers will not be automatically cleared and will preserve their values until cleared or overwritten
 * @param failIfMajorPerformanceCaveat Do not create if the system performance is low.
 */
type ContextProps = {
    onContextLost?: (event: Event) => void;
    onContextRestored?: (event: Event) => void;
    alpha?: boolean;
    desynchronized?: boolean;
    antialias?: boolean;
    depth?: boolean;
    failIfMajorPerformanceCaveat?: boolean;
    powerPreference?: 'default' | 'high-performance' | 'low-power';
    premultipliedAlpha?: boolean;
    preserveDrawingBuffer?: boolean;
};
/**
 * Create a WebGL context for a canvas
 * Note calling this multiple time on the same canvas does return the same context
 * @param canvas A canvas element or offscreen canvas
 */
export declare function createBrowserContext(canvas: HTMLCanvasElement | OffscreenCanvas, props: ContextProps): WebGL2RenderingContext;
export {};
//# sourceMappingURL=create-browser-context.d.ts.map