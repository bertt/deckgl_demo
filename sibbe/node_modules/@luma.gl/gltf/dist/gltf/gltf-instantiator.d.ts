import { Device, Buffer, PrimitiveTopology } from '@luma.gl/core';
import { Geometry, GroupNode, ModelNode, ModelProps } from '@luma.gl/engine';
import { GLTFAnimator } from "./gltf-animator.js";
import type { PBREnvironment } from "../pbr/pbr-environment.js";
export type GLTFInstantiatorOptions = {
    modelOptions?: Partial<ModelProps>;
    pbrDebug?: boolean;
    imageBasedLightingEnvironment?: PBREnvironment;
    lights?: boolean;
    useTangents?: boolean;
};
/**
 * GLTF instantiator for luma.gl
 * Walks the parsed and resolved glTF structure and builds a luma.gl scenegraph
 */
export declare class GLTFInstantiator {
    device: Device;
    options: GLTFInstantiatorOptions;
    gltf: any;
    constructor(device: Device, options?: GLTFInstantiatorOptions);
    instantiate(gltf: any): GroupNode[];
    createAnimator(): GLTFAnimator;
    createScene(gltfScene: any): GroupNode;
    createNode(gltfNode: any): any;
    createMesh(gltfMesh: any): GroupNode;
    createPrimitive(gltfPrimitive: any, i: number, gltfMesh: any): ModelNode;
    getVertexCount(attributes: any): void;
    createGeometry(id: string, gltfPrimitive: any, topology: PrimitiveTopology): Geometry;
    createBuffer(attribute: any, usage: number): Buffer;
    createSampler(gltfSampler: any): any;
    needsPOT(): boolean;
}
declare enum GLEnum {
    POINTS = 0,
    LINES = 1,
    LINE_LOOP = 2,
    LINE_STRIP = 3,
    TRIANGLES = 4,
    TRIANGLE_STRIP = 5,
    TRIANGLE_FAN = 6
}
export declare function convertGLDrawModeToTopology(drawMode: GLEnum.POINTS | GLEnum.LINES | GLEnum.LINE_STRIP | GLEnum.LINE_LOOP | GLEnum.TRIANGLES | GLEnum.TRIANGLE_STRIP | GLEnum.TRIANGLE_FAN): PrimitiveTopology;
export {};
//# sourceMappingURL=gltf-instantiator.d.ts.map