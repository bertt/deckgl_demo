import type { LoaderOptions } from '@loaders.gl/loader-utils';
import { parseMVT } from "./lib/parse-mvt.js";
import type { MVTOptions } from "./lib/types.js";
export type MVTLoaderOptions = LoaderOptions & {
    mvt?: MVTOptions & {
        /** Override the URL to the worker bundle (by default loads from unpkg.com) */
        workerUrl?: string;
    };
    gis?: {
        /** `true`: parser will output the data in binary format. Equivalent to loading the data as GeoJSON and then applying geojsonToBinary */
        binary?: boolean;
        /** @deprecated. Use options.mvt.shape */
        format?: 'geojson-table' | 'columnar-table' | 'geojson' | 'binary' | 'binary-geometry';
    };
};
/**
 * Worker loader for the Mapbox Vector Tile format
 */
export declare const MVTWorkerLoader: {
    readonly dataType: any;
    readonly batchType: never;
    readonly name: "Mapbox Vector Tile";
    readonly id: "mvt";
    readonly module: "mvt";
    readonly version: any;
    readonly extensions: ["mvt", "pbf"];
    readonly mimeTypes: ["application/vnd.mapbox-vector-tile", "application/x-protobuf"];
    readonly worker: true;
    readonly category: "geometry";
    readonly options: {
        readonly mvt: {
            readonly shape: "geojson";
            readonly coordinates: "local";
            readonly layerProperty: "layerName";
            readonly layers: undefined;
            readonly tileIndex: null;
        };
    };
};
/**
 * Loader for the Mapbox Vector Tile format
 */
export declare const MVTLoader: {
    readonly parse: (arrayBuffer: ArrayBuffer, options?: MVTLoaderOptions) => Promise<import("@loaders.gl/schema").BinaryFeatureCollection | import("@loaders.gl/schema").GeoJSONTable | import("geojson").Feature<import("geojson").Geometry, import("geojson").GeoJsonProperties>[] | {
        shape: string;
        data: import("@loaders.gl/schema").BinaryFeatureCollection;
    }>;
    readonly parseSync: typeof parseMVT;
    readonly binary: true;
    readonly dataType: any;
    readonly batchType: never;
    readonly name: "Mapbox Vector Tile";
    readonly id: "mvt";
    readonly module: "mvt";
    readonly version: any;
    readonly extensions: ["mvt", "pbf"];
    readonly mimeTypes: ["application/vnd.mapbox-vector-tile", "application/x-protobuf"];
    readonly worker: true;
    readonly category: "geometry";
    readonly options: {
        readonly mvt: {
            readonly shape: "geojson";
            readonly coordinates: "local";
            readonly layerProperty: "layerName";
            readonly layers: undefined;
            readonly tileIndex: null;
        };
    };
};
//# sourceMappingURL=mvt-loader.d.ts.map