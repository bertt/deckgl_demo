import type { DataType, Loader, LoaderContext, LoaderOptions } from '@loaders.gl/loader-utils';
import type { LoaderOptionsType, LoaderReturnType } from '@loaders.gl/loader-utils';
/**
 * Parses `data` using a specified loader
 * Note: Load does duplicate a lot of parse.
 * it can also call fetchFile on string urls, which `parse` won't do.
 * @param data
 * @param loaders
 * @param options
 * @param context
 */
export declare function load<LoaderT extends Loader, OptionsT extends LoaderOptions = LoaderOptionsType<LoaderT>>(url: string | DataType, loader: LoaderT, options?: OptionsT, context?: LoaderContext): Promise<LoaderReturnType<LoaderT>>;
export declare function load(url: string | DataType, loaders: Loader[], options?: LoaderOptions, context?: LoaderContext): Promise<unknown>;
export declare function load(url: string | DataType, loaders?: LoaderOptions, context?: LoaderContext): Promise<unknown>;
export declare function load(url: string | DataType, loaders: LoaderOptions): Promise<any>;
//# sourceMappingURL=load.d.ts.map