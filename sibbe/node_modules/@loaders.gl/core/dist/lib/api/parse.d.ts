import type { Loader, LoaderContext, LoaderOptions } from '@loaders.gl/loader-utils';
import type { DataType } from '@loaders.gl/loader-utils';
import type { LoaderOptionsType, LoaderReturnType } from '@loaders.gl/loader-utils';
/**
 * Parses `data` asynchronously using the supplied loader
 */
export declare function parse<LoaderT extends Loader, OptionsT extends LoaderOptions = LoaderOptionsType<LoaderT>>(data: DataType | Promise<DataType>, loader: LoaderT, options?: OptionsT, context?: LoaderContext): Promise<LoaderReturnType<LoaderT>>;
/**
 * Parses `data` asynchronously by matching one of the supplied loader
 */
export declare function parse(data: DataType | Promise<DataType>, loaders: Loader[], options?: LoaderOptions, context?: LoaderContext): Promise<unknown>;
/**
 * Parses data asynchronously by matching a pre-registered loader
 */
export declare function parse(data: DataType | Promise<DataType>, options?: LoaderOptions): Promise<unknown>;
//# sourceMappingURL=parse.d.ts.map