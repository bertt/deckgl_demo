import type { Loader, LoaderOptions } from '@loaders.gl/loader-utils';
import type { LoaderContext, SyncDataType } from '@loaders.gl/loader-utils';
import type { LoaderOptionsType, LoaderReturnType } from '@loaders.gl/loader-utils';
/**
 * Parses `data` synchronously using the specified loader
 */
export declare function parseSync<LoaderT extends Loader, OptionsT extends LoaderOptions = LoaderOptionsType<LoaderT>>(data: SyncDataType, loader: LoaderT, options?: OptionsT, context?: LoaderContext): LoaderReturnType<LoaderT>;
/**
 * Parses `data` synchronously by matching one of the supplied loaders
 */
export declare function parseSync(data: SyncDataType, loaders: Loader[], options?: LoaderOptions, context?: LoaderContext): unknown;
/**
 * Parses `data` synchronously by matching a pre=registered loader
 */
export declare function parseSync(data: SyncDataType, options?: LoaderOptions): unknown;
//# sourceMappingURL=parse-sync.d.ts.map